{"version":3,"sources":["../../../src/bin/reporters/cli/cli.ts","../../../src/bin/reporters/cli/formatters.ts"],"sourcesContent":["import type { TFailedErrorResult, TRunResults } from '../../../types'\n\nimport { Logger } from '@keg-hub/cli-utils'\nimport {emptyObj} from '@keg-hub/jsutils'\n\nimport {\n  Tags,\n  Format,\n  FormatLine,\n  FormatError,\n  FormatChild,\n  FormatParent,\n  FormatErrors,\n} from './formatters'\n\n\nexport type TPrintResultOpts = {\n  failedOnly?:boolean\n  steps?:boolean\n  rules?:boolean\n  features?:boolean\n  errorOnly?:boolean\n  stepParents?:boolean\n  throwOnFailed?:boolean\n  exitWithError?:boolean\n}\n\nconst FailText = (text:string) => `${Logger.colors.red(`✘`)} ${Logger.colors.gray(`-`)} ${text}`\nconst PassText = (text:string) => `${Logger.colors.green(`✔`)} ${Logger.colors.gray(`-`)} ${text}`\n\nconst printResult = (\n  results:TRunResults,\n  opts:TPrintResultOpts=emptyObj\n) => {\n  const {\n    errorOnly,\n    failedOnly,\n    steps=true,\n    features=true,\n    stepParents=true,\n    exitWithError,\n    throwOnFailed\n  } = opts\n\n  let hasFailed:boolean\n  const output:string[] = []\n\n  results.forEach((result) => {\n\n    if((failedOnly || errorOnly) && result.passed) return\n \n    if(!hasFailed && result.failed) hasFailed = result.failed\n\n    if(features && (!errorOnly || !result.passed))\n      output.push(FormatParent(result.fullName, result.failed, result.failed))\n\n    result.describes.forEach(describe => {\n      if((failedOnly || errorOnly) && describe.passed) return\n\n      if(stepParents && (!errorOnly || !describe.passed))\n        output.push(FormatParent(describe.description, result.failed, describe.failed))\n\n      describe.tests.forEach(test => {\n        if((failedOnly || errorOnly) && test.passed) return\n\n        if(steps || !test.passed)\n          output.push(FormatChild(test.description, result.failed, test.failed))\n\n        test.failed && output.push(FormatErrors(test.failedExpectations as TFailedErrorResult[]))\n\n      })\n\n    })\n\n  })\n\n  if(!hasFailed){\n    if(!exitWithError) return output.length && Logger.log(output.join(``))\n    output.length && Logger.log(output.join(``))\n    Logger.empty()\n    Logger.log(PassText(`All features ${Logger.colors.green(`passed`)}\\n`))\n    process.exit(0)\n  }\n\n  if(exitWithError){\n    output.length && Logger.log(output.join(``))\n    Logger.empty()\n    Logger.log(FailText(`One or more Features ${Logger.colors.red(`failed`)}\\n`))\n    Logger.empty()\n    process.exit(1)\n  }\n\n  output.length && Logger.log(output.join(``))\n\n  if(throwOnFailed)\n    throw new Error(`One or more Features failed`)\n\n}\n\nexport const CLIReporter = {\n  tags: Tags,\n  fail: FailText,\n  pass: PassText,\n  results: printResult,\n  format: {\n    format: Format,\n    line: FormatLine,\n    error: FormatError,\n    child: FormatChild,\n    parent: FormatParent,\n    errors: FormatErrors,\n  }\n}\n","import type { TFailedErrorResult, TRunResult } from '../../../types'\n\nimport { Logger } from '@keg-hub/cli-utils'\n\nexport type TFormatLine = {\n  type:string\n  text:string\n  failed?:boolean\n  isFailed?:boolean\n  isParent?:boolean\n  isFeature?:boolean\n}\n\nconst Clrs = Logger.colors\nconst FailTag = `${Clrs.colorMap.red}✘`\nconst PassTag = `${Clrs.colorMap.green}✔`\nconst WarnTag = `${Clrs.colorMap.yellow}○`\nconst FPassTag = `\\x1b[42m\\x1b[30m PASS \\x1b[0m`\nconst FFailTag = `\\x1b[41m\\x1b[30m FAIL \\x1b[0m`\nconst FWarnTag = `\\x1b[43m\\x1b[30m WARN \\x1b[0m`\n\nexport const Tags = {\n  root: {\n    fail: FFailTag,\n    pass: FPassTag,\n    warn: FWarnTag,\n  },\n  child: {\n    fail: FailTag,\n    pass: PassTag,\n    warn: WarnTag,\n  }\n}\n\nconst DimText = (text:string) => (`${Clrs.colorMap.dim}${text}`)\n\nconst ColorMap = {\n  Feature: {\n    text: Clrs.colorMap.gray,\n    type: Clrs.colorMap.yellow,\n  },\n  Rule: {\n    text: Clrs.colorMap.gray,\n    type: Clrs.colorMap.blue,\n  },\n  Parent: {\n    text: Clrs.colorMap.gray,\n    type: Clrs.colorMap.magenta,\n  },\n  Step: {\n    text: Clrs.colorMap.gray,\n    type: Clrs.colorMap.cyan,\n  },\n  Error: {\n    text: Clrs.colorMap.white,\n    type: Clrs.colorMap.red,\n  }\n}\n\nexport const FormatLine = (args:TFormatLine) => {\n  const {\n    type,\n    text,\n    failed,\n    isParent,\n    isFailed,\n    isFeature,\n  } = args\n\n  const sep = isParent ? ` ${Clrs.colorMap.white}> ` : ` `\n  const [PTag, FTag, WTag] = isFeature\n    ? [FPassTag, FFailTag, FWarnTag]\n    : [PassTag, FailTag, WarnTag]\n\n  const tag = !failed ? PTag : isFailed ? FTag : WTag\n  const colorType = ColorMap[type as keyof typeof ColorMap]\n\n  const colors = failed && isFailed\n    ? ColorMap.Error\n    : colorType\n      ? colorType\n      : isParent\n        ? ColorMap.Parent\n        : ColorMap.Step\n\n  \n  const line = `${tag} ${colors.type}${type}${sep}${colors.text}${text}${Clrs.colorMap.reset}`\n\n  /** Don't dim the text if not failed || this line is the line that failed */\n  return (isFailed || !failed) ? line : DimText(line)\n\n}\n\nexport const FormatParent = (text:string, failed?:boolean, isFailed?:boolean) => {\n  const [first, description] = text.split(`>`)\n  const type = first.trim()\n  const isFeature = type.startsWith(`Feature`)\n\n  const line = FormatLine({\n    type,\n    failed,\n    isFailed,\n    isParent: true,\n    isFeature: type.startsWith(`Feature`),\n    text: (description || ``)?.trim?.(),\n  })\n\n  return isFeature ? `\\n${line}\\n` : `  ${line}\\n`\n}\n\nexport const FormatChild = (text:string, failed?:boolean, isFailed?:boolean) => {\n  const [type, ...rest] = text.split(` `)\n  const line = FormatLine({\n    failed,\n    isFailed,\n    isParent: false,\n    type: type.trim(),\n    text: (rest.join(` `) || ``)?.trim?.(),\n  })\n\n  return `    ${line}\\n`\n}\n\nexport const FormatError = (failed:TFailedErrorResult) => {\n  const output = []\n  const space = `      `\n\n  const { fullName, description, error } = failed\n  const message = error ? error.stack : `${fullName}\\n${description}`\n\n  const [first, ...lines] = message.split(`\\n`)\n  output.push(`\\n${space}${Clrs.red(first)}\\n`)\n  output.push(Clrs.white(lines.map(line => `${space}${line}`).join(`\\n`)))\n  output.push(`\\n\\n`)\n\n  return output.join(``)\n}\n\nexport const FormatErrors = (failedExps:TFailedErrorResult[]) => {\n  return failedExps.map(failed => FormatError(failed)).join(``)\n}\n\n\nexport const Format = (text:string, failed?:boolean, isFailed?:boolean) => {\n  return text.includes(`>`)\n    ? FormatParent(text, failed, isFailed)\n    : FormatChild(text, failed, isFailed)\n}\n"],"mappings":"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","names":["Logger","Logger"]}