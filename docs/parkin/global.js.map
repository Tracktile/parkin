{"version":3,"sources":["../src/global.ts","../src/types/helpers.types.ts","../node_modules/@keg-hub/jsutils/src/validation/validate.js","../node_modules/@keg-hub/jsutils/src/array/isArr.js","../node_modules/@keg-hub/jsutils/src/object/isObj.js","../node_modules/@keg-hub/jsutils/src/method/isFunc.js","../node_modules/@keg-hub/jsutils/src/string/isStr.js","../node_modules/@keg-hub/jsutils/src/number/equalsNaN.js","../node_modules/@keg-hub/jsutils/src/number/isNum.js","../node_modules/@keg-hub/jsutils/src/ext/typeOf.js","../node_modules/@keg-hub/jsutils/src/ext/isEmpty.js","../node_modules/@keg-hub/jsutils/src/ext/isSame.js","../node_modules/@keg-hub/jsutils/src/ext/isValidDate.js","../node_modules/@keg-hub/jsutils/src/boolean/isBool.js","../node_modules/@keg-hub/jsutils/src/string/toStr.js","../node_modules/@keg-hub/jsutils/src/boolean/isStrBool.js","../node_modules/@keg-hub/jsutils/src/boolean/convertToStrBool.js","../node_modules/@keg-hub/jsutils/src/boolean/toBool.js","../node_modules/@keg-hub/jsutils/src/collection/isColl.js","../node_modules/@keg-hub/jsutils/src/collection/isEmptyColl.js","../node_modules/@keg-hub/jsutils/src/collection/deepEqual.js","../node_modules/@keg-hub/jsutils/src/ext/exists.js","../node_modules/@keg-hub/jsutils/src/number/isNegative.js","../node_modules/@keg-hub/jsutils/src/number/isPositive.js","../node_modules/@keg-hub/jsutils/src/number/isFloat.js","../node_modules/@keg-hub/jsutils/src/number/isInt.js","../node_modules/@keg-hub/jsutils/src/object/hasOwn.js","../node_modules/@keg-hub/jsutils/src/object/isEntry.js","../node_modules/@keg-hub/jsutils/src/object/isArrMap.js","../node_modules/@keg-hub/jsutils/src/object/jsonEqual.js","../node_modules/@keg-hub/jsutils/src/string/isLowerCase.js","../node_modules/@keg-hub/jsutils/src/string/isUpperCase.js","../node_modules/@keg-hub/jsutils/src/string/isEmail.js","../node_modules/@keg-hub/jsutils/src/string/isIp.js","../node_modules/@keg-hub/jsutils/src/string/isPhone.js","../node_modules/@keg-hub/jsutils/src/string/isUrl.js","../node_modules/@keg-hub/jsutils/src/string/isUuid.js","../node_modules/@keg-hub/jsutils/src/string/isQuoted.js","../node_modules/@keg-hub/jsutils/src/url/isValidUrl.js","../node_modules/@keg-hub/jsutils/src/method/isOrderable.js","../node_modules/@keg-hub/jsutils/src/method/identity.js","../node_modules/@keg-hub/jsutils/src/method/match.js","../node_modules/@keg-hub/jsutils/src/dom/hasDomAccess.js","../node_modules/@keg-hub/jsutils/src/regex/isRegex.js","../node_modules/@keg-hub/jsutils/src/method/not.js","../node_modules/@keg-hub/jsutils/src/object/deepFreeze.js","../node_modules/@keg-hub/jsutils/src/ext/noOps.js","../node_modules/@keg-hub/jsutils/src/number/isNonNegative.js","../node_modules/@keg-hub/jsutils/src/array/areFrequencyEqual.js","../node_modules/@keg-hub/jsutils/src/array/areSetEqual.js","../node_modules/@keg-hub/jsutils/src/array/cloneArr.js","../node_modules/@keg-hub/jsutils/src/array/eitherArr.js","../node_modules/@keg-hub/jsutils/src/array/flatArr.js","../node_modules/@keg-hub/jsutils/src/array/flatMap.js","../node_modules/@keg-hub/jsutils/src/array/findExtrema.js","../node_modules/@keg-hub/jsutils/src/array/findMax.js","../node_modules/@keg-hub/jsutils/src/array/findMin.js","../node_modules/@keg-hub/jsutils/src/array/omitRange.js","../node_modules/@keg-hub/jsutils/src/array/randomArr.js","../node_modules/@keg-hub/jsutils/src/array/randomizeArr.js","../node_modules/@keg-hub/jsutils/src/array/uniqArr.js","../node_modules/@keg-hub/jsutils/src/array/flatUnion.js","../node_modules/@keg-hub/jsutils/src/array/intersect.js","../node_modules/@keg-hub/jsutils/src/array/ensureArr.js","../node_modules/@keg-hub/jsutils/src/collection/get.js","../node_modules/@keg-hub/jsutils/src/method/checkCall.js","../node_modules/@keg-hub/jsutils/src/method/complement.js","../node_modules/@keg-hub/jsutils/src/method/eitherFunc.js","../node_modules/@keg-hub/jsutils/src/method/debounce.js","../node_modules/@keg-hub/jsutils/src/method/doIt.js","../node_modules/@keg-hub/jsutils/src/method/memorize.js","../node_modules/@keg-hub/jsutils/src/method/runSeq.js","../node_modules/@keg-hub/jsutils/src/method/timedRun.js","../node_modules/@keg-hub/jsutils/src/method/throttle.js","../node_modules/@keg-hub/jsutils/src/method/throttleLast.js","../node_modules/@keg-hub/jsutils/src/method/limbo.js","../node_modules/@keg-hub/jsutils/src/method/uuid.js","../node_modules/@keg-hub/jsutils/src/method/noOp.js","../node_modules/@keg-hub/jsutils/src/method/parseErrorMessage.js","../node_modules/@keg-hub/jsutils/src/method/stackTracePaths.js","../node_modules/@keg-hub/jsutils/src/object/reduceObj.js","../node_modules/@keg-hub/jsutils/src/object/cloneJson.js","../node_modules/@keg-hub/jsutils/src/object/clearObj.js","../node_modules/@keg-hub/jsutils/src/object/eitherObj.js","../node_modules/@keg-hub/jsutils/src/object/deepMerge.js","../node_modules/@keg-hub/jsutils/src/object/applyToCloneOf.js","../node_modules/@keg-hub/jsutils/src/object/mapEntries.js","../node_modules/@keg-hub/jsutils/src/object/mapKeys.js","../node_modules/@keg-hub/jsutils/src/object/mapObj.js","../node_modules/@keg-hub/jsutils/src/object/omitKeys.js","../node_modules/@keg-hub/jsutils/src/object/pickKeys.js","../node_modules/@keg-hub/jsutils/src/object/sanitizeCopy.js","../node_modules/@keg-hub/jsutils/src/object/trimStringFields.js","../node_modules/@keg-hub/jsutils/src/object/toObj.js","../node_modules/@keg-hub/jsutils/src/object/keyMap.js","../node_modules/@keg-hub/jsutils/src/object/everyEntry.js","../node_modules/@keg-hub/jsutils/src/object/someEntry.js","../node_modules/@keg-hub/jsutils/src/object/filterObj.js","../node_modules/@keg-hub/jsutils/src/object/hashObj.js","../node_modules/@keg-hub/jsutils/src/object/splitByKeys.js","../node_modules/@keg-hub/jsutils/src/object/transformKeys.js","../node_modules/@keg-hub/jsutils/src/promise/promisify.js","../node_modules/@keg-hub/jsutils/src/promise/promisifyAll.js","../node_modules/@keg-hub/jsutils/src/promise/wait.js","../node_modules/@keg-hub/jsutils/src/regex/getRegexSource.js","../node_modules/@keg-hub/jsutils/src/regex/joinRegex.js","../node_modules/@keg-hub/jsutils/src/string/buildPath.js","../node_modules/@keg-hub/jsutils/src/string/mapString.js","../node_modules/@keg-hub/jsutils/src/string/delimitString.js","../node_modules/@keg-hub/jsutils/src/string/snakeCase.js","../node_modules/@keg-hub/jsutils/src/string/capitalize.js","../node_modules/@keg-hub/jsutils/src/string/removeDot.js","../node_modules/@keg-hub/jsutils/src/string/cleanStr.js","../node_modules/@keg-hub/jsutils/src/string/camelCase.js","../node_modules/@keg-hub/jsutils/src/string/camelCasePath.js","../node_modules/@keg-hub/jsutils/src/string/containsStr.js","../node_modules/@keg-hub/jsutils/src/string/eitherStr.js","../node_modules/@keg-hub/jsutils/src/string/hyphenator.js","../node_modules/@keg-hub/jsutils/src/string/hashString.js","../node_modules/@keg-hub/jsutils/src/string/parseJSON.js","../node_modules/@keg-hub/jsutils/src/string/plural.js","../node_modules/@keg-hub/jsutils/src/string/singular.js","../node_modules/@keg-hub/jsutils/src/string/styleCase.js","../node_modules/@keg-hub/jsutils/src/string/trainCase.js","../node_modules/@keg-hub/jsutils/src/string/wordCaps.js","../node_modules/@keg-hub/jsutils/src/string/spaceJoin.js","../node_modules/@keg-hub/jsutils/src/string/template.js","../node_modules/@keg-hub/jsutils/src/string/validFilename.js","../node_modules/@keg-hub/jsutils/src/string/reverseStr.js","../node_modules/@keg-hub/jsutils/src/string/getWordStartingAt.js","../node_modules/@keg-hub/jsutils/src/string/getWordEndingAt.js","../src/constants.ts","../src/utils/helpers.ts","../src/matcher/patterns.ts","../src/utils/errors.ts","../src/matcher/paramTypes.ts","../src/matcher/regex.ts","../src/matcher/tokens.ts","../src/utils/globalScope.ts","../src/matcher/expression.ts","../src/matcher/matcher.ts","../src/utils/worldReplace.ts","../src/definitions/joinAllDefs.ts","../src/definitions/registerFromCall.ts","../src/definitions/tempRegister.ts","../src/definitions/registerFromParse.ts","../src/steps.ts","../src/hooks.ts","../src/utils/hasTag.ts","../src/parse/idFromIdx.ts","../src/parse/parseStep.ts","../src/parse/checkTags.ts","../src/parse/setActiveParent.ts","../src/parse/ensureRule.ts","../src/parse/parseError.ts","../src/parse/ensureFeature.ts","../src/parse/ensureScenario.ts","../src/parse/ensureBackground.ts","../src/parse/ensureMeta.ts","../src/parse/parseFeature.ts","../src/parse/parseDefinition.ts","../src/utils/filterFeatures.ts","../src/utils/testMethods.ts","../src/runner.ts","../src/assemble/helpers.ts","../src/assemble/assembleParts.ts","../src/assemble/fromIndex.ts","../src/assemble/formatters.ts","../src/assemble/findIndex.ts","../src/assemble/addToIndexes.ts","../src/assemble/featureToIndexes.ts","../src/assemble/feature.ts","../src/assemble/assemble.ts","../src/utils/findInFeature.ts","../src/parkin.ts"],"sourcesContent":["import { Parkin, PKInstance } from './parkin'\nimport { resolveGlobalObj } from './utils/globalScope'\n\n/**\n * Creates a new instance of the Parkin class, and adds it's methods to the global scope\n * This allows accessing the methods directly\n */\nconst setGlobals = (force?:boolean) => {\n  const globalObj = resolveGlobalObj()\n  const forceGlobal = force || process.env.PARKIN_TEST_GLOBALS_OVERRIDE\n\n  if (!globalObj.Parkin || forceGlobal) globalObj.Parkin = Parkin\n  if (!globalObj.PK || forceGlobal) globalObj.PK = PKInstance\n}\n\n/**\n * Call the method immediately on import\n */\nsetGlobals()\n\n/**\n * Allow force overwriting the global methods from code\n *\n */\nexport const setParkinGlobals = (force:boolean = true) => setGlobals(force)\n","export enum EHookType {\n  beforeAll=`beforeAll`,\n  afterAll=`afterAll`,\n  beforeEach=`beforeEach`,\n  afterEach=`afterEach`\n}\n\nexport enum EStepType {\n  step=`step`,\n  given=`given`,\n  when=`when`,\n  then=`then`,\n  and=`and`,\n  but=`but`,\n  \"*\"=`*`,\n}\n\nexport enum EStepMethodType {\n  Given=`Given`,\n  When=`When`,\n  Then=`Then`,\n  And=`And`,\n  But=`But`,\n  \"*\"=`*`,\n}\n\nexport enum EAstObject {\n  error=`error`,\n  tags=`tags`,\n  rule=`rule`,\n  rules=`rules`,\n  step=`step`,\n  steps=`steps`,\n  block=`block`,\n  blocks=`blocks`,\n  empty=`empty`,\n  reason=`reason`,\n  desire=`desire`,\n  comment=`comment`,\n  comments=`comments`,\n  feature=`feature`,\n  scenario=`scenario`,\n  scenarios=`scenarios`,\n  background=`background`,\n  perspective=`perspective`,\n\n  given=`given`,\n  when=`when`,\n  then=`then`,\n  and=`and`,\n  but=`but`,\n  \"*\"=`*`,\n  \n  expression=`expression`,\n  expressions=`expressions`,\n}\n\nexport enum EFeatureTypes {\n  feature = `Feature`,\n  Feature = `Feature`,\n  FEATURE = `Feature`,\n  rule = `Rule`,\n  Rule = `Rule`,\n  background = `Background`,\n  Background = `Background`,\n  BACKGROUND = `Background`,\n  scenario = `Scenario`,\n  Scenario = `Scenario`,\n  SCENARIO = `Scenario`,\n  example = `Example`,\n  Example = `Example`,\n  EXAMPLE = `Example`,\n  step = `Step`,\n  Step = `Step`,\n  RULE = `Rule`,\n  STEP = `Step`\n}\n\nexport type TAnyFunc = (...args:any[]) => any\n","/** @module Validation */\n\n/**\n * @type {Object}\n */\nconst OPTIONS = {\n  SHOULD_LOG: true,\n  SHOULD_THROW: false,\n  LOG_PREFIX: null,\n}\n\n// if no default or custom validator set for an arg, just assert it is valid\nconst defaultValidator = () => true\n\n/**\n *  Validates each key-value entry in argObj using the validator functions in validators with matching keys.\n *  <br/>For any failures, validate will console.error the reason.\n *  @param {Object} argObj - object, where keys are the name of the argument to validate, and value is its value\n *  @param {Object} validators - object, where keys match the argument and values are predicate functions (return true/false and are passed the arg with the same key).\n *     - Use the `$default` key to define a default validator, which will validate any argument that doesn't have a custom validator defined.\n *  @param {Object} options - contains `logs`, `throws`, and `prefix` props. When a validation fails, it will throw an error if `throws` is true. Else it logs error if `logs` is true. `prefix` prepends a string to the error messages.\n *  @returns {Array} - An entry with two values [ success, results ].<br/>\n *     - success: { Boolean } that is true if all arguments passed their validators, false otherwise<br/>\n *     - results: {Object} that holds the validation results for each argument, keyed by the same keys as in argObj. For each\n *                result object, the properties are: { success, key, value, validator, reason }.\n *  @function\n *  @example\n *    const elements = {}\n *    const name = 'michael'\n *    const address = '12345 E. Street'\n *    const [ isValid, results ] = validate(\n *      { elements, name, address },\n *      { elements: isArr, $default: isStr }\n *    )\n *    console.log(isValid) // false\n *    console.log(results.elements.success) // false\n */\nexport const validate = (argObj, validators = {}, options = {}) => {\n  const {\n    logs = OPTIONS.SHOULD_LOG,\n    throws = OPTIONS.SHOULD_THROW,\n    prefix = OPTIONS.LOG_PREFIX,\n  } = options\n\n  const validationCaseEntries = Object.entries(argObj)\n\n  // validate each argument\n  const validationResults = validationCaseEntries.map(([ argName, argValue ]) =>\n    validateArgument(\n      argName,\n      argValue,\n      validators[argName] || validators.$default || defaultValidator\n    )\n  )\n\n  // reduce the argument validation results into a single object of form { success, cases }.\n  // success is true if all arguments passed their validators. Cases holds each argument's validation results.\n  const reduceCases = (total, next) =>\n    validationReducer(total, next, { logs, throws, prefix })\n  const { success, cases } = validationResults.reduce(reduceCases, {\n    success: true,\n    cases: {},\n  })\n\n  return [ success, cases ]\n}\n\n/**\n * If you need to configure validation properties globally, you can do so here. These are overridden by the validate options arguments,\n * if one is defined in validate().\n * @function\n * @param {Object} options\n * @param {Boolean} options.logs - indicates you want validate() to log errors when a case fails\n * @param {Boolean} options.throws - indicates validate() should throw an error when a case fails\n * @param {String} options.prefix - a prefix to any console error logs or to messages of errors thrown\n */\nvalidate.setOptions = ({ logs, throws, prefix }) => {\n  if (logs !== undefined) {\n    OPTIONS.SHOULD_LOG = logs\n  }\n  if (throws !== undefined) {\n    OPTIONS.SHOULD_THROW = throws\n  }\n  if (prefix !== undefined) {\n    OPTIONS.LOG_PREFIX = prefix\n  }\n}\n\n/**\n * Resets the global validation options to their defaults\n * @function\n */\nvalidate.resetOptions = () => {\n  OPTIONS.SHOULD_LOG = true\n  OPTIONS.SHOULD_THROW = false\n  OPTIONS.LOG_PREFIX = null\n}\n\n/**\n * Helper for `validate`. Validates a single value given a validator\n * @param {*} key\n * @param {*} value\n * @param {Function} validator\n * @returns {Object} of form { success, reason }\n * @ignore\n */\nconst validateArgument = (key, value, validator) => {\n  const success = validator(value)\n\n  // if validator is a named function, use its name. If it is an inline anonymous arrow function, its name\n  // matches the argument key and it has no useful/descriptive name, so just stringify it\n  const shouldStringifyValidator =\n    !validator.name || validator.name === key || validator.name === '$default'\n  const validatorString = shouldStringifyValidator\n    ? validator.toString()\n    : validator.name\n\n  const reason = success\n    ? null\n    : [\n        `Argument \"${key}\" with value `,\n        value,\n        ` failed validator: ${validatorString}.`,\n      ]\n\n  return { success, key, value, validator, reason }\n}\n\n/**\n * Helper for `validate`. Reduces validations into a single object of form { success, cases }\n * @param {*} finalResult\n * @param {*} nextValidation\n * @ignore\n */\nconst validationReducer = (\n  finalResult,\n  nextValidation,\n  { logs, throws, prefix }\n) => {\n  // handle the failure\n  !nextValidation.success && handleFailure(nextValidation, logs, throws, prefix)\n\n  return {\n    success: finalResult.success && nextValidation.success,\n    cases: {\n      ...finalResult.cases,\n      [nextValidation.key]: nextValidation,\n    },\n  }\n}\n\n/**\n * Handles a validation failure given validation options\n * @param {Object} validation\n * @param {Boolean} shouldLog\n * @param {Boolean} shouldThrow\n * @param {String} prefix - optional prefix to any error or console log\n * @ignore\n */\nconst handleFailure = (validation, shouldLog, shouldThrow, prefix) => {\n  // prepend the prefix if one is defined\n  const reason = prefix ? [ prefix, ...validation.reason ] : validation.reason\n\n  if (shouldThrow) throw new Error(reason.join())\n\n  if (shouldLog) console.error(...reason)\n}\n","/** @module Array */\n\n/**\n * Checks if passed in value is an array.\n * @function\n * @example\n * isArr([1,2,3])\n * // Returns true\n * @param {any} value - value to be check if is an array\n * @return {Boolean} - T/F value is an array\n */\nexport const isArr = value => Array.isArray(value)\n","/** @module Object */\n\n/**\n * Checks if data is an object and not an array.\n * @function\n * @param {Object} obj - data to check\n * @returns {Boolean}\n */\nexport const isObj = obj =>\n  typeof obj === 'object' && !Array.isArray(obj) && obj !== null\n","/** @module Function */\n\n/**\n * Check if the passed in item is a function.\n * @example\n * isFunc(() => {})\n * // Returns true\n * @example\n * isFunc('bar')\n * // Returns false\n * @function\n * @param {*} test\n * @return {Boolean} is a function\n */\nexport const isFunc = func => typeof func === 'function'\n","/** @module String */\n\n/**\n * Check if passed in value is a string.\n * @function\n * @param {*} str - param to check if type is a string\n * @return {Boolean} - True if it's a string\n */\nexport const isStr = str => typeof str === 'string'\n","/** @module Number */\n\n/**\n * Checks if a value is NaN.\n * @example\n * equalsNaN(NaN)\n * // Returns true\n * @example\n * equalsNaN(1)\n * // Returns false\n * @example\n * equalsNaN('')\n * // Returns false\n * @function\n * @param {Number} val - value to check if is NaN\n * @return {Boolean} T/F - if value is a number\n */\nexport const equalsNaN = val => typeof val === 'number' && val != val\n","/** @module Number */\n\nimport { equalsNaN } from './equalsNaN'\n\n/**\n * Checks is value is a number.\n * @example\n * isInt(1)\n * // Returns true\n * @example\n * isInt(NaN)\n * // Returns false\n * @example\n * isInt('1')\n * // Returns false ( because it's a string )\n * @function\n * @param {*} val - value to check if is a number\n * @return {Boolean} T/F - if value is a number\n */\nexport const isNum = val => typeof val === 'number' && !equalsNaN(val)\n","/** @module Extra */\n\n/**\n * Gets the type of the passed in val.\n * @example\n * typeOf(1)\n * // Returns Number\n * @example\n * typeOf('')\n * // Returns String\n * @function\n * @param {*} val - value to get type for\n * @return {String} type of the value\n */\nexport const typeOf = val => Object.prototype.toString.call(val).slice(8, -1)\n","/** @module Extra */\n\nimport { isObj } from '../object/isObj'\nimport { isArr } from '../array/isArr'\nimport { isStr } from '../string/isStr'\nimport { isNum } from '../number/isNum'\n\n/**\n * Checks if the value is empty.\n * @example\n * isEmpty('')\n * // Returns true\n * @example\n * isEmpty({})\n * // Returns true\n * @example\n * isEmpty([ 1 ])\n * // Returns false\n * @function\n * @param {*} val - value to check\n * @return {Boolean} if the value is empty\n */\nexport const isEmpty = val =>\n  isObj(val)\n    ? Object.keys(val).length === 0\n    : isArr(val)\n      ? val.length === 0\n      : isStr(val)\n        ? val.trim().length === 0\n        : isNum(val)\n          ? val < 1\n          : false\n","/** @module Extra */\n\n/**\n * Checks if the passed in values are exactly the same.\n * @example\n * isSame(1, 1)\n * // Returns true\n * @function\n * @param {*} val1 - value to compare\n * @param {*} val2 - value to compare\n * @return {Boolean} is the values are the same\n */\nexport const isSame = (val1, val2) =>\n  val1 === val2\n    ? val1 !== 0 || 1 / val1 === 1 / val2\n    : val1 !== val1 && val2 !== val2\n","/** @module Extra */\n\n/**\n * Checks is passed in date is a valid date.\n * @example\n * isValidDate(new Date())\n * // Returns true\n * @example\n * isValidDate(new Date().toString())\n * // Returns true\n * @example\n * isValidDate('12345678')\n * // Returns false\n * @function\n * @param { Date|String } date - value to check\n * @return {Boolean} T/F - if passed in date is a valid date\n */\nexport const isValidDate = date =>\n  !isNaN(((date instanceof Date && date) || new Date(date)).getTime())\n","/** @module Boolean */\n\n/**\n * Checks is value is a boolean.\n * @function\n * @example\n * isBool([1,2,3])\n * // Returns false\n * @example\n * isBool(true)\n * // Returns true\n * @param {*} val - value to check if is a number\n * @return {Boolean} True if val is a boolean\n */\nexport const isBool = val => typeof val === 'boolean'\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Converts a passed in value to a string.\n * @function\n * @param {*} val - value to be converted\n * @return {String} - value converted into a string\n */\nexport const toStr = val =>\n  val === null || val === undefined\n    ? ''\n    : isStr(val)\n      ? val\n      : JSON.stringify(val)\n","/** @module Boolean */\n\n/**\n * Checks is value is a boolean as a string.\n * @function\n * @example\n * isStrBool(\"true\")\n * // Returns true\n * @example\n * isStrBool(true)\n * // Returns false\n * @param {*} val - value to check if boolean as a string\n * @return {Boolean} True if val is a string boolean\n */\nexport const isStrBool = val => val === 'false' || val === 'true'\n","/** @module Boolean */\n\nimport { toStr } from '../string/toStr'\nimport { isBool } from './isBool'\n\n/**\n * Converts a value to a boolean as a string.\n * @function\n * @example\n * convertToStrBool(true)\n * // Returns 'true'\n * @param {*} val - value to convert to string boolean\n * @return {String} 'true' || 'false' based on passed in value\n */\nexport const convertToStrBool = val =>\n  isBool(val)\n    ? toStr(val)\n    : !val || val === 'false' || val === '0'\n        ? 'false'\n        : 'true'\n","/** @module Boolean */\n\nimport { isStrBool } from './isStrBool'\nimport { convertToStrBool } from './convertToStrBool'\n\n/**\n * Converts a value to a boolean.\n * @function\n * @example\n * toBool(null)\n * // Returns false\n * @example\n * toBool('false')\n * // Returns false\n * @example\n * toBool('true')\n * // Returns true\n * @param {*} val - value to convert\n * @return {Boolean} true or false based on passed in value.\n */\nexport const toBool = val =>\n  isStrBool(val) ? val === 'true' : convertToStrBool(val) === 'true'\n","/** @module Collection */\n\n/**\n * Checks if the value is a collection ( object || array ).\n * @example\n * isColl([1,2,3])\n * // Returns true\n * @example\n * isColl({ foo: 'bar' })\n * // Returns true\n * @example\n * isColl(null)\n * // Returns false\n * @function\n * @param {*} val - Value to check\n * @return {Boolean} True if the value is a collection (Object || Array)\n */\nexport const isColl = val => typeof val === 'object' && val !== null\n","/** @module Collection */\n\nimport { isColl } from './isColl'\nimport { isArr } from '../array/isArr'\n\n/**\n * Checks if passed in obj || array is empty.\n * @example\n * isEmptyColl({})\n * // Returns true\n * @example\n * isEmptyColl({ foo: 'bar' })\n * // Returns false\n * @example\n * isEmptyColl([])\n * // Returns true\n * @function\n * @param {*} obj - Object to check if empty\n * @return {Boolean} - True if the passed in collection is empty\n */\nexport const isEmptyColl = obj =>\n  isArr(obj)\n    ? obj.length === 0\n    : isColl(obj) && Object.getOwnPropertyNames(obj).length === 0\n","/** @module Collection */\n\n// Cache the prototype methods for faster access\nconst isArray = Array.isArray\nconst keyList = Object.keys\nconst hasProp = Object.prototype.hasOwnProperty\n\n/**\n * Recursively checks if two collections are equal\n * <br/>Faster the JSON.stringify checks\n * <br/>See https://jsperf.com/fast-deep-equal-vs-json-stringify\n * @example\n * const test = { foo: [ { bar: 'baz' } ] }\n * const test2 = { foo: [ { bar: 'baz' } ] }\n * console.log(test === test2)) // prints false\n * deepEqual(test, test2) // returns true\n * @example\n * // Works with arrays too\n * deepClone([ [ [ 0 ] ] ], [ [ [ 0 ] ] ]) // returns true\n * @function\n * @param {Object|Array} a - Object to check\n * @param {Object|Array} b - Object to check against\n */\nexport const deepEqual = (a, b) => {\n  if (a === b) return true\n\n  if (!a || !b || typeof a != 'object' || typeof b != 'object')\n    return a !== a && b !== b\n\n  const arrA = isArray(a)\n  const arrB = isArray(b)\n  let i\n  let length\n  let key\n\n  // If both are arrays\n  if (arrA && arrB) {\n    length = a.length\n    // If unequal length, then not equal\n    if (length != b.length) return false\n    // Loop the arrays and check the contents of both\n    for (i = length; i-- !== 0;) if (!deepEqual(a[i], b[i])) return false\n\n    return true\n  }\n\n  // If on is an array and the other is not, then return false\n  if (arrA != arrB) return false\n\n  // Validate date objects\n  const dateA = a instanceof Date\n  const dateB = b instanceof Date\n  if (dateA != dateB) return false\n  if (dateA && dateB) return a.getTime() == b.getTime()\n\n  // Validate RegExp objects\n  const regexpA = a instanceof RegExp\n  const regexpB = b instanceof RegExp\n  if (regexpA != regexpB) return false\n  if (regexpA && regexpB) return a.toString() == b.toString()\n\n  // Cache the keys and length for faster iteration\n  const keys = keyList(a)\n  length = keys.length\n\n  // If unequal key length then return false\n  if (length !== keyList(b).length) return false\n\n  // Ensure both objects have the same keys\n  for (i = length; i-- !== 0;) if (!hasProp.call(b, keys[i])) return false\n\n  // Check the value of the object keys\n  for (i = length; i-- !== 0;) {\n    key = keys[i]\n    if (!deepEqual(a[key], b[key])) return false\n  }\n\n  return true\n}\n","/** @module Extra */\n\n/**\n * Checks if a value exists. NOT undefined || null\n * @function\n * @example\n * exists(0)\n * // Returns true\n * @example\n * exists(null)\n * // Returns false\n * exists('')\n * // Returns true\n * exists(NaN)\n * // Returns false\n * @param {*} value - Item to check if exists\n *\n * @returns {Boolean} - If the item exists or not\n */\nexport const exists = value =>\n  value === value && value !== undefined && value !== null\n","/** @module Number */\n\nimport { isNum } from './isNum'\n\n/**\n * @function\n * @param {*} x\n * @returns { boolean } true if x is a negative number\n * @example isNegative(-1) // true\n * @example isNegative(0) // false\n */\nexport const isNegative = x => isNum(x) && x < 0\n","/** @module Number */\n\nimport { isNum } from './isNum'\n\n/**\n * @function\n * @param {*} x\n * @returns { boolean } true if x is a positive number\n * @example isPositive(0) // false\n * @example isPositive(1) // true\n */\nexport const isPositive = x => isNum(x) && x > 0\n","/** @module Number */\n\nimport { isNum } from './isNum'\n\n/**\n * Checks if a number is a Float.\n * @example\n * isFloat(1.23)\n * // Returns true\n * @example\n * isFloat('1.2')\n * // Returns false ( because it's a string )\n * @function\n * @param {Number} num - value to check\n * @return {Boolean} true or false - value is an Float\n */\nexport const isFloat = val => isNum(val) && val % 1 !== 0\n","/** @module Number */\n\nimport { isNum } from './isNum'\n\n/**\n * Checks if a number is an integer.\n * @example\n * isInt(1)\n * // Returns true\n * @example\n * isInt('1')\n * // Returns false ( because it's a string )\n * @function\n * @param {Number} num - value to check\n * @return {Boolean} true or false - value is an Int\n */\nexport const isInt = val => isNum(val) && val % 1 === 0\n","/** @module Object */\n\n/**\n * Checks if prop exists on the object.\n * @function\n * @param {Object} obj - data to check\n * @param {String} prop - prop to check for\n * @returns {Boolean} T/F if the prop exists\n */\nexport const hasOwn = (obj, prop) =>\n  Object.prototype.hasOwnProperty.call(obj, prop)\n","/** @module Object */\n\nimport { isStr } from '../string/isStr'\nimport { isNum } from '../number/isNum'\nimport { isArr } from '../array/isArr'\n\n/**\n * Checks if the input is a valid entry - a 2-element array, like what Object.entries produces.\n * Expects the first element in the entry to be either a string or a number.\n * @function\n * @example isEntry([1, 2]) // true\n * @example isEntry([\"id\", 87]) // true\n * @example isEntry([new Date(), 2]) // false, first element not string or number\n * @example isEntry([1, 2, 3]) // false, too many elements\n * @param {*} maybeEntry - Item to check if it's an entry\n *\n * @returns {Boolean} - True if it is an entry, false otherwise\n */\nexport const isEntry = maybeEntry =>\n  isArr(maybeEntry) &&\n  maybeEntry.length === 2 &&\n  (isNum(maybeEntry[0]) || isStr(maybeEntry[0]))\n","/** @module Object */\n\nimport { isObj } from './isObj'\nimport { isArr } from '../array/isArr'\nimport { toBool } from '../boolean/toBool'\n\n/**\n * Returns true if the input is an object and every value is an array\n * @function\n * @param {Object|*} obj - data to check\n * @return {Boolean} - true if input is an array map\n */\nexport const isArrMap = obj => {\n  if (!isObj(obj)) return false\n  const values = Object.values(obj)\n  return toBool(values.length && values.every(isArr))\n}\n","/** @module Object */\n\n/**\n * Compares two objects by converting to JSON, and checking string equality.\n * @function\n * @param { object | array } one - object to compare with param two\n * @param { object | array } two - object to compare with param one\n * @return {Boolean} status of equality\n */\nexport const jsonEqual = (one, two) => {\n  try {\n    return JSON.stringify(one) === JSON.stringify(two)\n  }\n  catch (e) {\n    return false\n  }\n}\n","/** @module String */\n\n/**\n * Checks if a string is all lowercase letters\n * @function\n * @param {String} str - String to check if it's lowercase\n * @returns {Boolean} - True if str is lowercase\n */\nexport const isLowerCase = str => str === str.toLowerCase()\n","/** @module String */\n\n/**\n * Checks if a string is all capital letters\n * @function\n * @param {String} str - String to check if it's uppercase\n * @returns {Boolean} - True if str is uppercase\n */\nexport const isUpperCase = str => str === str.toUpperCase()\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Check if string is a email.\n * @function\n * @param {String} string to check\n * @return {Boolean} - if it's a email\n */\nexport const isEmail = str => {\n  if (!str || !isStr(str)) return false\n  const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/\n  return Boolean(regex.test(str))\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\nconst regex = {\n  ipv4: /^(?:(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])$/,\n  ipv6: /^((?=.*::)(?!.*::.+::)(::)?([\\dA-F]{1,4}:(:|\\b)|){5}|([\\dA-F]{1,4}:){6})((([\\dA-F]{1,4}((?!\\3)::|:\\b|$))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})$/i,\n}\n\n/**\n * Check if string is an Ip address, both Ip4 and Ip6\n * @function\n * @param {String} string to check\n * @return {Boolean} - if it's an Ip address\n */\nexport const isIp = str => {\n  if (!str || !isStr(str)) return false\n\n  const isIp4 = Boolean(regex.ipv4.test(str))\n  return isIp4 || Boolean(regex.ipv6.test(str))\n}\n\n/**\n * Check if string is an IP4 address\n * @function\n * @param {String} string to check\n * @return {Boolean} - if it's an IP4 address\n */\nexport const isIp4 = str => {\n  if (!str || !isStr(str)) return false\n\n  return Boolean(regex.ipv4.test(str))\n}\n\n/**\n * Check if string is an IP6 address\n * @function\n * @param {String} string to check\n * @return {Boolean} - if it's an IP6 address\n */\nexport const isIp6 = str => {\n  if (!str || !isStr(str)) return false\n\n  return Boolean(regex.ipv6.test(str))\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Check if string is a phone number.\n * @function\n * @param {String} str - string to check\n * @return {Boolean} - True if str is a phone number\n */\nexport const isPhone = str => {\n  if (!str || !isStr(str)) return false\n  const regex = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/im\n  return Boolean(regex.test(str)) && str.replace(/\\D/g, '').length < 11\n}\n","/** @module String */\n\n/**\n * Check if string is a url.\n * @function\n * @param {String} string to check\n * @return {Boolean} - if it's a url\n */\nexport const isUrl = str => {\n  const regex =\n    /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/\n  return Boolean(regex.test(str))\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Check if string is a uuid.\n * @function\n * @param {String} str - string to check\n * @return {Boolean} - if it's a uuid\n */\nexport const isUuid = str => {\n  if (!str || !isStr(str)) return false\n  const regex =\n    /^[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n  return Boolean(regex.test(str))\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\nconst quoteSymbols = [ '\"', \"'\" ]\n\n/**\n * Checks if the string contains quoted text\n * @function\n * @param {String} str - string to check\n * @param {Array<string>?} [quotes] - optional array of valid quote strings to check with. Defaults to single and double quote characters.\n * @return {Boolean} true if `str` is a quoted string\n * @example\n * isQuoted('foo') // false\n * @example\n * isQuoted('\"foo\"') // true\n */\nexport const isQuoted = (str, quotes = quoteSymbols) => {\n  return (\n    isStr(str) &&\n    quotes.some(quote => str.startsWith(quote) && str.endsWith(quote))\n  )\n}\n","/** @module Url */\n\n/**\n * Checks if the given string is a valid URL\n * Must begin with ftp/http/https\n * @param {String} str - any string to check if it's a valid url\n * @function\n * @returns {Boolean}\n */\nexport const isValidUrl = str => {\n  var regexp =\n    /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/\n\n  return regexp.test(str)\n}\n","/** @module Function */\n\nimport { isStr } from '../string'\nimport { isBool } from '../boolean'\nimport { isNum } from '../number'\n\n/**\n * Checks if param is an orderable primitive\n * @function\n * @param {*} x\n * @returns {bool} - true if x is a comparable primitive\n */\nexport const isOrderable = x => isStr(x) || isNum(x) || isBool(x)\n","/** @module Function */\n\n/**\n * A function that simply returns its input\n * @function\n * @param {*} x\n * @returns {*} the input\n */\nexport const identity = x => x\n","/** @module Function */\n\nimport { isArr } from '../array/isArr'\nimport { typeOf } from '../ext/typeOf'\nimport { isFunc } from './isFunc'\n\n/**\n * Pattern matching function. Iterates through the entries,\n * <br/>which have the form [ check value or predicate, return value ], and\n * <br/>when it encounters an entry whose check value matches the matchArg\n * <br/>(or the predicate returns true when passed the matchArg), it returns\n * <br/>the return value of that entry.\n *\n * For the default case: use [ match.default, <your default value> ]\n * @function\n *\n * @param {*} matchArg - the argument to match against the cases\n * @param {Array} entries - the cases to match against the matchArg\n * @returns {*} - the return value of the first entry with a matching check value, else null\n *\n * @example\n * const value = 1\n * match(value,\n *  [ 1, \"hello\" ],\n *  [ x => x > 2, \"greater\" ]\n *  [ match.default, \"defaulted\"]\n * )\n * => returns \"hello\"\n *\n * @example\n * const value = 3\n * match(value,\n *  [ 1, \"hello\" ],\n *  [ x => x > 2, \"greater\" ]\n * )\n * => returns \"greater\"\n *\n * @example\n * // react reducer:\n *function todoReducer(state, action) {\n *   const reducer = match(action.type,\n *       [ 'ADD-TODO', addTodo ],\n *       [ 'REMOVE-TODO', removeTodo ],\n *       [ 'UPDATE-TODO', updateTodo ],\n *       [ match.default, state ]\n *   )\n *\n *   return reducer(state, action)\n *}\n */\nexport const match = (matchArg, ...args) => {\n  if (!args.length) return null\n\n  // check all cases and return a value if a match is found\n  for (let entry of args) {\n    if (!isArr(entry)) {\n      console.error(\n        `Matching case must be an entry (a 2-element array). Found: ${typeOf(\n          entry\n        )}`,\n        entry\n      )\n      break\n    }\n    const [ caseValueOrPredicate, valueOnMatch ] = entry\n    if (isFunc(caseValueOrPredicate) && caseValueOrPredicate(matchArg))\n      return valueOnMatch\n    if (caseValueOrPredicate === matchArg) return valueOnMatch\n  }\n\n  return null\n}\n\n/**\n * The default case function you can use with match. Just returns true so the case value can be used.\n * @function\n * @example\n * match(foo\n *    [ 100, 'a' ],\n *    [ 200, 'b' ],\n *    [ match.default, 'default value' ]\n * )\n */\nmatch.default = () => true\n","/** @module Dom */\n\n/**\n * Checks if there is access to the dom\n * @function\n * @example\n * // In Browser\n * hasDomAccess() === true\n * // In Node\n * hasDomAccess() === false\n * @return {Boolean} True if executed in a browser\n */\nexport const hasDomAccess = () => {\n  try {\n    return !!(\n      typeof window !== 'undefined' &&\n      window.document &&\n      window.document.createElement\n    )\n  }\n  catch (error) {\n    return false\n  }\n}\n\nexport { hasDomAccess as isDom }\n","/** @module RegEx */\n\n/**\n * Checks if value is an instance of regex\n * @function\n * @param {*} val\n * @return {Boolean} true if val is an instance of RegExp\n * @example\n * isRegex(new RegExp('a')) // true\n * isRegex(/a/) // true\n * isRegex('a') // false\n */\nexport const isRegex = val => Boolean(val && val instanceof RegExp)\n","/** @module Function */\n\nimport { isBool } from '../boolean/isBool'\nimport { isStrBool } from '../boolean/isStrBool'\n\nimport { isColl } from '../collection/isColl'\nimport { isEmptyColl } from '../collection/isEmptyColl'\nimport { deepEqual } from '../collection/deepEqual'\n\nimport { isDom } from '../dom/hasDomAccess'\n\nimport { exists } from '../ext/exists'\nimport { isEmpty } from '../ext/isEmpty'\nimport { isSame } from '../ext/isSame'\nimport { isValidDate } from '../ext/isValidDate'\n\nimport { isFunc } from './isFunc'\nimport { identity } from './identity'\nimport { isOrderable } from './isOrderable'\n\nimport { equalsNaN } from '../number/equalsNaN'\nimport { isFloat } from '../number/isFloat'\nimport { isInt } from '../number/isInt'\nimport { isNum } from '../number/isNum'\nimport { isNegative } from '../number/isNegative'\nimport { isPositive } from '../number/isPositive'\n\nimport { hasOwn } from '../object/hasOwn'\nimport { isEntry } from '../object/isEntry'\nimport { isArrMap } from '../object/isArrMap'\nimport { isObj } from '../object/isObj'\nimport { jsonEqual } from '../object/jsonEqual'\n\nimport { isRegex } from '../regex/isRegex'\n\nimport { isEmail } from '../string/isEmail'\nimport { isIp } from '../string/isIp'\nimport { isLowerCase } from '../string/isLowerCase'\nimport { isPhone } from '../string/isPhone'\nimport { isQuoted } from '../string/isQuoted'\nimport { isStr } from '../string/isStr'\nimport { isUpperCase } from '../string/isUpperCase'\nimport { isUrl } from '../string/isUrl'\nimport { isUuid } from '../string/isUuid'\n\nimport { isValidUrl } from '../url/isValidUrl'\n\n/**\n * When called, it calls original function, then returns inverse of the functions result\n * <br/>Should be used with functions that return a boolean\n * @function\n * @param {Function} func - Function call and invert its response\n *\n * @returns {Function} - Calls the passed in function then returns True if the passed in function returns falsy, otherwise false\n */\nexport const not = func => {\n  return (...args) => !func.apply(null, args)\n}\n\nnot.bool = not(isBool)\nnot.strBool = not(isStrBool)\nnot.coll = not(isColl)\nnot.deepEqual = not(deepEqual)\nnot.emptyColl = not(isEmptyColl)\nnot.dom = not(isDom)\nnot.exists = not(exists)\nnot.empty = not(isEmpty)\nnot.same = not(isSame)\nnot.validDate = not(isValidDate)\nnot.func = not(isFunc)\nnot.identity = not(identity)\nnot.orderable = not(isOrderable)\nnot.equalsNaN = not(equalsNaN)\nnot.float = not(isFloat)\nnot.int = not(isInt)\nnot.num = not(isNum)\nnot.negative = not(isNegative)\nnot.positive = not(isPositive)\nnot.hasOwn = not(hasOwn)\nnot.entry = not(isEntry)\nnot.arrMap = not(isArrMap)\nnot.obj = not(isObj)\nnot.jsonEqual = not(jsonEqual)\nnot.regex = not(isRegex)\nnot.email = not(isEmail)\nnot.ip = not(isIp)\nnot.lowerCase = not(isLowerCase)\nnot.phone = not(isPhone)\nnot.quoted = not(isQuoted)\nnot.str = not(isStr)\nnot.upperCase = not(isUpperCase)\nnot.url = not(isUrl)\nnot.uuid = not(isUuid)\nnot.validUrl = not(isValidUrl)\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\n\n/**\n * Recursively freezes and object.\n * @function\n * @param {Object} obj\n * @return {Object} - frozen Object\n */\nexport const deepFreeze = obj => {\n  Object.freeze(obj)\n  Object.getOwnPropertyNames(obj).map(prop => {\n    obj.hasOwnProperty(prop) &&\n      obj[prop] !== null &&\n      (typeof obj[prop] === 'object' || isFunc(obj[prop])) &&\n      !Object.isFrozen(obj[prop]) &&\n      deepFreeze(obj[prop])\n  })\n\n  return obj\n}\n","/** @module Extra */\n\nimport { deepFreeze } from '../object/deepFreeze'\n\n/**\n * Reuseable empty, frozen object\n * @object\n * @type {Object}\n */\nexport const noOpObj = Object.freeze({})\n\n/**\n * Reuseable empty, frozen object\n * @object\n * @type {Object}\n */\nexport const emptyObj = noOpObj\n\n/**\n * Reusable frozen object that contains a `content` object. Useful\n * @object\n * for themes that rely on the content key.\n * @type {Object}\n */\nexport const noPropObj = deepFreeze({ content: {} })\n\n/**\n * Reusable, empty frozen array\n * @array\n * @type {Array}\n */\nexport const noPropArr = deepFreeze([])\n\n/**\n * Reusable, empty frozen array.\n * Renamed for consistency\n * @array\n * @type {Array}\n */\nexport const noOpArr = noPropArr\n\n/**\n * Reusable, empty frozen array.\n * Renamed for legibility\n * @array\n * @type {Array}\n */\nexport const emptyArr = noPropArr\n","/** @module Number */\n\nimport { isNum } from './isNum'\n\n/**\n * Checks if val is a non-negative number\n * @param {*} val - To be checked it it's a non-negative number\n * @example\n *  isNonNegative(0) // true\n *  isNonNegative(1) // true\n *  isNonNegative(-1) // false\n * @function\n * @returns {Boolean} - True if val is non negative number\n */\nexport const isNonNegative = val => isNum(val) && val >= 0\n","/** @module Array */\n\nimport { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Builds a map of elements mapped to their frequency counts\n * @function\n * @param {Array<*>} arr\n * @return {Map<*, number>}\n */\nexport const buildElementCountMap = arr => {\n  const counts = new Map()\n  for (let i = 0; i < arr.length; i++) {\n    const element = arr[i]\n    const count = counts.get(element) ?? 0\n    counts.set(element, count + 1)\n  }\n  return counts\n}\n\n/**\n * Returns true if the maps\n * @function\n * @param {Map<*, number>} mapA\n * @param {Map<*, number>} mapB\n * @returns {Boolean} - True if the item count it equal between mapA and mapB\n */\nexport const areCountMapsEqual = (mapA, mapB) => {\n  if (mapA.size !== mapB.size) return false\n\n  for (let [ key, count ] of mapA) {\n    const otherCount = mapB.get(key)\n    if (otherCount !== count) return false\n  }\n\n  return true\n}\n\n/**\n * Checks if arrays are frequency equal. Does this\n * by making only one pass over each array and using an auxillary map.\n * @function\n * @param {Array<*>} arr\n * @param {Array<*>} otherArr\n * @returns {Boolean} - True if otherArr contains exactly the same elements as arr, where order does not matter, but frequency does\n */\nexport const areFrequencyEqual = (arr, otherArr) => {\n  const [valid] = validate({ arr, otherArr }, { $default: isArr })\n  if (!valid) return null\n\n  if (arr === otherArr) return true\n  if (arr.length !== otherArr.length) return false\n\n  const arrCounts = buildElementCountMap(arr)\n  const otherCounts = buildElementCountMap(otherArr)\n\n  return areCountMapsEqual(arrCounts, otherCounts)\n}\n","/** @module Array */\n\nimport { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Checks if arrays are set-equal: they contain the same elements,\n * but element frequencies don't matter.\n * Does this with one pass over each array and an auxilliary set.\n * @function\n * @param {Array<*>} arr\n * @param {Array<*>} otherArr\n */\nexport const areSetEqual = (arr, otherArr) => {\n  const [valid] = validate({ arr, otherArr }, { $default: isArr })\n  if (!valid) return null\n\n  if (arr === otherArr) return true\n\n  const [ longest, shortest ] =\n    arr.length > otherArr.length ? [ arr, otherArr ] : [ otherArr, arr ]\n\n  const arrSet = new Set(shortest)\n\n  for (let i = 0; i < longest.length; i++) {\n    const element = longest[i]\n    if (!arrSet.has(element)) return false\n  }\n\n  return true\n}\n","/** @module Array */\n\nimport { isArr } from './isArr'\nimport { isObj } from '../object/isObj'\n\n/**\n * Creates a copy of the passed in array.\n * <br/>Returns empty array, if param is not an array.\n * @function\n * @example\n * cloneArr([1,2,3])\n * // Returns copy of the passed on array\n * @param {Array} arr - array to be copied\n * @return {Array} - copy of passed in array\n */\nexport const cloneArr = arr =>\n  Array.from([\n    // If arr is not an array or object, just use empty array, so we don't throw!\n    ...((isArr(arr) && arr) || (isObj(arr) && Object.entries(arr)) || []),\n  ])\n","/** @module Array */\n\nimport { isArr } from './isArr'\n\n/**\n * Returns a if it is an Array, else returns b\n * @function\n * @param {*} a\n * @param {*} b\n * @returns {*} either a, if it's an array, or b\n *\n * @example\n * const foo = eitherArr('hi', 1) // returns 1\n * const bar = eitherArr([ 2 ], 1) // returns [ 2 ]\n */\nexport const eitherArr = (a, b) => (isArr(a) ? a : b)\n","/** @module Array */\n\nimport { isArr } from './isArr'\nimport { isObj } from '../object/isObj'\nimport { noOpObj } from '../ext/noOps'\nimport { exists } from '../ext/exists'\n\n/**\n * Helper method to flatten and mutate the passed in array based on options\n * @function\n * @private\n * @param {Array|*} arr - Array to be flattened\n * @param {Array} result - Flattened array values\n * @param {Array} opts - Options to modify how the array is flattened\n *\n * @return {Array} - Mutated arr or result, but flattened based on options\n */\nconst flatten = (arr, result, opts) => {\n  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i]\n\n    isArr(value)\n      ? flatten(value, result, opts)\n      : (opts.exists && !exists(value)) || (opts.truthy && !value)\n          ? result\n          : result.push(value)\n  }\n\n  if (!opts.mutate) return result\n\n  Object.assign(arr, result).splice(result.length)\n\n  return arr\n}\n\n/**\n * Flattens an array to a single level\n * @function\n * @param {Array|*} arr - Array to be flattened\n * @param {Object} [opts={}] - Options to modify how the array is flattened\n * @param {Boolean} [opts.truthy] - Only include truthy values when flattening\n * @param {Boolean} [opts.exists] - Only include values that exist when flattening\n * @param {Boolean} [opts.mutate] - Mutates the original array\n *\n * @example\n * const arr = flatArr([[ 'flat', '' ], [ 'array' ]]) // returns ['flat', '', 'array']\n * const arrTruthy = flatArr([ 0, 2, [ false ] ], { truthy: true }) // returns [ 2 ]\n * const arrExist = flatArr([ 0, 2, [ false ] ], { exists: true }) // returns [ 0, 2, false ]\n * const mutateArr = [ [1], [2] ]\n * flatArr(mutateArr, { mutate: true }) === mutateArr\n * // Evaluates to true, but mutateArr value is [ 1, 2 ]\n *\n * @return {Array} - Mutated original array now flattened, or a new flattened array based on options\n */\nexport const flatArr = (arr, opts) =>\n  flatten(arr, [], isObj(opts) ? opts : noOpObj)\n","/** @module Array */\n\nimport { isArr } from './isArr'\nimport { isFunc } from '../method/isFunc'\nimport { validate } from '../validation'\n\n/**\n * Maps each element using mapping function `mapFn`, but returns the result as a flattened array.\n * It is equivalent to map() followed by flattening to depth 1, but flatMap is a useful shortcut,\n * and merging both steps into one method (with one pass over the array) is slightly more efficient.\n * @function\n * @example\n * [1, 2].map(x => [x * 2]) // returns [[2], [4]]\n * flatMap([1, 2], x => [x * 2]) // returns [2, 4]\n * @param {Array} arr - array to map across\n * @param {Function} mapFn - function for mapping\n */\nexport const flatMap = (arr, mapFn) => {\n  const [inputIsValid] = validate({ arr, mapFn }, { arr: isArr, mapFn: isFunc })\n  if (!inputIsValid) return arr\n\n  // iterate across the array, calling mapFn on each element, then flattening into final array\n  return arr.reduce((finalArr, current) => {\n    const result = mapFn(current)\n    isArr(result) ? result.map(el => finalArr.push(el)) : finalArr.push(result)\n    return finalArr\n  }, [])\n}\n","/** @module Array */\n\nimport { isArr } from './isArr'\nimport { isFunc } from '../method'\nimport { validate } from '../validation'\n\n/**\n * Finds the extremum (e.g. max, min) element within array `arr` as defined by the `comparator` function\n * @function\n * @param {Array<*>} arr\n * @param {Function} comparator - comparison function like the compareFunction in sort: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n * @returns {*} the element in `arr` that is the extremum as defined by `comparator`. If arr is empty, this function returns null.\n * @example\n * const max = findExtrema([ { a: 1 }, { a: 2} ], (x, y) => x.a - y.a)\n * // max === { a: 2 }\n */\n// export const findExtrema = (arr, comparator) => {\n//   const [valid] = validate(\n//     { arr, comparator },\n//     { arr: isArr, $default: isFunc }\n//   )\n//   if (!valid) return null\n\n//   return arr.length\n//     ? arr.reduce((extremaSoFar, next) =>\n//       comparator(extremaSoFar, next) > 0 ? extremaSoFar : next\n//     )\n//     : null\n// }\n\nexport const findExtrema = (arr, comparator) => {\n  const [valid] = validate(\n    { arr, comparator },\n    { arr: isArr, $default: isFunc }\n  )\n  if (!valid) return null\n\n  return arr.length\n    ? arr.reduce((extremaSoFar, next) =>\n      comparator(extremaSoFar, next) > 0 ? extremaSoFar : next\n    )\n    : null\n}\n","/** @module Array */\n\nimport { identity, compareTo } from '../method'\nimport { findExtrema } from './findExtrema'\n\n/**\n * Returns the maximum element in arr\n * @function\n * @param {Array<Object>} arr\n * @param {Function?} propSelector - optional property selector for choosing the property to compare with\n * @example\n * const items = [ { num: 1 }, { num: 3 } ]\n * findMax(items, item => item.num) // returns { num: 3 }\n */\nexport const findMax = (arr = [], propSelector = identity) =>\n  findExtrema(arr, (x, y) => compareTo(propSelector(x), propSelector(y)))\n","/** @module Array */\n\nimport { identity, compareTo } from '../method'\nimport { findExtrema } from './findExtrema'\n\n/**\n * Returns the minimum element in arr\n * @function\n * @param {Array<Object>} arr\n * @param {Function?} propSelector - optional property selector for choosing the property to compare with\n * @example\n * const items = [ { num: 1 }, { num: 3 } ]\n * findMax(items, item => item.num) // returns { num: 1 }\n */\nexport const findMin = (arr = [], propSelector = identity) =>\n  findExtrema(arr, (x, y) => compareTo(propSelector(y), propSelector(x)))\n","/** @module Array */\n\nimport { isNonNegative } from '../number/isNonNegative'\nimport { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Returns a new array with the same elements as arr, excluding `count` elements beginning at index `startIndex`\n * @function\n * @param {Array} arr\n * @param {Number} startIndex\n * @param {Number} count\n */\nexport const omitRange = (arr, startIndex, count) => {\n  const [inputIsValid] = validate(\n    { arr, startIndex, count },\n    { arr: isArr, $default: isNonNegative }\n  )\n\n  if (!inputIsValid) return arr\n\n  const nextArr = [...arr]\n\n  nextArr.splice(startIndex, count)\n\n  return nextArr\n}\n","/** @module Array */\n\nimport { isArr } from './isArr'\n\n/**\n * Randomly selects values from a passed in array.\n * @function\n * @example\n * randomArr([1,2,3], 1)\n * // Returns an array with one of the values in the passed in array\n * @param {Array} arr - array to select values from\n * @param {Number} [amount] - number of values to select from the array\n * @return {Array} - randomly sorted array\n */\nexport const randomArr = (arr, amount) => {\n  if (!isArr(arr)) return arr\n\n  const useAmount = amount || 1\n  const randoms = []\n  for (let i = 0; i < useAmount; i++) {\n    randoms.push(arr[Math.floor(Math.random() * arr.length)])\n  }\n\n  return !amount ? randoms[0] : randoms\n}\n","/** @module Array */\n\nimport { isArr } from './isArr'\n\n/**\n * Randomly sorts an arrays items.\n * @function\n * @example\n * randomizeArr([1,2,3])\n * // Returns an array randomly sorted\n * @param {Array} arr - array to randomly sorted\n * @return {Array} - randomly sorted array\n */\nexport const randomizeArr = arr =>\n  (!isArr(arr) && arr) || arr.sort(() => 0.5 - Math.random())\n","/** @module Array */\n\nimport { isArr } from './isArr'\n\n/**\n * Removes duplicates from an array, checking by reference-equality\n * @function\n * @example\n * uniqArr([1,1,2,3,3])\n * // Returns array with only unique values [ 1, 2, 3 ]\n * @param {array} arr - array to remove duplicates from\n * @return {array} copy of passed in array, with duplicates removed\n */\nexport const uniqArrByReference = arr => {\n  return !isArr(arr) ? arr : arr.filter((e, i, arr) => arr.indexOf(e) == i)\n}\n\n/**\n *\n * @param {*} arr\n * @param {*} selector\n */\n/**\n * Removes duplicates from an array.\n * @function\n * @example\n * uniqArr([1,1,2,3,3])\n * // Returns array with only unique values [ 1, 2, 3 ]\n * @example\n * uniqArr([ {a: 1} , { a: 1 }], element => element.a)\n * // Returns array [ { a: 1 } ]\n * @param {array} arr - array to remove duplicates from\n * @param {Function} [selector] - optional function to specify the property uniqArr should use to check if another element exists\n * @return {array} copy of passed in array, with duplicates removed\n */\nexport const uniqArr = (arr, selector) => {\n  if (!selector) return uniqArrByReference(arr)\n\n  // loop over each element in one pass,\n  // only including in the unique array elements\n  // we haven't encountered before\n  // by checking with `selector` and the set\n  const { unique } = arr.reduce(\n    (data, element, index) => {\n      const id = selector(element, index)\n      !data.set.has(id) && data.unique.push(element)\n      data.set.add(id)\n      return data\n    },\n    {\n      unique: [],\n      set: new Set(),\n    }\n  )\n\n  return unique\n}\n","/** @module Array */\n\nimport { isArr } from './isArr'\nimport { uniqArr } from './uniqArr'\nimport { flatArr } from './flatArr'\nimport { isFunc } from '../method/isFunc'\n\n/**\n * Flattens the passed in array arguments and removes duplicates\n * Also removes non-existing values such as undefined and null\n * If the last argument is a function, it will be used as the comparison when checking for duplicates\n * @function\n * @example\n * flatUnion([1,1,2], [1,2,3])\n * // Returns array with only unique values [ 1, 2, 3 ]\n * @example\n *  flatUnion([{a: 1}, { a: 3 }], [{a: 4}, { a: 1 }], item => item.a)\n * // Returns array with only unique values [ { a: 1 }, { a: 3 }, { a: 4 } ]\n * @param {Array} arr - array to remove duplicates from\n * @param {Function?} selector - optional function to specify the property to check if another element exists\n *\n * @return {Array} - Flattened copy of passed in array arguments, with duplicates removed\n */\nexport const flatUnion = (...args) => {\n  const last = args.pop()\n  const opts = { exists: true }\n  const compare = isFunc(last) ? last : args.push(last) && undefined\n\n  return args.reduce((merged, arr) => {\n    if (!isArr(arr)) return merged\n\n    return uniqArr(flatArr([ ...merged, ...arr ], opts), compare)\n  }, [])\n}\n","/** @module Array */\n\nimport { isArr } from './isArr'\n\n/**\n * Creates and returns a new array of all items that exist in both passed in arrays\n * @param {Array<any>} arrA - array to compare with arrB\n * @param {Array<any>} arrB - array to compare with arrA\n *\n * @example\n *  intersect([1], [1]) === [1]\n *\n * @returns {Array<any>} - Array of matching items\n */\nexport const intersect = (arrA, arrB) => {\n  if(!isArr(arrA) || !isArr(arrB)) return []\n  \n  const setB = new Set(arrB)\n  return [...new Set(arrA)].filter((x) => setB.has(x))\n}\n","/** @module Array */\n\nimport { isArr } from './isArr'\n\n/**\n * Ensures the passed in value is an array, else it returns it in an array\n * @function\n * @param {Array|*} val - Value to check if its an array\n *\n * @example\n * const foo = eitherArr('hi') // returns ['hi']\n * const bar = eitherArr([ 2 ]) // returns [ 2 ]\n *\n * @returns {Array} val if it's an array, or val in an array\n */\nexport const ensureArr = val => (isArr(val) ? val : [val])\n","/** @module Collection */\n\nimport { exists } from '../ext/exists'\nimport { isArr } from '../array/isArr'\nimport { isStr } from '../string/isStr'\n\n/**\n * Searches an object based on the path param\n * <br/>I.E. path = 'data.foo.bar' => will return obj.data.foo.bar.\n * <br/>If bar does not exist, then will return obj.data.foo\n * @example\n * get(obj, 'data.foo.bar')\n * // Returns the value of bar\n * @example\n * get(obj, ['data', 'foo', 'bar'])\n * // Returns the value of bar\n * @function\n * @param {Object} obj - Will search the object based on the path\n * @param {String|Array<string>} path - Dot notation string or Array of string keys of the object\n * @param {*} [fallback] - Separated string to search the object\n * @return {*} - The final value found from the path\n */\nexport const get = (obj, path, fallback) => {\n  const isPathArr = isArr(path)\n  if (!isStr(path) && !isPathArr) return exists(fallback) ? fallback : undefined\n\n  const parts = isPathArr ? path : path.split('.')\n\n  const result = parts.reduce((obj, prop) => {\n    const type = typeof obj\n    if (!exists(obj) || (type !== 'object' && type !== 'function'))\n      return undefined\n\n    prop = prop.startsWith('[') ? prop.replace(/\\D/g, '') : prop\n    return obj[prop]\n  }, obj)\n\n  return exists(result) ? result : fallback\n}\n","/** @module Function */\n\nimport { isFunc } from './isFunc'\n\n/**\n * Check if the passed in method is a function, and calls it\n * @example\n * checkCall((param1) => { return param1 }, 'foo')\n * // Returns 'foo'\n * @function\n * @param {Function} method - function to call\n * @param {Object} params - params to pass to the method on call\n * @return {*} - whatever the passed in method returns\n */\nexport const checkCall = (method, ...params) => {\n  return isFunc(method) ? method(...params) : undefined\n}\n\nexport {\n  checkCall as ife,\n  checkCall as iife,\n}","/** @module Function */\n\nimport { validate } from '../validation'\nimport { isFunc } from '../method/isFunc'\n\n/**\n * Returns a new function that is the complement of predicate function `predicate`\n * @function\n * @param {Function} predicate\n * @returns {Function?} the complement of `predicate`, if it's a function, otherwise null\n * @example\n * const isNegative = x => (x < 0)\n * const isNonNegative = complement(isNegative)\n * isNonNegative(1) // true\n */\nexport const complement = predicate => {\n  const [valid] = validate({ predicate }, { predicate: isFunc })\n  return valid ? (...args) => !predicate(...args) : null\n}\n","/** @module Function */\n\nimport { isFunc } from './isFunc'\n\n/**\n * Returns the first param if it's a function.\n * <br/>If first param is not a function, returns second param.\n * @example\n * eitherFunc(() => {}, 'bar')\n * // Returns first param because it's a function.\n * @example\n * eitherFunc('foo', 'bar')\n * // Returns 'bar'\n * @function\n * @param {Function} func1 - return if is func\n * @param {Function} func2 - use if first is not an object\n * @returns {Function}\n */\nexport const eitherFunc = (func1, func2) => (isFunc(func1) && func1) || func2\n","/** @module Function */\n\nimport { isFunc } from './isFunc'\n\n/**\n * Limits the amount of calls to a function over time\n * @example\n * debounce(myFunction)\n * // Calls myFunction after the default 250 ms\n * @example\n * debounce(myFunction, 500)\n * // Calls myFunction after 500 ms\n * @example\n * debounce(myFunction, 500, true)\n * // Calls myFunction immediately\n * @function\n * @param {Function} func - function to call\n * @param {Number} wait - how long to wait between function calls\n * @param {Boolean} immediate - should call immediately\n * @return { void }\n */\nexport const debounce = (func, wait = 250, immediate = false) => {\n  let timeout\n  function wrapFunc(...args) {\n    if (!isFunc(func)) return null\n\n    const context = this\n    const later = () => {\n      timeout = null\n      !immediate && func.apply(context, args)\n    }\n    const callNow = immediate && !timeout\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    if (callNow) return isFunc(func) && func.apply(context, args)\n  }\n  return wrapFunc\n}\n","/** @module Function */\n\nimport { isNum } from '../number/isNum'\nimport { isFunc } from './isFunc'\n\n/**\n * Execute a method n times.\n * <br/>Callback params - does not include number || callback method\n * @function\n * @example\n * doIt(10, window, [], (index, arr) => { arr.push(index) }) === [ 0,1,2 ... 8,9 ]\n * @param {Number} args.0 - number of times to call the callback\n * @param {parent} args.1 - value to bind the method call to ( this )\n * @param {Function} last arg of args array - method to call\n * @return { void }\n */\nexport const doIt = (...args) => {\n  const params = args.slice()\n  const num = params.shift()\n  const bindTo = params.shift()\n  const cb = params.pop()\n  if (!isNum(num) || !isFunc(cb)) return []\n\n  const doItAmount = new Array(num)\n  const responses = []\n  for (let i = 0; i < doItAmount.length; i++) {\n    const data = cb.call(bindTo, i, ...params)\n    if (data === false) break\n    responses.push(data)\n  }\n\n  return responses\n}\n","/** @module Function */\n\nimport { isNum } from '../number/isNum'\nimport { hasOwn } from '../object/hasOwn'\nimport { isFunc } from './isFunc'\n\n/**\n * Creates a method to memorize passed in methods output\n * @example\n * memorize(myFunction, cacheKeyFunction)\n * @example\n * memorize(myFunction, cacheKeyFunction, 100)\n * @function\n * @param {Function} func - method to memorize output of\n * @param {Function} getCacheKey - gets the key to save cached output\n *\n * @return {Function} memorized function with cache\n */\nexport const memorize = (func, getCacheKey, limit = 1) => {\n  if (!isFunc(func) || (getCacheKey && !isFunc(getCacheKey)))\n    return console.error('Error: Expected a function', func, getCacheKey)\n\n  let memorized = function () {\n    const cache = memorized.cache\n    const key = getCacheKey ? getCacheKey.apply(this, arguments) : arguments[0]\n\n    if (hasOwn(cache, key)) return cache[key]\n\n    const result = func.apply(this, arguments)\n\n    isNum(limit) && Object.keys(cache).length < limit\n      ? (cache[key] = result)\n      : (memorized.cache = { [key]: result })\n\n    return result\n  }\n\n  memorized.cache = {}\n  memorized.destroy = () => {\n    getCacheKey = undefined\n    memorized.cache = undefined\n    memorized.destroy = undefined\n    memorized = undefined\n  }\n\n  return memorized\n}\n","/** @module Function */\n\nimport { validate } from '../validation/validate'\nimport { isArr } from '../array/isArr'\nimport { isFunc } from './isFunc'\n\nimport { deepClone } from '../collection/deepClone'\n\n/**\n * Calls each promise-returning function in array `asyncFns`,\n * but awaits each before calling the next. Will pass the\n * index and resolved values of complete functions to each subsequent\n * function, in case any need them.\n * @function\n * @param {Array<Function>} asyncFns - array of functions to call in sequence.\n * Each will be passed (currentIndex, resultsSoFar)\n * @param {boolean?} [options.cloneResults=false] - if true, each function will be\n * passed a deep clone of the results array, rather than the reference to it.\n * @param {boolean?} [options.returnOriginal=true] - if true, any member of asyncFns that\n * is not a function will have its corresponding value in the return array be itself.\n * If this is false, that value will be undefined.\n * @return {Promise<Array<*>>} - returns a promise that resolves to an array of all the\n * asyncFns' return values\n * @example\n * const results = await runSeq(asyncFunctions)\n * @example\n * const results = await runSeq(asyncFunctions, { cloneResults: true, returnOriginal: false })\n */\nexport const runSeq = async (asyncFns = [], options = {}) => {\n  const [valid] = validate({ asyncFns }, { asyncFns: isArr })\n  if (!valid) return []\n\n  const { cloneResults = false, returnOriginal = true } = options\n\n  const results = []\n\n  for (const fn of asyncFns) {\n    const result = isFunc(fn)\n      ? await fn(results.length, cloneResults ? deepClone(results) : results)\n      : returnOriginal\n        ? fn\n        : undefined\n    results.push(result)\n  }\n\n  return results\n}\n","/** @module Function */\n\nimport { validate } from '../validation/validate'\nimport { isFunc } from './isFunc'\n\n/**\n * Executes and times the function `fn`.\n * @function\n * @param {Function} fn\n * @param {...*?} args - any number of arguments to pass to fn when it is called\n * @return {Promise<Array<*, number>>} [ fn output, execution time in ms ]\n * @example\n * const [ result, executionTime ] = timedRun(() => http.get(url)))\n * @example\n * const [ result, executionTime ] = timedRun(http.get, url)\n */\nexport const timedRun = async (fn, ...args) => {\n  const [valid] = validate({ fn }, { fn: isFunc })\n  if (!valid) return [ undefined, -1 ]\n\n  const startTime = new Date()\n  const result = await fn(...args)\n  return [ result, new Date() - startTime ]\n}\n","/** @module Function */\n\n/**\n * Throttle function calls to only execute once over a wait period\n * @example\n * throttle(() => console.log('throttled'), 50)()\n * @function\n * @param {*} func - method to call after wait\n * @param {Number} [wait=100] time to wait between calls\n * @return {Function} throttled function\n */\nexport const throttle = (func, wait = 100) => {\n  let waiting = false\n  return function (...args) {\n    if (waiting) return\n    waiting = true\n    func.apply(this, args)\n    return setTimeout(() => {\n      waiting = false\n    }, wait)\n  }\n}\n","/** @module Function */\n\nimport { isNum } from '../number'\n\n/**\n * Ensures the last call to the throttled function get called.\n * <br/>Will wait the allotted time, before calling the last call to it.\n * <br/>The final call will not execute until no more calls are made,\n * <br/>Accepts a callback to call each time the throttle called,\n * @example\n * throttleLast(() => {}, () => {})()\n * // throttle function\n * @function\n * @param {Function} func - method to call after wait\n * @param {Function} cb - method to call after throttle function is called\n * @param {Number} [wait=100] time to wait until executing func param\n * @return {Function} throttled function\n */\nexport const throttleLast = (func, cb, wait = 100) => {\n  let throttleTimeout\n\n  // Allow not passing in the cb, and just the func, and wait time\n  if(isNum(cb)){\n    wait = cb\n    cb = undefined\n  }\n  \n  return function (...args) {\n    // If the throttle already exists clear it, and create it again\n    if (throttleTimeout) clearTimeout(throttleTimeout)\n    // Store a reference to the timeout\n    // Will wait the allotted time until calling the final call to it\n    throttleTimeout = setTimeout(() => {\n      func.apply(this, args)\n      clearTimeout(throttleTimeout)\n    }, wait)\n  \n    typeof cb === 'function' && cb()\n  }\n}\n","/** @module Function */\n\nimport { isFunc } from './isFunc'\nimport { emptyObj } from '../ext/noOps'\n\n/**\n * Response returned from a limbo promise\n * @typedef TLimboResponse\n * @private\n * @type {Array}\n */\n\n/**\n * Adds catch to a promise for better error handling of await functions\n * <br/>Removes the need for wrapping await in a try / catch\n * <br/>First argument is an Error when the promise throws or null when it resolves\n * <br/>Second argument is the response from the resolved promise\n * @example\n * const [ err, data ] = await limbo(promiseFunction())\n * // returns an array\n * // * err will be undefined if no error was thrown\n * // * data will be the response from the promiseFunction\n * @function\n * @param {Promise<Function>} promise - Promise to be resolved\n * @param {boolean} [asObject=false] - 2nd argument in resp array should be an object when an error is caught\n * @return {Promise<TLimboResponse>} - Slot 1 => error, Slot 2 => response from promise\n */\nexport const limbo = (promise, asObject=false) => {\n  return !promise || !isFunc(promise.then)\n    ? [\n        new Error(`A promise or thenable is required as the first argument!`),\n        asObject ? emptyObj : undefined,\n      ]\n    : promise.then(data => [ null, data ]).catch(err => [ err, asObject ? emptyObj : undefined ])\n}\n\n/**\n * Converts a method with a callback as the last argument into a promise\n * @function\n * @param {*} cb - method to wrap in a promise\n * @param {*} args - Arguments to pass to the callback method\n * @example\n * limboify(fs.rename, 'my/file.txt', 'my/renamed-file.txt')\n * @example\n * limboify(fs.mkdir, 'my/new/directory', { recursive: true })\n *\n * @returns {Promise|*} - Success response of fs.rename method\n */\nexport const limboify = (cb, ...args) => {\n  return limbo(\n    new Promise((res, rej) =>\n      cb(...args, (err, success) => (err ? rej(err) : res(success || true)))\n    )\n  )\n}\n","/** @module Function */\n\n/**\n * Creates a uuid, unique up to around 20 million iterations.\n * @example\n * uuid()\n * // New uuid as a string\n * @function\n * @param {Number} [start] of the uuid\n * @return {String} - build uuid\n */\nexport const uuid = a =>\n  a\n    ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)\n    : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid)\n","/** @module Function */\n\n/**\n * Reusable empty function that is a no-op\n * @function\n * @returns {void}\n */\nexport const noOp = () => {}\n","/** @module Function */\n\nimport { isStr } from '../string/isStr'\nimport { isObj } from '../object/isObj'\nimport { isEmpty } from '../ext/isEmpty'\n\n/**\n * Extracts the message from the exception, whether string or object\n * @function\n * @param {*} exception - Error to be extracted\n * @return {string?} - The message or null if no message is present\n * @example\n * try {\n *   throwSomeException()\n * }\n * catch (err) {\n *   const message = parseErrorMessage(err) || 'Error'\n * }\n */\nexport const parseErrorMessage = exception => {\n  return isStr(exception) && !isEmpty(exception)\n    ? exception\n    : isObj(exception)\n      ? exception.message\n      : null\n}\n","/** @module Function */\n\nimport { isFunc } from './isFunc'\n\nconst defFilters = [ `node:internal`, `node_modules/jest` ]\n\n/**\n * Gets the paths from a stacktrace as CallSites and returns them\n * @function\n * @param {Array|Function} filter - List of paths to ignore, or function that returns truthy to ignore\n *\n * @returns {Array<string>} - List of paths from the stackTrace\n */\nexport const stackTracePaths = (filter = defFilters) => {\n  const orgPreStackTrace = Error.prepareStackTrace\n  Error.prepareStackTrace = (_, stack) => stack\n\n  const stack = new Error().stack.slice(1)\n  Error.prepareStackTrace = orgPreStackTrace\n\n  return stack.reduce((acc, cs) => {\n    const loc = cs.getFileName()\n    if (!loc) return acc\n\n    const ignore = isFunc(filter)\n      ? filter(loc, cs, stack)\n      : Boolean(\n        filter.length && filter.find(filterLoc => loc.includes(filterLoc))\n      )\n\n    !ignore && acc.push(loc)\n\n    return acc\n  }, [])\n}\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\n\n/**\n * Loop over and objects props and values and reduce to new object.\n * @function\n * @param {Object} obj - Object to reduce over it's properties\n * @param {Function} cb - Method to call on each property of the obj argument\n * @param {Object} [start] - Starting accumulator object passed to the reduce method\n * @return {Object} - updated object after running the reduce method\n */\nexport const reduceObj = (obj, cb, start = {}) =>\n  (isObj(obj) &&\n    isFunc(cb) &&\n    Object.entries(obj).reduce(\n      (data, [ key, value ]) => cb(key, value, data),\n      start\n    )) ||\n  start\n","/** @module Object */\n\nimport { logData } from '../log'\n\n/**\n * Clones an object by converting to JSON string and back.\n * @function\n * @param {Object} obj - object to clone\n * @returns {Object} copy of original object\n */\nexport const cloneJson = obj => {\n  try {\n    return JSON.parse(JSON.stringify(obj))\n  }\n  catch (e) {\n    logData(e.message, 'error')\n    return null\n  }\n}\n","/** @module Object */\n\n/**\n * Removes all properties from an object.\n * @function\n * @param {Object} obj - object to remove properties from\n * @param {Array} [filter] - list of keys to not remove\n * @returns {void}\n */\nexport const clearObj = (obj, filter) => {\n  obj &&\n    Object.entries(obj).map(([ key, value ]) => {\n      if (filter && filter.indexOf(key) !== -1) return\n      if (typeof value === 'object') clearObj(value)\n      obj[key] = undefined\n      delete obj[key]\n    })\n}\n","/** @module Object */\n\nimport { isObj } from './isObj'\n\n/**\n * Returns the first param if correct type of second param.\n * @function\n * @param {Object} obj1 - return if is object\n * @param {Object} obj2 - use if first is not an object\n * @returns {Object}\n */\nexport const eitherObj = (obj1, obj2) => (isObj(obj1) && obj1) || obj2\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { cloneFunc } from '../method/cloneFunc'\nimport { isArr } from '../array/isArr'\nimport { isObj } from './isObj'\nimport { deepClone } from '../collection/deepClone'\nimport { isColl } from '../collection/isColl'\n\n/**\n * Deep merges an array of objects together.\n * @function\n * @param {Array} sources - array of objects to join\n * @returns {Object|Array} - merged object or array\n */\nexport const deepMerge = (...sources) => {\n  return sources.reduce((merged, source) => {\n    const srcCopy = deepClone(source)\n    return isArr(srcCopy)\n      ? // Check if it's array, and join the arrays\n        [ ...((isArr(merged) && merged) || []), ...srcCopy ]\n      : // Check if it's an object, and loop the properties\n      isObj(srcCopy)\n        ? // Loop the entries of the object, and add them to the merged object\n        Object.entries(srcCopy).reduce(\n          (joined, [ key, value ]) => ({\n            ...joined,\n            // Check it's a function, and if so, clone it\n            [key]: isFunc(value)\n              ? cloneFunc(value)\n              : // Check if the value is an object of if key is in the object\n              isColl(value) && key in joined\n                ? // Set to value or deepMerge the object with the current merged object\n                deepMerge(joined[key], value)\n                : // Otherwise just clone and set the value\n                deepClone(value),\n            // Pass in merged at the joined object\n          }),\n          merged\n        )\n        : // If it's not an array or object, just return the merge object\n        merged\n    // Check the first source to decide what to merged value should start as\n  }, (isArr(sources[0]) && []) || {})\n}\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { deepClone } from '../collection/deepClone'\nimport { isObj } from './isObj'\n\n/**\n * Deep clones Object obj, then returns the result of calling function mutatorCb with the clone as its argument\n * @example\n * const obj = {}\n * const clone = applyToCloneOf(obj, (clone) => { clone.test = 'foo'; return clone })\n * console.log(obj === clone) // prints false\n * console.log(clone.test === 'foo') // prints true\n * @function\n * @param {Object} obj - object\n * @param {Function} mutatorCb - a callback that accepts one argument, the cloned obj, and mutates it in some way\n * @returns {Object|Array} the mutated clone\n */\nexport const applyToCloneOf = (obj, mutatorCb) => {\n  let error\n  if (!obj) error = 'object (Argument 1) in applyToCloneOf, must be defined!'\n\n  if (!isObj(obj))\n    error = 'object (Argument 1) in applyToCloneOf, must be an object!'\n\n  if (!mutatorCb)\n    error = 'mutator (Argument 2) in applyToCloneOf, must be defined!'\n\n  if (!isFunc(mutatorCb))\n    error = 'mutator (Argument 2) arg in applyToCloneOf, must be a function!'\n\n  if (error) {\n    console.warn(error)\n\n    return obj\n  }\n\n  const clone = deepClone(obj)\n  mutatorCb(clone)\n\n  return clone\n}\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { set } from '../collection/set'\nimport { isArr } from '../array/isArr'\nimport { isObj } from './isObj'\nimport { isEntry } from './isEntry'\n\n/**\n * Returns a new object, each entry of which is the result of applying the cb function to input's corresponding entry\n * @param {Object|Array} obj - regular object or array\n * @param {Function} cb  - function of form: (key, value) => [nextKey, nextValue]\n *  - the return type here is an array of two elements, key and value, where `key` must be either a string or a number\n *  - if a cb does not return an entry, then the original [key, value] pair that was passed into cb will be used instead\n * @example mapObj({a: 2, b: 3}, (k, v) => [k, v * v]) returns: {a: 4, b: 9}\n * @example mapObj({a: 1}, (k, v) => ['b', v]) returns: {b: 1}\n * @function\n *\n * @returns {Object} - new object with mapping applied, or the original obj if input was invalid\n */\nexport const mapEntries = (obj, cb) => {\n  if (!isArr(obj) && !isObj(obj)) {\n    console.error(obj, `Expected array or object for obj. Found ${typeof obj}`)\n    return obj\n  }\n\n  if (!isFunc(cb)) {\n    console.error(`Expected function for cb. Found ${typeof cb}`)\n    return obj\n  }\n\n  const entries = Object.entries(obj)\n\n  const initialValue = isArr(obj) ? [] : {}\n\n  return entries.reduce((obj, [ key, value ]) => {\n    const result = cb(key, value)\n    if (!isEntry(result)) {\n      console.error(\n        `Callback function must return entry. Found: ${result}. Using current entry instead.`\n      )\n      return set(obj, key, value)\n    }\n    return set(obj, result[0], result[1])\n  }, initialValue)\n}\n","/** @module Object */\n\nimport { isObj } from './isObj'\nimport { isFunc } from '../method/isFunc'\nimport { mapEntries } from './mapEntries'\n\n/**\n * Shortcut helper for mapping just the keys of an object.\n * @function\n * @param {Object} obj - Object to have it's property keys mapped\n * @param {Function} keyMapper - Function of shape (key) => nextKey\n * @returns {Object} - The new object with each key mapped to the response of keyMapper\n */\nexport const mapKeys = (obj, keyMapper) => {\n  if (!isObj(obj) || !isFunc(keyMapper)) return obj\n\n  return mapEntries(obj, (key, value) => [ keyMapper(key), value ])\n}\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\n\n/**\n * Map over and objects props and values.\n * @function\n * @param {Object} obj - Object to map over\n * @param {Function} cb - Method to call for each entry in the passed in obj\n * @return {Array} -  returned values from callback || The entries of the passed in obj\n */\nexport const mapObj = (obj, cb) => {\n  if (!isObj(obj)) return []\n\n  const entries = Object.entries(obj)\n  return isFunc(cb) ? entries.map(([ key, value ]) => cb(key, value)) : entries\n}\n","/** @module Object */\n\nimport { isObj } from './isObj'\nimport { reduceObj } from './reduceObj'\n\n/**\n * Creates a new object from passed in object with keys not defined from array.\n * @function\n * @param {Object} target - object to pull keys from\n * @param {Array} keys - keys to not add to new object\n * @return {Object} new object with only keys not in array\n */\nexport const omitKeys = (obj = {}, keys = []) =>\n  (isObj(obj) &&\n    reduceObj(\n      obj,\n      (key, _, updated) => {\n        keys.indexOf(key) === -1 && (updated[key] = obj[key])\n\n        return updated\n      },\n      {}\n    )) ||\n  {}\n","/** @module Object */\n\nimport { isObj } from './isObj'\n\n/**\n * Creates a new object from passed in object with keys defined from array.\n * @function\n * @param {Object} obj - object to pull keys from\n * @param {Array} keys - keys to add to new object\n * @return {Object} new object with only keys from passed in keys array\n */\nexport const pickKeys = (obj = {}, keys = []) =>\n  (isObj(obj) &&\n    keys.reduce((updated, key) => {\n      key in obj && (updated[key] = obj[key])\n\n      return updated\n    }, {})) ||\n  {}\n","/** @module Object */\n\nimport { sanitize } from '../string/sanitize'\n\n/**\n * Sanitizes all html strings in an object's properties.\n * @function\n * @param {Object} obj - Object to be sanitize\n * @return {Object} - obj with strings sanitized\n */\nexport const sanitizeCopy = obj => JSON.parse(sanitize(JSON.stringify(obj)))\n","/** @module Object */\n\nimport { isStr } from '../string/isStr'\n\n/**\n * Trims objects string fields.\n * @function\n * @param {Object} object\n * @return {Object} - object with string fields trimmed\n */\nexport const trimStringFields = object =>\n  Object.entries(object).reduce((cleaned, [ key, value ]) => {\n    cleaned[key] = isStr(value) ? value.trim() : value\n    return cleaned\n  }, object)\n","/** @module Object */\n\nimport { isStr } from '../string/isStr'\nimport { isArr } from '../array/isArr'\nimport { strToType } from '../ext/strToType'\n\n/**\n * Converts an array or string into an object.\n * @function\n * @param { array | string } val - to be converted to object\n * @param {String} [divider] - if string, what divides key from value\n * @param {String} [split] - if string, what splits each key/value pair\n * @return {Object} - Converted object\n */\nexport const toObj = (val, divider, split) => {\n  if (isArr(val))\n    return Object.keys(val).reduce((obj, key) => {\n      obj[key] = val[key]\n\n      return obj\n    }, {})\n\n  if (!isStr(val)) return {}\n\n  divider = divider || '='\n  split = split || '&'\n  return val\n    .toString()\n    .split(split)\n    .reduce((obj, item) => {\n      const sep = item.split(divider)\n      obj[sep[0].trim()] = strToType(sep[1].trim())\n\n      return obj\n    }, {})\n}\n","/** @module Object */\n\nimport { isStr } from '../string/isStr'\nimport { isArr } from '../array/isArr'\n\n/**\n * Converts an array of strings to a matching key/value pair object.\n * @function\n * @param {Array} arr - to be converted to object\n * @param {Boolean} toUpperCase - converts the key and value to uppercase\n * @return {Object} built object\n */\nexport const keyMap = (arr, toUpperCase) =>\n  (isArr(arr) &&\n    arr.reduce((obj, key) => {\n      if (!isStr(key)) return obj\n\n      const use = (toUpperCase && key.toUpperCase()) || key\n      obj[use] = use\n\n      return obj\n    }, {})) ||\n  {}\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { pipeline } from '../method/pipeline'\nimport { isObj } from './isObj'\n\n/**\n * Like \"every\" for arrays, but operates across each entry in an object\n * @function\n * @param {Object} obj - Object to the it's entries iterated on\n * @param {Function} predicate - Function of form (key, value) => boolean. Returns true or false for the entry\n * @param {Boolean} [logError=true] - Boolean indicating if errors should be logged\n * @returns {Boolean} - Boolean indicating that every entry satisfied the predicate or not\n */\nexport const everyEntry = (obj, predicate, logError = true) => {\n  if (!isObj(obj)) {\n    logError && console.error(`First argument ${obj} must be an object.`)\n    return false\n  }\n\n  if (!isFunc(predicate)) {\n    logError && console.error(`Second argument ${predicate}, must a function`)\n    return false\n  }\n\n  return pipeline(obj, Object.entries, entries =>\n    entries.every(([ key, value ]) => predicate(key, value))\n  )\n}\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { pipeline } from '../method/pipeline'\nimport { isObj } from './isObj'\n\n/**\n * Like \"some\" for arrays, but operates across each entry in obj\n * @function\n * @param {Object} obj - Object to have it's properties checked\n * @param {Function} predicate of form (key, value) => boolean. Returns true or false for the entry\n * @param {Boolean} [logError=true] - Boolean indicating if errors should be logged\n * @returns {Boolean} - True if at least one entry satisfied the predicate, false if not\n */\nexport const someEntry = (obj, predicate, logError = true) => {\n  if (!isObj(obj)) {\n    logError && console.error(`First argument ${obj} must be an object.`)\n    return false\n  }\n\n  if (!isFunc(predicate)) {\n    logError && console.error(`Second argument ${predicate}, must a function`)\n    return false\n  }\n\n  return pipeline(obj, Object.entries, entries =>\n    entries.some(([ key, value ]) => predicate(key, value))\n  )\n}\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\nimport { reduceObj } from './reduceObj'\n\n/**\n * Returns a new object, consisting of every key-value pair from obj that, when passed into the predicate, returned true\n * @function\n * @param {Object} obj - Object that should have it's properties filtered\n * @param {Function} predicate  - function of form: (key, value) => Boolean\n * @param {Boolean} [logError=true] - Boolean indicating if errors should be logged\n * @returns {Object} - Object consisting of a subset of the entries from obj\n * @example: filterObj({a: 2, b: 3}, (k, v) => (v > 2)) returns: {b: 3}\n */\nexport const filterObj = (obj, predicate, logError = true) => {\n  if (!isObj(obj)) {\n    logError && console.error(`First argument ${obj} must be an object.`)\n    return obj\n  }\n\n  if (!isFunc(predicate)) {\n    logError && console.error(`Second argument ${predicate}, must a function`)\n    return obj\n  }\n\n  return reduceObj(\n    obj,\n    (key, value, data) => {\n      if (predicate(key, value)) data[key] = value\n      return data\n    },\n    {}\n  )\n}\n","/** @module Object */\n\nconst pad = (hash, len) => {\n  while (hash.length < len)\n    hash = '0' + hash\n\n  return hash\n}\n\nconst fold = (hash, text) => {\n  if (text.length === 0) return hash\n\n  let i;\n  let chr;\n  let len;\n\n  for (i = 0, len = text.length; i < len; i++) {\n    chr = text.charCodeAt(i)\n    hash = ((hash << 5) - hash) + chr\n    hash |= 0\n  }\n\n  return hash < 0 ? hash * -2 : hash\n}\n\nconst foldObject = (hash, obj, seen) => {\n  const foldKey = (hash, key) => foldValue(hash, obj[key], key, seen)\n\n  return Object.keys(obj).sort().reduce(foldKey, hash)\n}\n\nconst foldValue = (input, value, key, seen) => {\n  const hash = fold(fold(fold(input, key), toString(value)), typeof value)\n  \n  if (value === null) return fold(hash, 'null')\n\n  if (value === undefined) return fold(hash, 'undefined')\n\n  if (typeof value === 'object' || typeof value === 'function') {\n    if (seen.indexOf(value) !== -1) return fold(hash, '[Circular]' + key)\n    \n    seen.push(value)\n\n    const objHash = foldObject(hash, value, seen)\n\n    if (!('valueOf' in value) || typeof value.valueOf !== 'function') objHash\n\n    try {\n      return fold(objHash, String(value.valueOf()))\n    }\n    catch (err) {\n      return fold(objHash, '[valueOf exception]' + (err.stack || err.message))\n    }\n\n  }\n\n  return fold(hash, value.toString())\n}\n\nconst toString = (obj) => Object.prototype.toString.call(obj)\n\n/**\n * Creates a consistent hash string from the passed in object\n * <br/>Not intended to be secure\n * <br/>Given the same input keys and values, it will always return the same output hash\n */\nexport const hashObj = (obj) => pad(foldValue(0, obj, '', []).toString(16), 8)\n\n","/** @module Object */\n\nimport { isObj } from './isObj'\nimport { exists } from '../ext/exists'\nimport { toStr } from '../string/toStr'\nimport { reduceObj } from './reduceObj'\nimport { ensureArr } from '../array/ensureArr'\n\n/**\n * Creates an intersection of the passed in object, based on the passed in keys\n * @function\n * @param {Object} target - object to pull keys from\n * @param {Array} keys - keys to not add to new object\n * @example\n * const [matching, nonMatching] = splitByKeys({ 1: 'match', 2: 'non-matching' }, [ 1 ])\n * matching === { 1: 'match' } === true\n * nonMatching === { 2: 'non-matching' }  === true\n *\n * @return {Array<Object>} - First object contains keys matching keys of the keys argument\n *                          - Second object contains keys not matching keys of the keys argument\n */\nexport const splitByKeys = (obj = {}, keys) => {\n  if (!keys) return [{}, { ...obj }]\n\n  const intersect = [{}, {}]\n  const compareKeys = ensureArr(keys)\n\n  return isObj(obj)\n    ? reduceObj(\n      obj,\n      (key, _, updated) => {\n        exists(compareKeys.find(k => exists(k) && toStr(k) === key))\n          ? (updated[0][key] = obj[key])\n          : (updated[1][key] = obj[key])\n\n        return updated\n      },\n      intersect\n    )\n    : intersect\n}\n","/** @module Object */\n\nimport { emptyObj } from '../ext/noOps'\n\n/**\n * Transforms the keys of an object to a matching key value in keyMap object\n * Keys not in the keyMap are included as is, unless strict === true option is passed\n * @example\n * transformKeys({my_key: `1234`, other_key: `4321`}, {my_key: `myKey`}) === { myKey: `1234`, other_key: `4321` }\n * @example\n * const opts = { strict: true }\n * transformKeys({my_key: `1234`, other_key: `4321`}, {my_key: `myKey`}, opts) === { myKey: `1234` }\n */\nexport const transformKeys = (\n  obj=emptyObj,\n  keyMap=emptyObj,\n  opts=emptyObj,\n) => {\n  const { strict=false  } = opts\n\n  return Object.entries(obj)\n    .reduce((acc, [key, value])=> {\n      const ref = keyMap[key] || (!strict ? key : undefined)\n      ref && (acc[ref] = value)\n\n      return acc\n    }, {})\n}","/** @module Promise */\n\nimport { isFunc } from '../method/isFunc'\n\n/**\n * Converts a standard callback method into Promise\n * @param {Function} method - Function to convert into a promise\n * @function\n *\n * @return {Promise<Function>} - Passed in method converted into a promise\n */\nexport const promisify = method => {\n  if (!isFunc(method)) throw `Argument must be a function`\n\n  return (...args) => {\n    return new Promise((res, rej) => {\n      // If the last arg is not a function, just return the resolved method\n      if (!isFunc(args[args.length - 1])) return res(method(...args))\n\n      // Remove the callback method\n      args.pop()\n      // Replace it with the promise resolve / reject\n      args.push((...cbData) => {\n        // If the cbData first arg is not falsy, then reject the promise\n        // Otherwise resolve it\n        return cbData && cbData[0] ? rej(...cbData) : res(...cbData)\n      })\n\n      // Call the method, and return it\n      return method(...args)\n    })\n  }\n}\n","/** @module Promise */\n\nimport { isObj } from '../object/isObj'\nimport { isFunc } from '../method/isFunc'\nimport { promisify } from './promisify'\n\n/**\n * Creates an array of Object default properties not to convert into promises\n * @ignore\n */\nconst defObjProps = Array.from([\n  'caller',\n  'callee',\n  'arguments',\n  'apply',\n  'bind',\n  'call',\n  'toString',\n  '__proto__',\n  '__defineGetter__',\n  '__defineSetter__',\n  'hasOwnProperty',\n  '__lookupGetter__',\n  '__lookupSetter__',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'valueOf',\n  'toLocaleString',\n])\n  .concat(Object.getOwnPropertyNames(Object.prototype))\n  .reduce((map, functionName) => {\n    map[functionName] = true\n    return map\n  }, {})\n\n/**\n * Loops an object and looks for any methods that belong to the object, then add an Async version\n * @param {Object} object\n * @return {Object} - object with Async methods added\n * @private\n */\nconst addAsync = object => {\n  if (!object.__IS_PROMISIFIED__) {\n    for (const prop of Object.getOwnPropertyNames(object)) {\n      const isAsync = prop.indexOf('Async') !== -1 || object[`${prop}Async`]\n      if (isAsync || defObjProps[prop]) continue\n\n      if (isFunc(object[prop])) object[`${prop}Async`] = promisify(object[prop])\n      else {\n        const getValue = Object.getOwnPropertyDescriptor(object, prop).get\n        if (isFunc(getValue)) object[`${prop}Async`] = promisify(getValue)\n      }\n    }\n    object.__IS_PROMISIFIED__ = true\n  }\n\n  return object\n}\n\n/**\n * Converts Objects method properties into promiseAsync. allow using promisifyAll\n * @function\n * @param {Object} object\n * @return {Object} - promisified object\n */\nexport const promisifyAll = object => {\n  if (!isObj(object)) return object\n\n  addAsync(object)\n  const proto = Object.getPrototypeOf(object)\n\n  proto && Object.getPrototypeOf(proto) !== null && addAsync(proto)\n\n  return object\n}\n","/** @module Promise */\n\n'use strict'\n\n/**\n * Stops execution for a given amount of time\n * @function\n * @param {Number} time - Amount of time to wait\n * @return { void }\n */\nexport const wait = time =>\n  new Promise(res => setTimeout(() => res(true), time))\n","/** @module RegEx */\n\nimport { isRegex } from './isRegex'\nimport { isStr } from '../string'\n\n/**\n * Attempts to return a regex string from maybeRx.\n * @function\n * @param {*} maybeRx - any time\n * @return {string?} If maybeRx is a RegExp instance, returns its .source\n * property. If it is a string, returns it unchanged.\n * Otherwise, returns null.\n *\n * @example\n * getRegexSource(/[A-z]+/) // '[A-z]+'\n * getRegexSource('test') // 'test'\n * getRegexSource(34) // null\n */\nexport const getRegexSource = maybeRx =>\n  isRegex(maybeRx) ? maybeRx.source : isStr(maybeRx) ? maybeRx : null\n","/** @module RegEx */\n\nimport { isStr } from '../string'\nimport { isArr } from '../array'\nimport { getRegexSource } from './getRegexSource'\n\n/**\n * Helper for `joinRegex` that parses the args\n * @param {...*} args\n * @return {Array} [\n *  expressions array,\n *  options string\n * ]\n */\nconst parseArgs = args => {\n  if (isArr(args[0])) return [ args[0], args[1] ]\n  const last = args[args.length - 1]\n  const options = isStr(last) ? last : undefined\n  const expressions = options ? args.splice(0, args.length - 1) : args\n  return [ expressions, options ]\n}\n\n/**\n * Joins regex together in one expression\n * <br/>You can technically use strings as well\n * <br/>But be careful that it's not the last element of a spread call\n * <br/>Or that will be interpreted as the \"options\" string.\n * @function\n * @param {...RegExp} expressions array of regex instances.\n * @example\n * // calling using spread args\n * const joined = joinRegex(/[A-z]+/, /[0-9]/, 'g')\n * joined === /([A-z]+|[0-9])/g\n * @example\n * // calling with an array\n * const joined = joinRegex([ ...allMyRegEx ], 'gi')\n */\nexport const joinRegex = (...args) => {\n  const [ expressions, options ] = parseArgs(args)\n\n  // join the regex together in a capture group with the | operator\n  const source = expressions.reduce((joined, next) => {\n    const nextSource = getRegexSource(next)\n    return !nextSource\n      ? joined\n      : joined === ''\n        ? nextSource\n        : `${joined}|${nextSource}`\n  }, '')\n\n  return new RegExp(`(${source})`, options)\n}\n","/** @module String */\n\n/**\n * Builds a string path from passed in args ( i.e. path/to/thing ).\n * @function\n * @return {String} - built path from arguments\n */\nexport const buildPath = (...args) => {\n  const built = args.reduce((path, arg) => {\n    let str = toStr(arg)\n\n    return `${path}${(str && '/' + str) || ''}`\n  }, '')\n\n  return built.replace(/([^:\\/]|^)\\/{2,}/g, '$1/')\n}\n","/** @module String */\n\nimport { isFunc } from '../method/isFunc'\nimport { isStr } from './isStr'\n\n/**\n * Maps a string by applying function `charMapper` to each character.\n * @function\n * @param {String} str - String to be mapped\n * @param {Function} charMapper - Function of form (character) => <some character or string>\n * @returns {String} - String with each character mapped by charMap.<br/>If str is not a string or charMapper not a function, just returns the passed in str argument\n * @example\n *  mapString(\"hello\", c => c === 'h' ? 'x' : c) // returns 'xello'\n */\nexport const mapString = (str, charMapper) => {\n  if (!isStr(str)) return str\n  if (!isFunc(charMapper)) return str\n  let result = ''\n  for (const char of str) {\n    result += charMapper(char)\n  }\n  return result\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\nimport { mapString } from './mapString'\nimport { isLowerCase } from './isLowerCase'\nimport { isUpperCase } from './isUpperCase'\n\n/**\n * Converts a string into a delimted script based on the passed in arguments\n * @function\n * @param {String} str - string of any casing\n * @param {String} delimiter - How the string should be split e.g. '_'\n * @param {Array<string>} [delimiters] - An array of delimiter characters on which this function searches and breaks.<br/>Defaults to checking -, _, and space\n * @returns {String} - A new string with the specified delimiter delimiting each word\n *\n * @example\n * delimitString('fooBar', '_') === 'foo_Bar'\n */\nexport const delimitString = (str, delimiter, delimiters = [ '-', '_', ' ' ]) => {\n  if (!isStr(str)) return str\n  const isDelimiter = c => delimiters.some(del => del === c)\n  let prevChar = '_'\n  return mapString(str, char => {\n    if (isDelimiter(char)) {\n      prevChar = delimiter\n      return delimiter\n    }\n\n    if (isUpperCase(char) && isLowerCase(prevChar) && !isDelimiter(prevChar)) {\n      prevChar = char\n      return delimiter + char\n    }\n\n    prevChar = char\n    return char\n  })\n}\n","/** @module String */\n\nimport { delimitString } from './delimitString'\n\n/**\n * Converts a string to snake_case.\n * @function\n * @param {String} str - String to be converted\n * @example\n * snakeCase('fooBar') === 'foo_bar'\n * @returns {String} - The string in snake_case, or the input if it is not a string\n */\nexport const snakeCase = str => {\n  const underscored = delimitString(str, '_')\n  return underscored.toLowerCase()\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Converts first letter of a string to be capitalized.\n * @function\n * @param {String} string\n * @param {Boolean} [lowercaseTail=true] - if true, will also lowercase the all characters except the first\n * @return {String} - Passed in string, but capitalized\n */\nexport const capitalize = (str, lowercaseTail = true) => {\n  if (!isStr(str) || !str[0]) return str\n  const tail = lowercaseTail ? str.slice(1).toLowerCase() : str.slice(1)\n  return `${str[0].toUpperCase()}${tail}`\n}\n","/** @module String */\n\n/**\n * Removes a `.` from the start and end of a string.\n * @function\n * @param {String} str - string to convert\n * @return {String} - string without the `.`\n */\nexport const removeDot = string => {\n  const noDot = string.indexOf('.') === 0 ? string.slice(1) : string\n  return noDot.indexOf('.') === noDot.length - 1 ? noDot.slice(0, -1) : noDot\n}\n","/** @module String */\n\nimport { removeDot } from './removeDot'\n\n/**\n * Converts `-` and `_` to white space and calls remove removeDot, to remove a period.\n * @function\n * @param {String} string to be converted\n * @return {String} - cleaned string\n */\nexport const cleanStr = str => {\n  return (str && removeDot(str).replace(/[-_]/gm, ' ')) || str\n}\n","/** @module String */\n\nimport { capitalize } from './capitalize'\nimport { cleanStr } from './cleanStr'\n\n/**\n * Converts a string to camel case.\n * @function\n * @param {String} string to be converted\n * @return {String} - string in camel case format\n */\nexport const camelCase = (str, compCase) => {\n  return (\n    (str &&\n      cleanStr(str)\n        .split(/[\\s_-]/gm)\n        .reduce((cased, word, index) => {\n          if (!word) return cased\n          cased +=\n            ((index > 0 || compCase) && capitalize(word)) || word.toLowerCase()\n          return cased\n        }, '')) ||\n    str\n  )\n}\n","/** @module String */\n\nimport { capitalize } from './capitalize'\n\n/**\n * Turns a path string into a camel-cased string, if there is more than one\n * step in the path. If there isn't, just returns path.\n * @function\n * @param {String} path\n * @return {String} camel-cased string\n * @example\n * camelCasePath('settings.agendaMap.Count') -> 'settingsAgendaMapCount'\n * camelCasePath('settings') -> 'settings'\n */\nexport const camelCasePath = path => {\n  const split = path.split('.')\n  const camelCasedSplit = split.map((str, idx) =>\n    idx > 0 ? capitalize(str, false) : str\n  )\n\n  return camelCasedSplit.length > 1 ? camelCasedSplit.join('') : path\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\nimport { toStr } from './toStr'\n\n/**\n * Checks if a string contains another string.\n * @function\n * @param {String} string - value to be checked\n * @param {String} substring - value to search for\n * @param {Number} [fromIndex] - Index of the string to search from\n * @return {Boolean} - if the substring exists string\n */\nexport const containsStr = (str, substring, fromIndex) => {\n  str = (!isStr(str) && toStr(str)) || str\n  substring = (!isStr(substring) && toStr(substring)) || substring\n\n  return str.indexOf(substring, fromIndex) !== -1\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Checks if the first param is a string, and returns it.\n * <br/>If it's not a string, the second param is returned\n * @function\n * @param {String} str1 - return if is string\n * @param {String} str2 - use if first is not a string\n * @returns {String}\n */\nexport const eitherStr = (str1, str2) => (isStr(str1) && str1) || str2\n","/** @module String */\n\nconst uppercasePattern = /[A-Z]/g\nconst msPattern = /^ms-/\n\n/**\n * Hyphenator cache, that stores already hyphenated text to be reused\n * @private\n * @Object\n */\nconst hyphenCache = {}\n\n/**\n * Converts a matching style rule to lowercase with hyphen\n * External hyphenator helpers, created outside the method to improve performance\n * @function\n * @private\n * @param {String} str - camelCase style rule rule\n *\n * @returns {String} - Lowercase style rule with hyphen at the start\n */\nconst toHyphenLower = match => '-' + match.toLowerCase()\n\n/**\n * Converts a camelCase style rule into a hyphenated style rule\n * <br/>Caches the response to make future conversions faster\n * @function\n * @param {String} str - camelCase style rule rule\n *\n * @returns {String} - Hyphenated style rule\n */\nexport const hyphenator = rule => {\n  if (hyphenCache.hasOwnProperty(rule)) return hyphenCache[rule]\n\n  const hRule = rule.replace(uppercasePattern, toHyphenLower)\n  return (hyphenCache[rule] = msPattern.test(hRule) ? '-' + hRule : hRule)\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\nimport { isNonNegative } from '../number/isNonNegative'\n/**\n * Creates a hash from a passed in string consistently\n * <br/>Not intended to be secure\n * <br/>Value comes from being a pure function\n * <br/>Given the same input, it will always return the same output\n * <br/>There is no expectation to convert back from the hash to the original string\n * @function\n * @param {String} str - String to be hashed\n * @param {number=} maxLength - Max length of the returned hash\n *\n * @returns {String} - Hashed version of the string\n */\nexport const hashString = (str, maxLength) => {\n  if (!isStr(str) || str.length == 0) return 0\n\n  str = str.split('').reverse()\n    .join('')\n\n  let hash = 0\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i)\n    hash = (hash << 5) - hash + char\n    // Convert to positive 32bit integer\n    hash = `${Math.abs(hash & hash)}`\n  }\n\n  return isNonNegative(maxLength) ? hash.slice(0, maxLength) : hash\n}\n","/** @module String */\n\n/**\n * Convert JSON string into object, wrapped in a try / catch.\n * @function\n * @param {String} string\n * @return {Object} - JSON object\n */\nexport const parseJSON = (str, logErr = true) => {\n  try {\n    return JSON.parse(str)\n  }\n  catch (e) {\n    logErr && console.error(e.message)\n    return null\n  }\n}\n","/** @module String */\n\n/**\n * Adds an `s` to the end of a string, if one does not exist.\n * @function\n * @param {String} str - string to convert\n * @return {String} string as a plural\n */\nexport const plural = str => {\n  if (!str || !str.length) return str\n  return str[str.length - 1] !== 's' ? str + 's' : str\n}\n","/** @module String */\n\n/**\n * Remove an `s` at the end of a string, if the last char is an `s`,\n * @function\n * @param {String} str - string to convert\n * @return {String} string as singular\n */\nexport const singular = str => {\n  if (!str || !str.length) return str\n  return str[str.length - 1] === 's' ? str.slice(0, str.length - 1) : str\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\nimport { camelCase } from './camelCase'\n\n/**\n * Converts a string to css in js format.\n * Useful for converting css rules into js format, I.E. margin-top => marginTop.\n * @function\n * @param {String} str - string to be converted\n * @return {String} - string in style case format\n */\nexport const styleCase = str => {\n  if (!isStr(str)) return str\n\n  const cased = camelCase(str)\n  return `${cased[0].toLowerCase()}${cased.slice(1)}`\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Converts a string to train case, I.E. marginTop => margin-top.\n * @function\n * @param {String} string to be converted\n * @return {String} - string in train case format\n */\nexport const trainCase = str =>\n  (isStr(str) &&\n    str\n      .split(/(?=[A-Z])|[\\s_-]/gm)\n      .join('-')\n      .toLowerCase()) ||\n  str\n","/** @module String */\n\nimport { isStr } from './isStr'\nimport { cleanStr } from './cleanStr'\nimport { capitalize } from './capitalize'\n\n/**\n * Converts all words in a string to be capitalized.\n * @function\n * @param {String} string to be converted\n * @return {String} - string with all words capitalized\n */\nexport const wordCaps = str => {\n  if (!isStr(str)) return str\n  let cleaned = cleanStr(str)\n  return cleaned\n    .split(' ')\n    .map(word => (word && capitalize(word)) || '')\n    .join(' ')\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\nimport { isArr } from '../array/isArr'\n\n/**\n * Joins strings and array of string together with spaces\n * @function\n * @param {String} original - The default string that other strings get added to\n * @param {string|Array} toAdd - String of Array of Strings to add to the original\n *\n * @returns {String} Joined strings seperated by space\n */\nexport const spaceJoin = (original, toAdd) => {\n  toAdd = isArr(toAdd) ? toAdd : [toAdd]\n  return toAdd.reduce(\n    (joined, item) => {\n      return isStr(item)\n        ? `${joined ? joined + ' ' : ''}${item}`.trim()\n        : joined\n    },\n    isStr(original) ? original : ''\n  )\n}\n","/** @module String */\n\nimport { isFunc } from '../method/isFunc'\nimport { isColl } from '../collection/isColl'\nimport { get } from '../collection/get'\nimport { isStr } from './isStr'\n\n/**\n * Helper to wrap the template method, and allow passing a custom regex argument\n * Custom regex is used instead the default regex of the template method\n * @function\n * @example\n * template('${{ who }} in ${{ where }}!', { who: 'goats', where: 'boats' })\n * // Returns \"goats in boats\"\n * @param {String} template - String with ES6 syntax items to be replaced\n * @param {Object|Array} data - Data used to replace the ES6 placeholders\n * @param {any} fallback - Used it data does not contain key to be replaced\n * @param {Object} [RegEx?] - Regular Express to replace the default\n *\n * @returns {String} - template with placeholder values filled\n */\nexport const templateRx = (tempStr, data, fallback = '', rx) => {\n  const orgRx = template.regex\n  template.regex = rx || /{{([^}]*)}}/g\n  const resp = template(tempStr, data, fallback)\n  template.regex = orgRx\n\n  return resp\n}\n\n/**\n * Simple template replace for ES6 template strings\n * @function\n * @example\n * template('${ who } in ${ where }!', { who: 'goats', where: 'boats' })\n * // Returns \"goats in boats\"\n * @param {String} template - String with ES6 syntax items to be replaced\n * @param {Object|Array} data - Data used to replace the ES6 placeholders\n * @param {any} fallback - Used it data does not contain key to be replaced\n *\n * @returns {String} - template with placeholder values filled\n */\nexport const template = (tempStr, data, fallback = '') => {\n  data = (isColl(data) && data) || {}\n  const regex = template.regex || /\\${(.*?)\\}/g\n\n  return isStr(tempStr)\n    ? tempStr.replace(regex, (match, exact) => {\n      const path = (exact || match.substr(2, match.length - 3)).trim()\n      const replaceWith = get(data, path, fallback)\n      return isFunc(replaceWith)\n        ? replaceWith(data, path, fallback)\n        : replaceWith\n    })\n    : console.error(`template requires a string as the first argument`) ||\n        tempStr\n}\n","/** @module String */\n\n/**\n * Checks whether a given string is a valid filename\n * @function\n * @param {String} fileName - The file name to check if valid\n *\n * @returns {Boolean}\n */\nexport const validFilename = fileName => {\n  if (!fileName) return false\n  // On Unix-like systems '/' is reserved\n  // and <>:\"/\\|?* as well as non-printable characters \\u0000-\\u001F on Windows\n  const regex = /[<>:\"/\\\\|?*\\u0000-\\u001F]/g\n\n  // invalid Windows filenames\n  const windowsRegex = /^(con|prn|aux|nul|com\\d|lpt\\d)$/i\n\n  // starts with period\n  const periodRegex = /^\\.\\.?$/\n\n  return regex.test(fileName) ||\n    windowsRegex.test(fileName) ||\n    periodRegex.test(fileName)\n    ? false\n    : true\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Reverses string\n * @function\n * @param {String} str - string to reverse\n * @return {String} reversed str\n * @example\n * reverseStr('foo') // 'oof'\n */\nexport const reverseStr = str => {\n  if (!isStr(str)) return undefined\n  let reversed = ''\n  for (let char of str) {\n    reversed = char + reversed\n  }\n  return reversed\n}\n","/** @module String */\n\n/**\n * Helper for `getWordStartingAt` that finds the\n * index of the exclusive end of the word, given the available\n * ending delimiters\n * @function\n * @param {String} text\n * @param {Number} index\n * @param {Array<string>} delimiters\n */\nexport const getNearestDelimiterIndex = (text, index, delimiters = [' ']) => {\n  const indices = delimiters.map(str => text.indexOf(str, index)).sort()\n  return indices.find(idx => idx >= 0)\n}\n\n/**\n * Gets the word in text starting at index\n * @function\n * @param {String} text\n * @param {Number} index - the inclusive starting index of the word to get\n * @param {Array<string>?} delimiters - optional array of strings that delimit words. Defaults to the space character.\n * @example\n * const text = 'foo bar bin'\n * const word = getWordStartingAt(text, 4)\n * word === 'bar'\n */\nexport const getWordStartingAt = (text, index, delimiters = [' ']) => {\n  const endingSpaceIdx = getNearestDelimiterIndex(text, index, delimiters)\n  return text.substring(\n    index,\n    endingSpaceIdx === -1 ? text.length : endingSpaceIdx\n  )\n}\n","/** @module String */\n\nimport { reverseStr } from './reverseStr'\nimport { getWordStartingAt } from './getWordStartingAt'\n\n/**\n * Gets the word in text ending at index (exclusive)\n * @function\n * @param {String} text\n * @param {Number} index - the exclusive ending index of the word to get\n * @param {Array<string>?} delimiters - optional array of strings that delimit the start of words. Defaults to the space character.\n * @example\n * const text = 'foo bar bin'\n * const word = getWordEndingAt(text, 3)\n * word === 'foo'\n */\nexport const getWordEndingAt = (text, index, delimiters = [' ']) => {\n  const reversed = reverseStr(text)\n  const reversedIndex = text.length - index\n  return reverseStr(getWordStartingAt(reversed, reversedIndex, delimiters))\n}\n","import { EAstObject, EStepType, EHookType } from './types'\nimport { deepFreeze } from '@keg-hub/jsutils'\n\nconst ignoreTypes = [\n  `*`,\n  ``,\n]\n\nexport const constants = deepFreeze({\n  ALIAS_REF: `$$`,\n  ALIAS_WORLD_KEY: `$alias`,\n  ALIAS_REF_AT_RUNTIME: `$$:`,\n  REGEX_VARIANT: 'regex',\n  WORLD_REF: `$`,\n  WORLD_KEY: `$world`,\n  WORLD_AT_RUNTIME: `$:`,\n  EXPRESSION_VARIANT: 'expression',\n  HOOK_TYPES: Object.keys(EHookType),\n  STEP_TYPES: Object.keys(EStepType).filter(type => !ignoreTypes.includes(type)),\n  FEATURE_META: [ 'feature', 'perspective', 'desire', 'reason', 'comments' ],\n  LOG_JEST_SPEC_ENV: `PARKIN_LOG_JEST_SPEC`,\n  SPEC_RESULT_LOG: `------- PARKIN SPEC RESULT LOG -------`,\n})\n\nexport const ParentTypes = [\n  EAstObject.rule,\n  EAstObject.scenario,\n  EAstObject.background,\n]\n\nexport const StepTypes = [\n  EAstObject.given,\n  EAstObject.when,\n  EAstObject.then,\n  EAstObject.and,\n  EAstObject.but,\n  EAstObject[`*`],\n  EAstObject.step,\n  EAstObject.steps,\n]\n\nexport const ParkinBailErrName = `ParkinBailError`\nexport const ParkinAbortErrName = `ParkinAbortError`","import type { TTokenOpts, EPartMatchTypes, TStepDef } from '../types'\nimport { uuid, emptyObj, hashString } from '@keg-hub/jsutils'\n\n\nconst cleanDefMatch = (match:string|RegExp) => {\n  let name = match.toString()\n  name[0] === '/' && (name = name.substring(1))\n  name[0] === '^' && (name = name.substring(1))\n  \n  name.charAt(name.length - 1) === '/' && (name = name.slice(0, -1))\n  name.charAt(name.length - 1) === '$' && (name = name.slice(0, -1))\n  \n  return name\n}\n\nexport const strToId = (str:string, prefix:string=``, postfix:string=``) => {\n  return `${prefix}${hashString(cleanDefMatch(str))}${postfix}`\n}\n\n/*\n * Extracts keywords from a text string\n * @function\n * @private\n *\n */\nexport const getRXMatch = (\n  line:string,\n  regex:RegExp,\n  index:number\n) => {\n  const matching = line.match(regex)[index]\n  return matching ? matching.trim() : ` `\n}\n\n/**\n * Sanitize the step definition text to be used as the name\n * @function\n * @private\n *\n */\nexport const sanitize = (def:TStepDef) => {\n  return cleanDefMatch(def.match).replace(/\\(\\?:([^\\|]+)+\\|+([^\\)]+)?\\)/, '$1')\n}\n\n/**\n * Ensures the definition does not already exist based on it's content\n * Also check the uuid, and updates it if needed\n * @function\n * @private\n *\n */\nexport const validateDefinition = (\n  definition:TStepDef,\n  definitions:TStepDef[]\n) => {\n  return definitions.reduce(\n    (validated, def, idx) => {\n      // Check if the checkDef already exists in the definitions array\n      // By comparing the content of the existing definitions to it\n      if (!validated || def.content === validated.content) return false\n\n      // Have to ensure no duplicate uuids, so use the index if there is a match \n      def.uuid === validated.uuid && (validated.uuid = `${validated.uuid}-${idx}`)\n\n      return validated\n    },\n    { ...definition }\n  )\n}\n\n/**\n * Remove single and double quotes from a string's starting and ending\n *\n */\nexport const removeQuotes = (arg:string) => {\n  return arg\n    .trim()\n    .replace(/^(\"|')/, '')\n    .replace(/(\"|')$/, '')\n}\n\n/**\n * Gets the starting white space of a string\n *\n */\nexport const getStartWhiteSpace = (line:string) => {\n  const noStartSpace = line.replace(/^\\s+/g, '')\n  const startLength = line.length - noStartSpace.length\n\n  return new Array(startLength).fill(` `).join('')\n}\n\n\n/**\n * Filters out types to include when getting regex parts\n * If includes array exists, it override the exclude array\n *  - So only items in the include array will be added, regardless of the exclude array\n * Otherwise the exclude array is used, and only items not in it will be used\n */\nexport const includePartType = (\n  type:EPartMatchTypes,\n  opts:TTokenOpts=emptyObj,\n  include?:EPartMatchTypes[],\n  exclude?:EPartMatchTypes[],\n) => {\n  const { include:oInclude, exclude:oExclude } = opts\n  const inArr = include || (Boolean(oInclude?.length) ? oInclude : undefined)\n  const exArr = exclude || (Boolean(oExclude?.length) ? oExclude : undefined)\n  \n  return !inArr && !exArr\n    ? true\n    : !inArr\n      ? !exArr.includes(type)\n      : inArr.includes(type)\n}\n","import { joinRegex } from '@keg-hub/jsutils'\n\nexport const RX_OPTIONAL = /\\w*\\([^)]*?\\)/\n\nexport const RX_ALT = /\\s*\\S*\\/\\S*\\s*/\n\nexport const RX_PARAMETER = /\\s*{(.*?)}\\s*/\n\n// @ts-ignore\nexport const RX_EXPRESSION = joinRegex(RX_PARAMETER, RX_OPTIONAL, 'g') as RegExp\n\nexport const RX_ANY = /(.*)/\n\nexport const RX_MATCH_REPLACE = /{|}/g\n\nexport const RX_DOUBLE_QUOTED = /\"([^\"\\\\]*(\\\\.[^\"\\\\]*)*)\"/\n\nexport const RX_SINGLE_QUOTED = /\\'([^\\'\\\\]*(\\\\.[^\\'\\\\]*)*)\\'/\n\nexport const RX_FLOAT = /-?[0-9]+[.][0-9]+/\n\nexport const RX_INT = /-?[0-9]+/\n\nexport const RX_WORLD = /^[\"]?\\$world\\.\\S+[\"]?/\n\nexport const RX_WORLD_REPLACE = /^\\$world\\./\n\nexport const RX_WORLD_MATCH = /(\\$:world|\\$world)+\\.[^\"'\\s]*/gm\n\nexport const RX_ALIAS = /^[\"]?\\$\\$\\S+[\"]?/\n\nexport const RX_ALIAS_REPLACE = /^\\$\\$/\n\nexport const RX_ALIAS_MATCH = /(\\$\\$:\\w+|\\$\\$\\w+)[^\"'\\s]*/gm\n","import {isStr} from '@keg-hub/jsutils'\nimport { ParkinAbortErrName, ParkinBailErrName } from '../constants'\nimport { EHookType, TRunResults } from '../types'\n\nconst resolveErrMsg = (error?:string|Error, maybe?:Error|string):[string, Error] => {\n  return isStr(error)\n    ? [error as string, maybe as Error]\n    : [((error || maybe) as Error)?.message, (error || maybe) as Error]\n}\n\nconst replaceStackMsg = (err:Error, msg:string) => {\n  const split = err.stack.split(`\\n`)\n  split[0] = msg\n\n  return split.join(`\\n`)\n}\n\nexport class ParkinError extends Error {\n  name = `ParkinError`\n  results?:TRunResults\n  testResults?:TRunResults\n\n  constructor(msg:string|Error, error?:string|Error|ParkinError, replaceStack:boolean=true){\n    const [message, err] = resolveErrMsg(msg, error)\n    const { stackTraceLimit } = Error\n    if(err && replaceStack){\n      // Create a new error without a stacktrace\n      Error.stackTraceLimit = 0\n    }\n\n    // Set the error cause if it's different form the message\n    const opts = err && message !== err?.message\n      ? { cause: err?.message }\n      : undefined\n\n    super(message, opts)\n\n    this.results = (err as ParkinError)?.results || []\n    this.testResults = (err as ParkinError)?.testResults || []\n\n    if((err as any)?.result && !this.results.includes((err as any).result))\n      this.results.push((err as any).result)\n\n    // Reset the original stacktrace limit\n    Error.stackTraceLimit = stackTraceLimit\n    this.name = this.constructor.name\n    \n    if(replaceStack){\n      if(err?.stack) this.stack = replaceStackMsg(err, message)\n      err && Error.captureStackTrace(err, this.constructor)\n    }\n  }\n}\n\nexport class ParkinBailError extends ParkinError {\n  name = ParkinBailErrName\n  constructor(msg:string|Error, error?:string|Error, replaceStack:boolean=true){\n    super(msg, error, replaceStack)\n  }\n}\n\nexport class ParkinAbortError extends ParkinError {\n  name = ParkinAbortErrName\n  constructor(msg:string|Error, error?:string|Error, replaceStack:boolean=true){\n    super(msg, error, replaceStack)\n  }\n}\n\nexport class RetryError extends Error {\n  results?:TRunResults\n  constructor(err:Error, message?:string, retry?:number) {\n    super(message || err.message)\n    this.stack = err.stack\n    // Only overwrite the default Error name when retry was actually set\n    // Keep custom named errors incase they are depended on\n    this.name = !retry ? err.name : this.constructor.name\n\n    if(message) this.cause = err.message\n    if((err as RetryError).results) this.results = (err as RetryError).results\n  }\n}\n\n/*\n * Helper method to use throw a Parkin Bail error\n * @function\n * @public\n * @throws\n *\n */\nexport const throwAbortError = (err?:Error) => {\n  throw new ParkinAbortError(\n    `Test execution \\x1b[33m\"aborted\"\\x1b[0m`,\n    err,\n    true\n  )\n}\n\n/*\n * Helper method to use throw a Parkin Bail error\n * @function\n * @public\n * @throws\n *\n */\nexport const throwBailError = (err:Error, bail?:number) => {\n  const colored = `\\x1b[33m${bail}\\x1b[0m`\n  throw new ParkinBailError(\n    `Stopping test execution. Max allowed failed${bail ? ` ${colored} ` : ` `}tests has been reached`,\n    err,\n    true\n  )\n}\n\nexport const throwExitOnFailed = (err:Error) => {\n  throw new ParkinBailError(\n    `Stopping test execution. A test failed and \\x1b[33m\"exitOnFailed\"\\x1b[0m is active`,\n    err,\n    true\n  )\n}\n\n/*\n * Helper method to use the a test method can not be found on the global scope\n * @function\n * @public\n * @throws\n *\n */\nexport const testMethodFill = (type:string) => {\n  /*\n   * Internal method that throws an error when a test method does not exist on the global scope\n   * @function\n   * @private\n   * @inner\n   *\n   */\n  return () => {\n    throw new ParkinError(\n      `` +\n        `Test method ${type} does not exist on the global scope.\\n` +\n        `Please ensure ${type} exists before calling the run method!\\n`\n    )\n  }\n}\n\n/**\n * Throws an error when a Steps class instance is not passed to the runner class constructor\n * @function\n * @public\n * @throws\n *\n */\nexport const throwMissingSteps = () => {\n  throw new ParkinError(\n    `Runner class constructor requires an instance of the Steps class`\n  )\n}\n\n/**\n * Throws an error when a Hooks class instance is not passed to the runner class constructor\n * @function\n * @public\n * @throws\n *\n */\nexport const throwMissingHooks = (found:any) => {\n  throw new ParkinError(\n    `Runner class constructor requires an instance of the Hooks class. Found: ${found}`\n  )\n}\n\n/**\n * Throws an error when a feature text is not passed to the Runner class instance\n * @function\n * @public\n * @throws\n *\n */\nexport const throwMissingFeatureText = () => {\n  throw new ParkinError(\n    `Runner class requires feature text when calling the run method`\n  )\n}\n\n/**\n * Throws an error when a feature step does not match a step definition\n * @function\n * @public\n * @throws\n *\n */\nexport const throwNoMatchingStep = (text:string) => {\n  throw new ParkinError(text)\n}\n\n/**\n * Throws an error when a registering a param type that already exists\n * @function\n * @public\n * @throws\n *\n */\nexport const throwParamTypeExists = (name:string) => {\n  throw new ParkinError(`Cannot register param type \"${name}\". It already exists!`)\n}\n\n/**\n * Throws an error when a assembling a parsed feature, and no parsed feature object exists\n * @function\n * @public\n * @throws\n * \n */\nexport const throwFeatureNotAnObj = (feature:any) => {\n  throw new ParkinError(`Assemble feature requires an object matching the feature model spec!`)\n}\n\n/**\n * Throws an error when a registering a param type that already exists\n * @function\n * @public\n * @throws\n *\n */\nexport const throwMissingWorldValue = (arg:string) => {\n  throw new ParkinError(\n    `Can not replace ${arg} with value from $world, it does not exist on the world object`,\n  )\n}\n\n/**\n * Throws an error when a registering an invalid hook type\n * @function\n * @public\n * @throws\n *\n */\nexport const throwInvalidHookType = (hookTypes:EHookType, type:string) => {\n  throw new ParkinError(\n    [\n      `Expected client hook type to be one of ', ${hookTypes}.`,\n      `Found: ${type}`,\n    ].join('\\n')\n  )\n}\n\n/**\n * Throws an error when running world replace on feature text content\n * @function\n * @public\n * @throws\n *\n */\nexport const throwWorldReplace = (err:Error, currentMatch:string) => {\n  throw new ParkinError(`Error replacing $world value in feature text. Current match was ${currentMatch}`, err)\n}\n\n/**\n * Throws an error when running world.alias replace on feature text content\n * @function\n * @public\n * @throws\n *\n */\nexport const throwAliasReplace = (err:Error, currentMatch:string) => {\n  throw new ParkinError(\n    `Error replacing $$alias ( $world.$alias ) in feature text. Current match was ${currentMatch}`,\n    err\n  )\n}\n","import type {\n  TAnyFunc,\n  TWorldConfig,\n  TTransformer,\n  TParamTypeMap,\n  TParamTypeModel,\n} from '../types'\n\nimport { constants } from '../constants'\nimport { removeQuotes } from '../utils/helpers'\nimport {\n  get,\n  isObj,\n  noOpObj,\n  toStr,\n  exists,\n  isQuoted,\n  checkCall,\n  equalsNaN,\n  joinRegex,\n} from '@keg-hub/jsutils'\n\nimport {\n  RX_ANY,\n  RX_INT,\n  RX_FLOAT,\n  RX_ALIAS,\n  RX_WORLD,\n  RX_DOUBLE_QUOTED,\n  RX_SINGLE_QUOTED,\n} from './patterns'\n\nimport { throwParamTypeExists, throwMissingWorldValue } from '../utils/errors'\n\nconst { WORLD_KEY, ALIAS_WORLD_KEY, ALIAS_REF } = constants\n\n/**\n * TODO: FIX-ME - The types are wrong for joinRegex\n * This force the correct type to avoid typescript warnings\n */\nconst mergeRegex = joinRegex as (...expressions: RegExp[]) => RegExp\n\n/**\n * Checks if the arg is a path to a value on the world object\n * If it is, it pulls the value from the world\n * @type {function}\n * @param {*} arg - Value to check if it's a world path\n * @param {object} $world - Parkin global world object\n *\n * @returns {*} Found value on the world object or undefined\n */\nconst checkWorldValue = (func:TAnyFunc, type:string):TTransformer => {\n  return (arg:string, $world?:TWorldConfig) => {\n    const hasWorldVal = arg.match(RX_WORLD)\n    const hasAliasVal = arg.match(RX_ALIAS)\n\n    // If not world value, just return func response\n    if (!isObj($world) || (!hasWorldVal && !hasAliasVal))\n      return matchType(func(arg, $world), type)\n\n    // Try to pull from world object\n    const worldVal = hasWorldVal\n      ? get($world, removeQuotes(arg).replace(`${WORLD_KEY}.`, ''))\n      : get(\n        $world,\n        removeQuotes(arg).replace(`${ALIAS_REF}`, `${ALIAS_WORLD_KEY}.`)\n      )\n\n    // If has a wold value, then return world value else thrown an error\n    return exists(worldVal)\n      ? matchType(worldVal, type)\n      : hasWorldVal\n        ? throwMissingWorldValue(arg)\n        : matchType(func(arg, $world), type)\n  }\n}\n\n/**\n * Checks if the val matches the type\n * If matching, returns val, else return null\n *\n */\nconst matchType = (val:any, type:string) => {\n  return typeof val === type ? val : null\n}\n\n/**\n * Default param type model used when registering param types\n * @type {Object}\n */\nconst typeModel = {\n  name: ``,\n  regex: ``,\n  partial: ``,\n  type: `string`,\n  useForSnippets: true,\n  preferForRegexpMatch: false,\n  transformer: checkWorldValue(arg => arg, `string`),\n}\n\n/**\n * Maps param types to function, for type conversion\n * Follows the default conversions for cucumber expressions\n * See https://cucumber.io/docs/cucumber/cucumber-expressions/\n * @type {Object}\n */\nconst __paramTypes:TParamTypeMap = {\n  any: {\n    ...typeModel,\n    name: `any`,\n    regex: RX_ANY,\n    partial: mergeRegex(RX_ANY, /{any}/, /{\\*}/),\n  },\n  word: {\n    ...typeModel,\n    name: `word`,\n    regex: RX_ANY as RegExp,\n    partial: mergeRegex(RX_ANY, /{word}/),\n    transformer: checkWorldValue(arg => {\n      return !isQuoted(arg) ? toStr(arg) : undefined\n    }, typeModel.type),\n  },\n  float: {\n    ...typeModel,\n    name: `float`,\n    type: `number`,\n    regex: RX_FLOAT,\n    partial: mergeRegex(RX_INT, /{float}/),\n    transformer: checkWorldValue(arg => {\n      const result = parseFloat(arg)\n      return equalsNaN(result) ? undefined : result\n    }, `number`),\n  },\n  int: {\n    ...typeModel,\n    name: `int`,\n    type: `number`,\n    regex: RX_INT,\n    partial: mergeRegex(RX_INT, /{int}/, /{number}/),\n    transformer: checkWorldValue(arg => {\n      const result = parseInt(arg)\n      return equalsNaN(result) || arg.includes(`.`) ? undefined : result\n    }, `number`),\n  },\n  string: {\n    ...typeModel,\n    name: `string`,\n    regex: mergeRegex(RX_DOUBLE_QUOTED, RX_SINGLE_QUOTED),\n    partial: mergeRegex(RX_DOUBLE_QUOTED, RX_SINGLE_QUOTED, /{string}/),\n    transformer: checkWorldValue(arg => {\n      return isQuoted(arg) ? removeQuotes(arg) : undefined\n    }, typeModel.type),\n  },\n}\n\n/**\n * Get the registered __paramTypes\n * @function\n * @public\n * @export\n *\n * @return {Object} Registered param types\n */\nexport const getParamTypes = () => __paramTypes\n\n/**\n * Register custom types following the typeModel object\n * See https://cucumber.io/docs/cucumber/cucumber-expressions/ for more info\n * Wraps the transformer method in the checkWorldValue HOF\n * @function\n * @public\n * @export\n *\n * @return {Object} Registered param types\n */\nexport const registerParamType = (\n  model:TParamTypeModel = noOpObj as TParamTypeModel,\n  key:string=model.name\n) => {\n  if (__paramTypes[key]) return throwParamTypeExists(key)\n\n  // Build the new type joining with the default\n  __paramTypes[key] = { ...typeModel, ...model }\n\n  // Wrap the transformer in the world value check helper\n  __paramTypes[key].transformer = checkWorldValue(\n    __paramTypes[key].transformer,\n    __paramTypes[key].type\n  )\n\n  return __paramTypes\n}\n\n/**\n * Converts the found matching values into the correct types\n * Using transformer methods of the matched paramType names\n * @function\n * @public\n * @export\n * @param {Array<string>} matches - All found dynamic arguments\n * @param {Array<function>} transformers - Matching paramTypes by index\n * @param {Object} $world - Global parkin world object\n *\n * @returns {Array<*>} Matches converted into the correct type\n */\nexport const convertTypes = (\n  matches:string[],\n  transformers:TParamTypeModel[],\n  $world:TWorldConfig\n) => {\n  return matches\n    .map((item, i) => {\n      const paramType = transformers[i] || __paramTypes.any\n      return checkCall(paramType.transformer, item, $world)\n    })\n    .filter(exists)\n}\n","import type {\n  TStepDef,\n  TFindOpts,\n  TTokenOpts,\n  TRegExFoundResp,\n} from '../types'\n\nimport { EPartMatchTypes } from '../types'\nimport { getParamTypes } from './paramTypes'\nimport { includePartType } from '../utils/helpers'\nimport { emptyArr, isStr, emptyObj, getWordEndingAt } from '@keg-hub/jsutils'\nimport { RX_OPTIONAL, RX_ALT, RX_PARAMETER, RX_MATCH_REPLACE } from './patterns'\n\n\n/**\n * Finds a matching definition from passed in regex\n * Then extracts the variables from the text to pass to the definitions method\n * @function\n * @public\n * @export\n *\n */\nexport const matchRegex = (\n  definition:TStepDef,\n  text:string\n):TRegExFoundResp => {\n\n  const match = text.match(new RegExp(definition.match))\n\n  // Which is the original string\n  return match\n    ? { definition, match: match.slice(1, match.length).filter(Boolean) }\n    : emptyObj\n}\n\n/**\n * Converts an optional expression into regex\n *\n * @example\n * toAlternateRegex('test(s)')\n * result: '(test|tests)'\n *\n */\nexport const toAlternateRegex = (optional:string) => {\n  const split = optional.split(/(\\(|\\))/)\n  const start = split.shift()\n  const end = split.pop()\n  const middle = split.join(``)\n  const original = optional.replace(/(\\(|\\))/ig, `\\\\$1`)\n\n  if (start === '' && end === '') return `(${original}|${optional.replace(/(\\(|\\))/gi, ``)})?`\n  else if (start === '') return `(${original}|${middle}|${middle}${end})`\n  else if (end === '') return `(${original}|${start}|${start}${middle})`\n  else return `(${original}|${start}${end}|${start}${middle}${end})`\n}\n\n/**\n * Gets the full text around an optional\n *\n */\nconst getFullOptionalText = (matchArr:RegExpMatchArray) => {\n  const text = matchArr.input\n  const precedingWord = getWordEndingAt(text, matchArr.index)\n  return precedingWord + matchArr[0]\n}\n\n/**\n * Helper for `getParamRegex` to get the optional types regex\n * Return the correct regex source text for a definition optional part\n * This regex will be used for matching values in the feature step text\n *\n */\nconst getOptionalRegex = (matchArr:RegExpMatchArray) => {\n  const optionalText = getFullOptionalText(matchArr)\n  return toAlternateRegex(optionalText)\n}\n\n/**\n * Returns regex source for a given parameter type\n *\n */\nexport const getParamRegex = (\n  type:string,\n  partial:boolean\n) => {\n  const params = getParamTypes()\n  const spec = params[type] || params.any\n  const refEx = partial && spec.partial ? spec.partial : spec.regex\n\n  return isStr(refEx) ? refEx : refEx.source\n}\n\n/**\n * Gets the right regex for an alternate part\n *\n */\nexport const getAlternateRegex = (value:string) => {\n  return `(${value.trim().replace(/\\//g, '|')})`\n}\n\n/**\n * Helper for `parseMatch` that gets the right regex for a step's dynamic contents\n *\n */\nconst getMatchRegex = (\n  type:string,\n  matchArr:RegExpMatchArray,\n  opts?:TFindOpts\n) => {\n  const [ val, paramType ] = matchArr\n\n  switch (type) {\n  case EPartMatchTypes.parameter:\n    return new RegExp(getParamRegex(paramType, opts?.partial))\n  case EPartMatchTypes.optional:\n    return new RegExp(getOptionalRegex(matchArr))\n  case EPartMatchTypes.alternate:\n    return new RegExp(getAlternateRegex(val))\n  default:\n    return null\n  }\n}\n\n/**\n * Formats the regex match result into an object, with some computed values\n *\n */\nconst parseMatch = (\n  matchArr:RegExpMatchArray,\n  type:string = 'other',\n  opts?:TFindOpts\n) => {\n  const val = matchArr[0]\n\n  // Get the real start index by removing the start white space\n  const trimmed = val.trimStart()\n\n  // Then calculate the difference and add it to the match index\n  const diff = val.length - trimmed.length\n\n  return {\n    text: val.trim(),\n    input: matchArr.input,\n    index: matchArr.index + diff,\n    regex: getMatchRegex(type, matchArr, opts),\n    type,\n    ...(type === EPartMatchTypes.parameter && {\n      paramType: val.trim().replace(RX_MATCH_REPLACE, ''),\n    }),\n  }\n}\n\n/**\n * Extracts all the dynamic parts to a definition's match text\n *\n * @example\n * const parts = getRegexParts('I eat {int} apple(s)')\n * result:\n * [\n *  { type: EPartMatchTypes.parameter, text: '{int}', regex: /-?[0-9]+/, paramType: 'int', ... } ,\n *  { type: EPartMatchTypes.optional, text: 'apple(s)', regex: /(apple|apples)/, ... } ,\n * ]\n *\n */\nexport const getRegexParts = (defMatcher:string, opts:TTokenOpts=emptyObj) => {\n\n  const { include, exclude } = opts\n  const inArr = Boolean(include?.length) ? include : undefined\n  const exArr = Boolean(exclude?.length) ? exclude : undefined\n\n  const parameters = includePartType(EPartMatchTypes.parameter, opts, inArr, exArr)\n    ? [...defMatcher.matchAll(new RegExp(RX_PARAMETER, 'gi')),]\n        .map((match) => parseMatch(match, EPartMatchTypes.parameter, opts))\n    : emptyArr\n\n  const optionals = includePartType(EPartMatchTypes.optional, opts, inArr, exArr)\n    ? [...defMatcher.matchAll(new RegExp(RX_OPTIONAL, 'gi'))]\n        .map(match => parseMatch(match, EPartMatchTypes.optional, opts))\n    : emptyArr\n\n  const alts = includePartType(EPartMatchTypes.alternate, opts, inArr, exArr)\n    ? [...defMatcher.matchAll(new RegExp(RX_ALT, 'gi'))]\n        .map(match => parseMatch(match, EPartMatchTypes.alternate, opts))\n    : emptyArr\n\n  // sort matched expressions by their index in the text\n  const sortedExpressions = [ ...parameters, ...optionals, ...alts ]\n    .sort((matchA, matchB) => matchA.index - matchB.index)\n\n  return sortedExpressions\n}\n","import type { TTokenOpts, TStepDef } from '../types'\n\n\nimport { getRegexParts } from './regex'\nimport { EPartMatchTypes } from '../types'\nimport { includePartType } from '../utils/helpers'\nimport { joinRegex, emptyObj } from '@keg-hub/jsutils'\n\nimport {\n  RX_INT,\n  RX_ALT,\n  RX_FLOAT,\n  RX_OPTIONAL,\n  RX_SINGLE_QUOTED,\n  RX_DOUBLE_QUOTED,\n  RX_PARAMETER,\n} from './patterns'\n\nexport type TMatchTokens = {\n  type:string\n  match:string\n  index:number\n  defIndex:number\n}\n\nconst tokenRegex = joinRegex(\n  RX_INT,\n  RX_FLOAT,\n  RX_ALT,\n  RX_OPTIONAL,\n  RX_PARAMETER,\n  RX_DOUBLE_QUOTED,\n  RX_SINGLE_QUOTED,\n  'g' as unknown as RegExp\n) as unknown as RegExp\n\nexport const tokenizeStep = (\n  step:string,\n  def:TStepDef,\n  opts:TTokenOpts=emptyObj\n) => {\n\n  /**\n   * By default all part types are included\n   * Can use the `opts.include` || `opts.exclude`\n   * To get parts of a specific type\n   */\n  const parts = getRegexParts(def.match as string, opts)\n  const tokens:TMatchTokens[] = []\n\n  let idx:number=0\n  let match:RegExpExecArray\n\n  while((match = tokenRegex.exec(step)) !== null) {\n\n    const part = parts[idx]\n    if(!part) continue\n\n    const [val] = match\n\n    if(!includePartType(part.type, opts)) continue\n\n    const trimmed = val.trimStart()\n    const diff = val.length - trimmed.length\n\n    tokens.push({\n      match: val.trim(),\n      defIndex: part?.index,\n      index: match.index + diff,\n      type: part?.paramType\n        || part?.type\n        || EPartMatchTypes.other,\n    })\n    idx++\n  }\n\n  return tokens\n}\n","import type { TRequire, TModule, TJasmine } from '../types'\n\nimport { checkCall, noOpObj, noOp } from '@keg-hub/jsutils'\n\n/**\n * Helpers to ensure the right code is run in the right environments\n * @function\n * @export\n * @public\n *\n * @returns {Boolean} True if a global object exists\n */\nexport const hasWindow = Boolean(typeof window !== 'undefined')\nexport const hasGlobal = Boolean(typeof global !== 'undefined')\nexport const hasModule = Boolean(typeof module === 'object')\nexport const hasRequire = Boolean(typeof require === 'function')\nexport const hasJasmine = Boolean(\n  hasGlobal && typeof global.jasmine !== 'undefined'\n)\n\n/**\n * Resolve the jasmine object if it exists\n * @function\n * @export\n * @public\n *\n */\nexport const resolveJasmine = ():TJasmine =>\n  hasJasmine ? checkCall(() => global.jasmine as unknown as TJasmine) : { getEnv: () => noOpObj, testPath: `` }\n\n/**\n * Resolve the module object if it exists\n * @function\n * @export\n * @public\n *\n */\nexport const resolveModule = ():TModule =>\n  hasModule ? checkCall(() => module) : { exports: {} }\n\n/**\n * Resolve the require function if it exists\n * @function\n * @export\n * @public\n *\n */\nexport const resolveRequire = ():TRequire =>\n  hasRequire ? checkCall(() => require) : noOp\n\n/**\n * Resolve the global object based on if the window or global objects exit\n * @function\n * @export\n * @public\n *\n */\nexport const resolveGlobalObj = ():Record<any, any> => {\n  try {\n    return hasWindow\n      ? checkCall(() => window)\n      : hasGlobal\n        ? checkCall(() => global)\n        : noOpObj\n  }\n  catch (err) {\n    return noOpObj\n  }\n}\n","import type {\n  TStepDef,\n  TFindOpts,\n  TWorldConfig,\n  TNoExtMatchResp\n} from '../types'\n\nimport {\n  matchRegex,\n  getRegexParts,\n  getParamRegex,\n  toAlternateRegex,\n  getAlternateRegex,\n} from './regex'\n\nimport {\n  RX_OPTIONAL,\n  RX_ALT,\n  RX_EXPRESSION,\n  RX_MATCH_REPLACE,\n  RX_PARAMETER,\n} from './patterns'\n\nimport { EPartMatchTypes } from '../types'\nimport { hasWindow } from '../utils/globalScope'\nimport { emptyObj, isFunc } from '@keg-hub/jsutils'\nimport { getParamTypes, convertTypes } from './paramTypes'\n\n/**\n * Escapes a string so it can be converted into a regular expression\n * Ensures special chars are escaped, a string with \".\" in it will be replaced with \"\\.\"\n * @function\n * @private\n * @param {string} str - Step match text to be escaped\n *\n * @return {string} Escaped string to allow converting into a regular expression\n */\nconst escapeStr = (str:string) => {\n  return hasWindow\n    ? str.replace(/[|\\\\[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d')\n    : str.replace(/[|\\\\[\\]^$+*?.]/g, '\\\\$&')\n}\n\n/**\n * Replace the passed in matcher string with the passed in replaceWith data based on the testRx\n * @function\n * @private\n * @param {string} match - Step match text from feature scenario\n * @param {string} testRx - Regular expression to find matching text within the matcher text\n * @param {string|function} replaceWith - Data to replace the matched data with\n *                                        Automatically called when it's function\n *\n * @return {string} match string with matched content replaced with regex\n */\nconst runRegexCheck = (\n  matcher:string,\n  testRx:RegExp,\n  replaceWith:string|((match:any) => any)\n) => {\n  if (!testRx.test(matcher)) return matcher\n\n  const matchLength = matcher.length\n\n  // Set the default regex match\n  let regexStr = matcher\n\n  // Replace any expressions with regex, and convert the param types\n  // @ts-ignore\n  matcher.replaceAll(testRx, (...args:any[]) => {\n    const idx = args[3]\n    const match = args[0].trim()\n\n    /**\n      * Because the regexStr length is changed each time a match is replaced\n      * We can't use the original index of the match in the match-string\n      * Instead, get the difference between the current regexStr and the original match length\n      * Then add it to the idx to get the updated index\n      */\n    const newIdx = idx + (regexStr.length - matchLength)\n\n    /**\n     * Using the updated idx, slice and split on the match value\n     * This gives us an array of strings, split on any string match the match value \n     * Next get the start of the string up to the new index\n     *\n     *\n     * Looks like this:\n       * match = \"When I type {string} into {string}\"\n     *\n     *\n     * 1st iteration:\n       * SPLIT:\n            startStr     |  startSl  |     replace     |      endSl\n         \"When I type \"  |     \"\"    |  <1st-replace>  |  [\"into \", \"\"]\n       *\n       * ADDED\n         - \"When I type \" + \"\" + <1st-replace> + [\"into \", \"\"].join(\"{string}\")\n         - regexStr === \"When I type <1st-replace> into {string}\"\n     *\n     *\n     * 2nd iteration:\n       * SPLIT:\n                  startStr                 |  startSl  |     replace    |  endSl\n        \"When I type <1st-replace> into \"  |    \"\"     |  <2nd-replace> |  [\"\"]\n       *\n       * ADDED\n         - \"When I type <1st-replace> into \" + \"\" + <2nd-replace> + [\"\"].join(\"{string}\")\n         - regexStr === \"When I type <1st-replace> into <2nd-replace>\"\n      */\n\n    // Split on match here, then join on match later\n    // This will remove the first instance found of the match from the string\n    const [startSl, ...endSl] = regexStr.slice(newIdx).split(match)\n    const startStr = regexStr.slice(0, newIdx)\n\n    const replace = isFunc(replaceWith)\n      ? replaceWith.apply(null, args)\n      : replaceWith\n\n    regexStr = `${startStr}${startSl}${replace}${endSl.join(match)}`\n\n  })\n\n  return regexStr\n}\n\n/**\n * Find all expressions in the match string, and convert them into into regex\n * @function\n * @private\n *\n */\nconst convertToRegex = (\n  match:string,\n  opts:TFindOpts=emptyObj\n) => {\n  const paramTypes = getParamTypes()\n  const transformers = []\n  const regex = runRegexCheck(\n    match,\n    RX_EXPRESSION,\n    (val, ...args) => {\n      // Get the expression type\n      const type = val.trim().replace(RX_MATCH_REPLACE, '')\n      const isParameter = val.match(RX_PARAMETER)\n      const isOptional = val.match(RX_OPTIONAL)\n\n      // Add the transformer for the type to the transformers array\n      isParameter && transformers.push(paramTypes[type] || paramTypes.any)\n      // Return the regex\n      return isParameter\n        ? getParamRegex(type, opts?.partial)\n        : isOptional\n          ? toAlternateRegex(val)\n          : val\n    }\n  )\n  return { regex, transformers }\n}\n\n/**\n * Find all alternate syntax in the match string, and convert them into into regex\n * @function\n * @private\n *\n */\nconst checkAlternative = (match:string) => {\n  const altIndexes = []\n  const regex = runRegexCheck(\n    match,\n    new RegExp(RX_ALT, 'g'),\n    // Use a non-capture group to allow matching, but don't include in the results (?:)\n    getAlternateRegex\n  )\n\n  return { regex, altIndexes }\n}\n\n/**\n * Adds regex anchors to the ends of the regex string, if it needs them\n */\nconst checkAnchors = (str:string) => {\n  let final = str\n  if (!str.startsWith('^')) final = '^' + final\n  if (!str.endsWith('$')) final += '$'\n\n  return { regex: final }\n}\n\n/**\n * Extracts the dynamic gherkin-expression parameters from the text,\n * given the step matcher template and the fullMatchResults\n * @param {string} text\n * @param {RegExp} stepMatcher\n * @param {Array} wordMatches - matches for the {word} params\n */\nexport const extractParameters = (\n  text:string,\n  stepMatcher:string,\n  wordMatches:string[],\n  opts:TFindOpts=emptyObj\n) => {\n  // Gets an array of each dynamic element of the step match text,\n  // including: params (e.g. {float}), optionals (e.g. test(s))\n  // and alternate text (e.g. required/optional)\n  const parts = getRegexParts(stepMatcher)\n\n  const expectedParamLength = parts.filter(\n    part => part.type === EPartMatchTypes.parameter\n  ).length\n\n  // extract the params from the text, using the parts array\n  const result = parts.reduce(\n    (state, part) => {\n      const { params, textIndex, wordMatchIndex } = state\n\n      // look at the section of the text we haven't already evaluated\n      const substring = text.substring(textIndex)\n\n      const isWord = part.paramType === 'word'\n      const partMatch = substring.match(part.regex)\n      const wordMatch = {\n        0: wordMatches[wordMatchIndex],\n        index: substring.indexOf(wordMatches[wordMatchIndex]),\n      }\n\n      // if matching a param {word}, then use the wordMatch, because\n      // it contains all the {word} matches properly\n      const match = isWord ? wordMatch : partMatch\n      if (!match) return state\n\n      // add the matched parameter if the current part is a param and a match exists\n      part.type === EPartMatchTypes.parameter && match && params.push(match[0])\n\n      return {\n        params,\n\n        // increment text index so that we don't reevaluate the same text in future iterations\n        textIndex: textIndex + (match && match.index + match[0].length),\n\n        // increment match index so we don't repeat a word in future iterations\n        wordMatchIndex: wordMatchIndex + (isWord && 1),\n      }\n    },\n    { params: [], textIndex: 0, wordMatchIndex: 0 }\n  )\n\n  return (opts.partial || expectedParamLength === result.params.length)\n    ? result.params\n    : null\n}\n\n/**\n * Converts the passed in definition.match string into regex\n * Then matches the passed in text string with the converted regex string\n * @function\n * @public\n * @export\n *\n */\nexport const findAsRegex = (\n  definition:TStepDef,\n  text:string,\n  opts:TFindOpts=emptyObj\n) => {\n  const escaped = escapeStr(definition.match as string)\n  const { regex: regexAlts } = checkAlternative(escaped)\n  const { transformers, regex: regexConverted } = convertToRegex(regexAlts, opts)\n  const { regex: regexAnchors } = checkAnchors(regexConverted)\n\n  // Then call the regex matcher to get the content\n  const found = matchRegex(\n    { ...definition, match: regexAnchors },\n    text,\n  )\n\n  return {\n    found,\n    escaped,\n    regexAlts,\n    transformers,\n    regexAnchors,\n    regexConverted,\n  }\n}\n\n/**\n * Finds a matching definition from the passed in expression text\n * Then extracts the variables from the text to pass to the definitions method\n * Converts expression strings into regex then calls the matchRegex method\n * @function\n * @public\n * @export\n *\n * @returns - Found matching definition and matched arguments\n *  - form: { definition, match: Array of Arguments to pass to definitions function }\n */\nexport const matchExpression = (\n  definition:TStepDef,\n  text:string,\n  $world?:TWorldConfig,\n  opts:TFindOpts=emptyObj\n) => {\n  // If it's an exact match, then no variables can exist\n  // So we can short circuit and return the definition\n  if (definition.match === text) return { definition, match: [] }\n\n  const { found, transformers } = findAsRegex(definition, text, opts)\n\n  // If no found definition or match, return an empty object\n  if (!found || !found.definition || !found.match) return emptyObj\n\n  // get all the parameters, without any type coercion\n  const params = extractParameters(\n    text,\n    definition.match as string,\n    found.match,\n    opts\n  )\n\n\n  if (!params) return emptyObj\n\n  // Convert the found variables into their type based on the mapped transformers\n  const converted = convertTypes(params, transformers, $world)\n\n  // If the conversion fails, and no variable or not enough variables are returned,\n  // Then assume the type does not match, so the step does not match.\n  // Otherwise return the matched definition, and the converted variables\n  return converted.length !== params.length\n    ? emptyObj as TNoExtMatchResp\n    : { definition, match: converted } as TNoExtMatchResp\n}\n","import type {\n  TStepDef,\n  TFindOpts,\n  TTokenOpts,\n  TStepDefsArr,\n  TWorldConfig,\n  TNoExtMatchResp\n} from '../types'\nimport type { Parkin } from '../parkin'\n\nimport { constants } from '../constants'\nimport { tokenizeStep } from './tokens'\nimport { emptyObj, emptyArr } from '@keg-hub/jsutils'\nimport { matchRegex, getRegexParts } from './regex'\nimport { getParamTypes, registerParamType } from './paramTypes'\nimport { findAsRegex, extractParameters, matchExpression } from './expression'\n\nconst { REGEX_VARIANT } = constants\n\n/**\n * Class for accessing matcher methods and param types\n * <br/>Gives access to underlying matcher methods to be called directly\n */\nexport class Matcher {\n \n  parkin:Parkin\n  options:TFindOpts=emptyObj\n  \n  constructor(parkin?:Parkin, options?:TFindOpts){\n    this.parkin = parkin\n    this.options = options\n  }\n\n  /**\n   * Finds a matching step definitions form the passed in text\n   * If no options are passed;\n   * All definition expression must be replaced in text\n   * @member {Matcher}\n   *\n   */\n  find = (\n    text:string,\n    definitions?:TStepDefsArr,\n    $world?:TWorldConfig,\n    opts?:TFindOpts\n  ) => {\n    const defs = definitions\n      || this.parkin?.steps?.list?.()\n      || emptyArr\n\n    const world = $world\n      || this?.parkin?.world\n      || { $alias: {} } as TWorldConfig\n\n    return matcher(defs, text, world, opts || this.options)\n  }\n\n  /**\n   * Finds a matching step definitions form the passed in text\n   * Defaults partial option to true, to allow finding partial matches\n   * @member {Matcher}\n   *\n   */\n  search = (\n    text:string,\n    opts:TFindOpts={ partial: true }\n  ) => this.find(text, undefined, undefined, opts)\n\n  parts = (defMatchStr:string, opts?:TTokenOpts) => getRegexParts(\n    defMatchStr,\n    opts || this.options\n  )\n\n  extract = (\n    text:string,\n    stepMatcher:string,\n    wordMatches:string[],\n    opts?:TFindOpts\n  ) => extractParameters(\n    text,\n    stepMatcher,\n    wordMatches,\n    opts || this.options\n  )\n\n  expression = (\n    def:TStepDef,\n    text:string,\n    $world?:TWorldConfig,\n    opts:TFindOpts=emptyObj\n  ) => matchExpression(\n    def,\n    text,\n    $world || this?.parkin?.world,\n    opts || this.options\n  )\n\n  stepTokens = (\n    step:string,\n    def:TStepDef,\n    opts?:TTokenOpts\n  ) => tokenizeStep(\n    step,\n    def,\n    opts || this.options\n  )\n\n  expressionFind = (\n    def:TStepDef,\n    text:string,\n    opts:TFindOpts=emptyObj\n  ) =>  findAsRegex(\n      def,\n      text,\n      opts || this.options\n  )\n\n  regex = matchRegex\n  types = getParamTypes\n  register = registerParamType\n}\n\n/**\n * Finds a matching registered definition from the passed in definitions and text\n * Treats all non-regex step variants as expressions\n * @function\n * @public\n */\nexport const matcher = (\n  definitions:TStepDefsArr,\n  text:string,\n  $world:TWorldConfig,\n  opts:TFindOpts=emptyObj\n) => {\n\n  if(!text.trim()) return emptyObj as TNoExtMatchResp\n\n  const defLength = definitions.length\n\n  /**\n   * TODO: investigate how to improve this to speed it up\n   * Currently loops through all steps until the correct one is found\n   * See if there's a way to filter which defs are looked at based on the step text\n   */\n  for (let idx = 0; idx < defLength; idx++) {\n    const definition = definitions[idx]\n\n    if(!definition.match) continue\n    const found = definition.variant !== REGEX_VARIANT\n      ? matchExpression(definition, text, $world, opts) as TNoExtMatchResp\n      : matchRegex(definition, text) as TNoExtMatchResp\n\n    if(found.match) return found as TNoExtMatchResp\n  }\n\n   return emptyObj as TNoExtMatchResp\n}\n","import type { TWorldConfig } from '../types'\n\nimport { constants } from '../constants'\nimport { get, isFunc, exists } from '@keg-hub/jsutils'\nimport { throwWorldReplace, throwAliasReplace } from './errors'\nimport {\n  RX_WORLD_MATCH,\n  RX_ALIAS_MATCH,\n  RX_ALIAS_REPLACE,\n  RX_WORLD_REPLACE,\n} from '../matcher/patterns'\nconst {\n  ALIAS_REF,\n  WORLD_REF,\n  ALIAS_WORLD_KEY,\n  WORLD_AT_RUNTIME,\n  ALIAS_REF_AT_RUNTIME,\n} = constants\n\n/**\n * Attempts to replace the matching content with location data from the world object\n * If the value is a function, the function is called\n * Otherwise the existing value ise used\n * If nothing exists at the location, the original match is returned\n *\n */\nconst attemptReplace = (\n  match:string,\n  world:TWorldConfig,\n  location:string\n) => {\n  const replaceWith = get(world, location)\n  return isFunc(replaceWith)\n    ? replaceWith(world, location)\n    : exists(replaceWith)\n      ? replaceWith\n      : match\n}\n\n/**\n * Finds all matching $$alias strings in the passed in text\n * Then replaces them with content from the world.$alias object\n * If the world.$alias value does not exist, the text is left as is\n * If there is text matching `$$:alias`, the `:` is removed\n * This allows variables in step definitions to be replaced at run time\n *\n */\nexport const aliasReplace = (text:string, world:TWorldConfig) => {\n  // Track the current match, for extra information if the replace throws\n  let currentMatch:string\n  try {\n    return text.replace(RX_ALIAS_MATCH, match => {\n      currentMatch = match\n      const cleaned = match.trim()\n\n      // ALIAS_REF ( $$ ) requires adding an extra `$` when doing the replace\n      // This is because the $ char has a special function in the string.replace method\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n      const replaced =\n        cleaned.indexOf(ALIAS_REF_AT_RUNTIME) === 0\n          ? cleaned.replace(ALIAS_REF_AT_RUNTIME, `$${ALIAS_REF}`)\n          : attemptReplace(\n              match,\n              world,\n              cleaned.replace(RX_ALIAS_REPLACE, `${ALIAS_WORLD_KEY}.`)\n            )\n\n      return replaced\n    })\n  }\n  catch (err) {\n    throwAliasReplace(err, currentMatch)\n  }\n}\n\n/**\n * Finds all matching $world strings in the passed in text\n * Then replaces them with content from the world object\n * If the world value does not exist, the text is left as is\n * If there is text matching `$:world`, the `:` replaced as `$world`\n * This allows variables in step definitions to be replaced at run time\n *\n */\nexport const worldReplace = (text:string, world:TWorldConfig) => {\n  // Track the current match, for extra information if the replace throws\n  let currentMatch\n  // Wrapped in a try/catch because\n  // Errors are swallowed inside the text.replace function for some reason\n  try {\n    return text.replace(RX_WORLD_MATCH, match => {\n      currentMatch = match\n      const cleaned = match.trim()\n\n      return cleaned.indexOf(WORLD_AT_RUNTIME) === 0\n        ? cleaned.replace(WORLD_AT_RUNTIME, WORLD_REF)\n        : attemptReplace(match, world, cleaned.replace(RX_WORLD_REPLACE, ''))\n    })\n  }\n  catch (err) {\n    throwWorldReplace(err, currentMatch)\n  }\n}\n\n/**\n * Helper to call aliasReplace, and worldReplace in a single call\n *\n */\nexport const replaceWorld = (text:string, world:TWorldConfig) => {\n  return worldReplace(aliasReplace(text, world), world)\n}\n","import type { Steps } from '../steps'\nimport type { TStepDef } from '../types'\n\nimport { EStepType } from '../types'\n\n/**\n * Join all step types together into a single array\n * @function\n * @private\n *\n */\nexport const joinAllDefs = (instance:Steps):TStepDef[] => {\n  return instance.types.reduce(\n    (stepDefs, type:EStepType) => stepDefs.concat(instance[`_${type}`]),\n    []\n  )\n}\n","import type {\n  TStepDef,\n  TStepMeta,\n  TStepDefMethod,\n} from '../types'\n\n\nimport { EStepType } from '../types'\nimport { constants } from '../constants'\nimport { capitalize, noOpObj } from '@keg-hub/jsutils'\nimport { strToId, sanitize, validateDefinition } from '../utils/helpers'\n\nconst { REGEX_VARIANT, EXPRESSION_VARIANT } = constants\n\n/**\n * Builds the text content of a step definition call\n * @function\n * @private\n *\n */\nconst getContent = (def:TStepDef) => {\n  const match =\n    def.variant === REGEX_VARIANT ? def.match.toString() : `\"${def.match}\"`\n\n  return `${capitalize(def.type)}(${match}, ${def.method.toString()})`\n}\n\nconst stringToRegex = (str:string) => {\n  const main = str.match(/\\/(.+)\\/.*/)[1]\n  const options = str.match(/\\/.+\\/(.*)/)[1]\n\n  return new RegExp(main, options)\n}\n\n/**\n * Registers a step definition by type\n * @function\n * @private\n *\n */\nexport const registerFromCall = function (\n  internalType:EStepType,\n  type:EStepType,\n  match:string,\n  method:TStepDefMethod,\n  meta:TStepMeta = noOpObj\n) {\n  \n  const variant = match.toString().indexOf('/') === 0 ? REGEX_VARIANT : EXPRESSION_VARIANT\n  const formattedMatch = variant === REGEX_VARIANT\n    ? stringToRegex(match.toString())\n    : match.toString()\n\n  const definition:Partial<TStepDef> = {\n    type,\n    meta,\n    method,\n    variant,\n    tokens: [],\n    match: formattedMatch,\n  }\n\n  definition.name = sanitize(definition as TStepDef)\n  definition.content = getContent(definition as TStepDef)\n  definition.uuid = strToId(definition.name, `def-`)\n\n  const definitions = this.list()\n  const newDefinition = validateDefinition(definition as TStepDef, definitions)\n\n  newDefinition && this[internalType].push(newDefinition)\n\n  return newDefinition\n}\n","import type { Steps } from '../steps'\nimport type {\n  TTempContainer,\n  TTempRegisterArgs,\n} from '../types'\n\nimport { EStepMethodType } from '../types'\n\n/**\n * Helper method to wrap the default register method of a step definition\n * Allows capturing the definition when it's registered\n * Contains only newly registered definitions, NOT all definitions\n * @function\n * @private\n *\n */\nexport const tempRegister = (\n  parent:Steps,\n  type:EStepMethodType,\n  container:TTempContainer\n) => {\n  /**\n   * Captures a registered step definition and adds it the the container object\n   * @function\n   * @internal\n   *\n   */\n  return (...args:TTempRegisterArgs) => {\n    const definition = parent[type](...args)\n    container[type].push(definition)\n\n    return definition\n  }\n}\n","import type {\n  TStepDef,\n  TTempContainer,\n} from '../types'\n\n\nimport { tempRegister } from './tempRegister'\nimport { EStepMethodType, EStepType } from '../types'\nimport { capitalize, eitherArr } from '@keg-hub/jsutils'\nimport {\n  resolveModule,\n  resolveRequire,\n  resolveGlobalObj,\n} from '../utils/globalScope'\n\n\n/**\n * Registers a parsed step definition object\n * @function\n * @private\n * @param {Array|string} definitions - Array of strings or single string\n *                                     of the text content form a definition file\n *\n * @returns {void}\n */\nexport const registerFromParse = function (definitions:string|string[]) {\n  // TRegisterArgs\n  // Ensures a consistent index due to being an array\n  const DEF_TYPES:EStepMethodType[] = this.types.map((type:EStepType) => capitalize(type))\n\n  // Build a container for holding the newly added definitions\n  // Looks like the object below\n  // { Given: [], When: [], Then: [], But: [], And: [] }\n  const container = DEF_TYPES.reduce((built:TTempContainer, type) => {\n    built[type] = []\n    return built\n  }, {} as TTempContainer)\n\n  // Loop over the passed in definitions\n  eitherArr<string[]>(definitions, [definitions]).map(definition => {\n    // Create a dynamic function calling the definition\n    // The definition should be a call to a global Given, When, Then methods\n    // Which is comes from the tempRegister method for each type\n    Function(`return (global, require, module, ${DEF_TYPES.join(',')}) => {\n          return (function(global) { ${definition} }).call(global, global)\n        }`)()(\n      // Pass in the global object so we can bind the dynamic function to it\n      // Allows referencing values on the global scope directly\n      // For example myGlobalFunction() instead of window.myGlobalFunction()\n      resolveGlobalObj(),\n      resolveRequire(),\n      resolveModule(),\n      // Call the tempRegister for each type,\n      // Then spread the response as arguments to the dynamic function\n      ...DEF_TYPES.map(type => tempRegister(this, type, container))\n    )\n  })\n\n  // Return the container which should now hold all newly registered definitions ONLY\n  return container\n}\n","import type {\n  TStepAst,\n  TStepDef,\n  TStepMeta,\n  TStepDefs,\n  TMatchResp,\n  TAddStepDefs,\n  TWorldConfig,\n  TStepDefMethod,\n  TMatchRespExt,\n  TStepResolveOpts,\n} from './types'\n\nimport { EStepType } from './types'\nimport { matcher } from './matcher'\nimport { constants } from './constants'\nimport { replaceWorld } from './utils/worldReplace'\nimport { validateDefinition } from './utils/helpers'\nimport { throwNoMatchingStep } from './utils/errors'\nimport { isArr, capitalize, isStr, ensureArr } from '@keg-hub/jsutils'\nimport { joinAllDefs, registerFromParse, registerFromCall } from './definitions'\n\nconst { STEP_TYPES } = constants\n\ntype TRegisterArgs = [\n  string|TStepDef[]|TStepDef,\n  string,\n  string,\n  TStepDefMethod,\n  TStepMeta|undefined\n]\n\n/**\n * Allows registering step definition matchs and functions\n * Which are used to map to steps of a parsed feature file\n * @class\n * @public\n *\n */\nexport class Steps {\n\n  _world:TWorldConfig\n\n  /**\n   * Allowed step definition types\n   * @memberof Steps\n   * @type {Array}\n   * @private\n   */\n  types:EStepType[] = STEP_TYPES\n\n\n  constructor(world:TWorldConfig={ $alias: {} }) {\n    this._world = world\n\n    const self = this\n    /**\n     * Creates helpers for registering step definitions by type\n     * @memberof Steps\n     * @function\n     * @public\n     * @example\n     * const steps = new Steps({})\n     * steps.Given(`text`, ()=> {})\n     *\n     */\n    this.types.map((type:EStepType) => {\n      const internalType = `_${type}`\n      this[internalType] = []\n      this[capitalize(type)] = (match:string, method:TStepDefMethod, meta:TStepMeta) => {\n        return self.register(internalType, type, match, method, meta)\n      }\n    })\n  }\n\n  /**\n   * Gets a list of all step definitions registered with the parkin instance\n   * @memberof Steps\n   * @function\n   * @public\n   *\n   */\n  list = () => {\n    return joinAllDefs(this)\n  }\n\n  /**\n   * Gets a list of all step definitions registered with the parkin instance\n   * @memberof Steps\n   * @function\n   * @public\n   *\n   */\n  typeList = ():TStepDefs => {\n    return this.types.reduce((stepDefs, type) => {\n      const internalType = `_${type}`\n      stepDefs[type] = [...this[internalType]]\n      return stepDefs\n    }, {} as TStepDefs)\n  }\n\n  /**\n   * Finds a matching step definition from the passed in text\n   * Steps must be registered with this instance to be found\n   * @memberof Steps\n   * @function\n   * @public\n   *\n   */\n  match = (text:string, step?:TStepAst, options?:TStepResolveOpts) => {\n    // Join all step types together when finding a match\n    // Treat all step definition types as the same when matching to step text\n    const list = this.list()\n\n    // TODO: when adding refs to other features / steps to run\n    // Here would be a good place to start\n    // Could parse the text, looking for a $ref to other steps to run\n    // If found, then run those steps instead\n\n    // Call the matcher to find a matching step definition\n    const found = matcher(\n      list,\n      replaceWorld(text, this._world),\n      this._world\n    )\n\n    // If no matching step definition exists, then return false\n    if (!found.match || !found.definition) return false\n\n    // Add the Step instance's world to the match arguments\n    // Always added as the last argument\n    const extObj:TMatchRespExt = { step, world: this._world }\n\n    // If the doc and table exist, add them to the extObj\n    step?.doc && (extObj.doc = step?.doc)\n    step?.table && (extObj.table = step?.table)\n    options && (extObj.options = options)\n\n    found.match.push(extObj)\n\n    return found as TMatchResp\n  }\n\n  /**\n   * Finds a matching step definition from the passed in list and text can calls it\n   * This is the method the actually calls a step definition function\n   * @memberof Steps\n   * @function\n   * @public\n   *\n   */\n  resolve = (text:string, step?:TStepAst, options?:TStepResolveOpts) => {\n    // Try to find a step definition match to the passed in text\n    const found = this.match(text, step, options)\n\n    // If found, call the step function passing the match array as arguments\n    // Otherwise throw a no match error\n    return found\n      ? found.definition.method(...found.match)\n      : throwNoMatchingStep(\n        `Matching definition could not be found for step: \"${text}\"`\n      )\n  }\n\n  /**\n   * Registers a step definition by type based on passed in args\n   * @memberof Steps\n   * @function\n   * @public\n   *\n   */\n  register = (...args:TRegisterArgs) => {\n    return isStr(args[0])\n      ? registerFromCall.apply(this, args)\n      : registerFromParse.apply(this, args)\n  }\n\n\n  add = (...defs:TAddStepDefs[]) => {\n    const definitions = this.list()\n    defs.forEach(def => {\n      const defsObj = isArr(def) || (def?.match && def?.uuid)\n        ? ensureArr(def)\n        : def\n\n      Object.values(defsObj)\n        .map(def => {\n          if(!def.type) return console.warn(`A definition type is required when adding a definition`, def)\n\n          const internalType = `_${def.type}`\n          const newDefinition = validateDefinition(def, definitions)\n          newDefinition && this[internalType].push(newDefinition)\n        })\n    })\n  }\n\n  /**\n   * Clears out all registered step definitions for all types\n   * @memberof Steps\n   * @function\n   * @public\n   *\n   */\n  clear = () => {\n    this.types.map(type => (this[`_${type}`] = []))\n  }\n}\n","import type { Parkin } from './parkin'\nimport type { TWorldConfig } from './types'\n\nimport { EHookType } from './types'\nimport { constants } from './constants'\nimport { throwInvalidHookType } from './utils/errors'\nimport { isFunc, noPropArr, noOp } from '@keg-hub/jsutils'\n\nconst { HOOK_TYPES } = constants\n\ntype THookMethod = (parkin:Parkin) => void|Promise<void>\ntype TRegisteredHooks = Record<EHookType, THookMethod[]>\ntype THookFactory = (clientHookFn:THookMethod) => void\n\n/**\n * Allows registering hook functions, which are then called when\n * the runner runs a feature\n * @class\n * @public\n *\n */\nexport class Hooks {\n\n  afterAll:THookFactory=noOp\n  beforeAll:THookFactory=noOp\n  afterEach:THookFactory=noOp\n  beforeEach:THookFactory=noOp\n\n  /**\n   * Allowed hook types\n   * @memberof Hooks\n   * @type {Array}\n   * @private\n   */\n  private types:EHookType[] = HOOK_TYPES\n\n  /**\n   * Parkin instance the hooks are tied to\n   * @memberof Hooks\n   * @type {Object}\n   * @private\n   */\n  instance:Parkin = undefined\n\n  private  _registeredHooks:TRegisteredHooks = {} as TRegisteredHooks\n\n  constructor(world:TWorldConfig, instance:Parkin) {\n    this.instance = instance\n\n    /**\n     * Creates helpers for registering hooks\n     * @memberof Hooks\n     * @function\n     * @public\n     * @example\n     * const hooks = new Hooks()\n     * hooks.beforeAll(() => setupEnvironment())\n     *\n     */\n    this.types.map((type:EHookType) => {\n      this[type] = (clientHookFn:THookMethod) => {\n        if (!isFunc(clientHookFn)) return\n        this._registeredHooks[type] = this._registeredHooks[type] || []\n        this._registeredHooks[type].push(clientHookFn)\n      }\n    })\n  }\n\n  /**\n   * Gets the registered hook callback method based on the passed in type\n   */\n  getRegistered = (type:EHookType) => {\n    const foundHooks = this.types.includes(type)\n      ? this._registeredHooks[type] || noPropArr as THookMethod[]\n      : throwInvalidHookType(HOOK_TYPES.join(', '), type)\n\n    if(!foundHooks) return\n\n    return foundHooks.length\n      ? async () => {\n          return foundHooks.reduce(async (toResolve, hook) => {\n            await toResolve\n            return await hook(this.instance)\n          }, Promise.resolve())\n        }\n      : noOp\n  }\n}\n","import {eitherArr, emptyArr, isArr, isStr} from \"@keg-hub/jsutils\"\n\n/**\n * @return {Array<string>?} A match of all words starting with '@', the tag indicator.\n * Returns false if input is invalid.\n */\nexport const parseTags = (tags?:string|string[]):string[] => {\n  const parsed = isStr(tags)\n    ? tags.match(/([@](\\w|-)*)/g)\n    : isArr<string>(tags)\n      ? tags\n      : emptyArr\n\n  return parsed.filter(tag => isStr(tag) && tag.startsWith(`@`) && tag.length > 2)\n}\n\n/**\n * Check if one of the passed in item tags exists within the compare tags\n * Returns `true` if at least 1 tag form the item tags is in the compare tags\n * Otherwise returns `false`\n */\nexport const hasTag = (\n  itemTags:string|string[]=emptyArr,\n  compareTags:string|string[]=emptyArr\n) => {\n\n  const iTags = isStr(itemTags)\n    ? parseTags(itemTags)\n    : eitherArr<string[]>(itemTags, [])\n\n  const cTags = isStr(compareTags)\n    ? parseTags(compareTags)\n    : eitherArr<string[]>(compareTags, [])\n\n  return Boolean(cTags.find((cTag) => iTags.includes(cTag)))\n}","import type {\n  TParentAst\n} from \"../types\"\n\nimport { EStepType, EAstObject } from \"../types\"\n\n\nexport type TIdFromLoc<T> = {\n  index:number|string\n  parent:T|TParentAst\n  type:EAstObject|EStepType|string\n}\n\nexport const idFromIdx = <\nT extends Record<`uuid`, string>=TParentAst|Record<`uuid`, string>\n>(props:TIdFromLoc<T>) => {\n  const {\n    type,\n    index,\n    parent,\n  } = props\n\n  return `${parent.uuid}.${type}.${index}`\n}\n","import type {\n  TStepAst,\n  TStepParentAst,\n} from '../types'\n\nimport { EStepType } from '../types'\nimport { idFromIdx } from './idFromIdx'\nimport { getRXMatch, getStartWhiteSpace } from '../utils/helpers'\n\nconst RX_STEP = /^\\s*Step\\s*(.*)$/\nconst RX_GIVEN = /^\\s*Given\\s*(.*)$/\nconst RX_WHEN = /^\\s*When\\s*(.*)$/\nconst RX_THEN = /^\\s*Then\\s*(.*)$/\nconst RX_AND = /^\\s*And\\s*(.*)$/\nconst RX_BUT = /^\\s*But\\s*(.*)$/\nconst RX_ASTERISK = /^\\s*\\*\\s*(.*)$/\nconst RX_DOC_QUOTES = /^\\s*?\"\"\"\\s*?/\nconst RX_DOC_QUOTES_FULL = /^\\s*?\"\"\"(\\s*?|.*?)*?\"\"\"/gm\nconst RX_DOC_TICKS = /^\\s*?```\\s*?/\nconst RX_DOC_TICKS_FULL = /^\\s*?```(\\s*?|.*?)*?```/gm\nconst RX_DATA_TABLE = /^\\s*?\\|/\nconst RX_DATA_TABLE_FULL = /^\\s*?\\|([^\\S\\r\\n]*?|.*)\\|/gm\n\n/**\n * Regular expressions and types for matching step keywords\n * @type {Array}\n * @private\n */\nconst RegStepItems = [\n  { regex: RX_STEP, type: EStepType.step },\n  { regex: RX_GIVEN, type: EStepType.given },\n  { regex: RX_WHEN, type: EStepType.when },\n  { regex: RX_THEN, type: EStepType.then },\n  { regex: RX_AND, type: EStepType.and },\n  { regex: RX_BUT, type: EStepType.but },\n  { regex: RX_ASTERISK, type: EStepType[`*`] },\n]\n\n/**\n * Check for a data table in the in the steps content\n * The string should be passed to the step def as the last argument\n * Each line of the data stable should be split in to arguments separated by |\n * @function\n * @private\n *\n * @todo Implement data table parsing\n *\n */\nconst checkDataTable = (\n  step:TStepAst,\n  lines:string[],\n  line:string,\n  index:number\n) => {\n  if (!RX_DATA_TABLE.test(line)) return step\n\n  let tableEnd\n\n  step.table = {\n    index,\n    content: lines.reduce((table, ln) => {\n      tableEnd = tableEnd || !RX_DATA_TABLE.test(ln)\n      !tableEnd &&\n        table.push(\n          ln.split('|').reduce((row, item) => {\n            const column = item.trim()\n            column && row.push(column)\n\n            return row\n          }, [])\n        )\n\n      return table\n    }, []),\n  }\n\n  return step\n}\n\n/**\n * Check for doc strings in the steps\n * The string should be passed to the step def as the last argument\n * Space inside the doc string should be left as is\n * @function\n * @private\n *\n * @todo Implement doc string parsing\n *\n */\nconst checkDocString = (\n  step:TStepAst,\n  lines:string,\n  line:string,\n  index:number\n) => {\n  let docMatch = RX_DOC_QUOTES.test(line) && '\"\"\"'\n  docMatch = docMatch || (RX_DOC_TICKS.test(line) && '```')\n\n  if (!docMatch) return step\n\n  // Get the white space leading up to the doc-string identifier\n  // Create a regex white space chars to remove the same amount of white space\n  // from the start of each line relative to the doc-string identifier\n  // See here for more info => https://cucumber.io/docs/gherkin/reference/\n  const whiteSpace = line.split(docMatch)[0]\n  const spacer = new Array(whiteSpace.length).fill('\\\\s')\n    .join('')\n  const spacerRegex = new RegExp(`^${spacer}`)\n\n  step.doc = {\n    index,\n    whiteSpace,\n    type: docMatch === `\"\"\"` ? `quote` : `tick`,\n    // Split the passed in lines on the matching doc-string identifier\n    // Then pull the second element from the array\n    // Which is the content between the opening and closing doc-string identifiers\n    // Then split it into an array single lines, and remove the starting white-space\n    content: lines\n      .split(docMatch)\n      .slice(1)\n      .shift()\n      .trim()\n      .split('\\n')\n      .reduce((cleaned, ln) => {\n        cleaned.push(ln.replace(spacerRegex, '').trim())\n        return cleaned\n      }, [])\n      .join('\\n'),\n  }\n\n  return step\n}\n\n/*\n * Helper factory function to build a step object\n * @function\n * @private\n *\n */\nconst stepFactory = (\n  parent:TStepParentAst,\n  type:EStepType,\n  stepText:string,\n  lines:string[],\n  line:string,\n  index:number\n) => {\n  let step = {\n    type,\n    index,\n    step: stepText,\n    whitespace: getStartWhiteSpace(line),\n    uuid: idFromIdx({\n      type,\n      parent,\n      index: parent?.steps?.length || 0\n    }),\n  } as TStepAst\n\n  // TODO: Need to add check if next line is empty of a comment\n  // If it is, then need to go to line after that\n  // And use that line for checking data tables and dock strings\n  // Otherwise this will fail unless the table or doc comes directly after the step\n  const nextIndex = index + 1\n  const nextLine = lines[nextIndex]\n  const afterLines = lines.slice(nextIndex)\n\n  step = checkDataTable(step, afterLines, nextLine, nextIndex)\n  step = checkDocString(step, afterLines.join('\\n'), nextLine, nextIndex)\n\n  return step\n}\n\n/**\n * Checks each step tag type, and adds it to current scenario when it exists\n * @function\n *\n */\nexport const parseStep = (\n  parent:TStepParentAst,\n  lines:string[],\n  line:string,\n  index:number\n) => {\n  const stepParent = parent as TStepParentAst\n\n  return RegStepItems.reduce((added:TStepAst, regItems) => {\n    // If the line was already added, just return\n    if (added) return added\n\n    // Check if the line is a step tag\n    const hasStep = regItems.regex.test(line)\n    if(!hasStep) return added\n\n    const step = stepFactory(\n      parent,\n      regItems.type,\n      getRXMatch(line, regItems.regex, 1),\n      lines,\n      line,\n      index\n    )\n    \n    stepParent.steps.push(step)\n\n    return step\n  }, undefined)\n}\n","import type { TTagsAst } from '../types'\n\nimport { EAstObject } from '../types'\nimport { strToId, getRXMatch, getStartWhiteSpace } from '../utils/helpers'\n\n/**\n * Regular expressions for matching feature file keywords\n * @type {object}\n */\nconst RX_TAG = /^\\s*@(.*)$/\n\n/**\n * Parses the content as an array of tags\n * Then builds and returns a Tags Ast \n */\nconst tagsFactory = (\n  index:number,\n  content:string,\n  line:string\n) => {\n  const tokens = content.split(` `).reduce((acc, item) => {\n    const token = item.trim()\n    token.startsWith(`@`) && acc.push(token)\n    return acc\n  }, [])\n\n  const joined = tokens.join(` `)\n\n  return {\n    index,\n    tokens,\n    content: joined,\n    type: EAstObject.tags,\n    uuid: strToId(joined, `tags-`),\n    whitespace: getStartWhiteSpace(line),\n  } as TTagsAst\n}\n\n/*\n * Checks for feature file meta-data\n * @function\n *\n */\nexport const checkTags = (\n  line:string,\n  index:number\n) => {\n  if (!RX_TAG.test(line)) return undefined\n\n  const tags = getRXMatch(line, RX_TAG, 0)\n\n  // Join the tags with the tagParents current tags\n  const tagsBlock = tagsFactory(index, tags, line)\n  tagsBlock.whitespace = getStartWhiteSpace(line)\n\n  return tagsBlock\n}\n","import type { TFeatureAst, TRuleAst, TBackgroundAst, TScenarioAst, TBlockParentAst } from '../types'\n\n/**\n * Regular expressions for matching feature file keywords\n * @type {object}\n */\n\nconst RX_FEATURE = /^\\s*Feature:(.*)$/\nconst RX_RULE = /^\\s*Rule:(.*)$/\nconst RX_SCENARIO = /^\\s*Scenario:(.*)$/\nconst RX_EXAMPLE = /^\\s*Example:(.*)$/\nconst RX_BACKGROUND = /^\\s*Background:(.*)$/\n\n/**\n * Determine the active parent base on the line to be evaluated\n * If a new parent is not found, then returns the current activeParent\n * @function\n *\n */\nexport const setActiveParent = (\n  activeParent:TBlockParentAst,\n  feature:TFeatureAst,\n  rule:TRuleAst,\n  scenario:TScenarioAst,\n  background:TBackgroundAst,\n  line:string\n) => {\n  return RX_SCENARIO.test(line) || RX_EXAMPLE.test(line)\n    ? scenario\n    : RX_FEATURE.test(line)\n      ? feature\n      : RX_RULE.test(line)\n        ? rule\n        : RX_BACKGROUND.test(line)\n          ? background\n          : activeParent\n}\n","import type { TFeatureAst, TRuleAst } from '../types'\n\nimport { EAstObject } from '../types'\nimport { idFromIdx } from './idFromIdx'\nimport { getRXMatch, getStartWhiteSpace } from '../utils/helpers'\n\n/**\n * Regular expressions for matching feature file keywords\n * @type {object}\n */\nconst RX_RULE = /^\\s*Rule:(.*)$/\n\n/*\n * Helper factory function to build a rule object\n * @function\n *\n */\nexport const ruleFactory = (\n  rule:string|false,\n  feature?:TFeatureAst,\n  index?:number\n) => {\n  const type = EAstObject.rule\n  const loc = feature?.rules?.length || 0\n  \n  return {\n    type,\n    rule,\n    index,\n    scenarios: [],\n    ...(rule && feature && { uuid: idFromIdx({ index: loc, type, parent: feature })}),\n  } as TRuleAst\n}\n\n\n/**\n * Check for new feature scenario, and add scenario to feature object\n * @function\n *\n */\nexport const ensureRule = (\n  feature:TFeatureAst,\n  rule:TRuleAst,\n  line:string,\n  index:number\n):TRuleAst => {\n  // Check for \"Rule:\" keyword\n  if (!RX_RULE.test(line)) return rule\n\n  // Get text after the \"Rule:\" key word\n  let ruleText = getRXMatch(line, RX_RULE, 1)\n\n  // The initial rule is created with out the rule text\n  // So check here if it should be added, or create a new rule\n  !rule.rule ? (rule.rule = ruleText) : (rule = ruleFactory(ruleText, feature, index))\n\n  // Ensure the line index is added\n  !rule.index && (rule.index = index)\n\n  !rule.uuid\n    && (rule.uuid = idFromIdx({\n        parent: feature,\n        type: rule.type,\n        index: feature?.rules?.length || 0,\n      }))\n\n  // Get the start whitespace, used when assembling the feature\n  rule.whitespace = getStartWhiteSpace(line)\n\n  // Add the rule if needed to the current feature\n  !feature.rules.includes(rule)\n    && feature.rules.push(rule)\n\n  return rule\n}\n","import { EAstObject, TFeatureAst } from '../types'\n\n\nexport const parseError = (\n  feature:TFeatureAst,\n  type:EAstObject,\n  index:number,\n  message?:string\n) => {\n  feature.errors = feature.errors || []\n  feature.errors.push({\n    type,\n    index,\n    content: message || `Failed to parse ${type}`\n  })\n}","import type { TFeatureAst } from '../types'\n\nimport { EAstObject } from '../types'\nimport { parseError } from './parseError'\nimport { strToId, getRXMatch } from '../utils/helpers'\n\n/**\n * Regular expressions for matching feature file keywords\n * @type {object}\n */\nconst RX_FEATURE = /^\\s*Feature:(.*)$/\nconst RX_HAS_FEATURE = /\\s*Feature:(.*)/\n\n/*\n * Helper factory function to build a feature object\n * @function\n *\n */\nexport const featureFactory = (\n  feature:string|false,\n  content:string,\n  index?:number\n) => {\n  return {\n    index,\n    content,\n    feature,\n    rules: [],\n    empty: [],\n    reason: [],\n    comments: [],\n    scenarios: [],\n    type: EAstObject.feature,\n    ...(feature && { uuid: strToId(feature, `feature-`) })\n  } as TFeatureAst\n}\n\n\n/**\n * Check for new feature, or add feature text to current feature\n * @function\n *\n */\nexport const ensureFeature = (\n  featuresGroup:TFeatureAst[],\n  feature:TFeatureAst,\n  line:string,\n  content:string,\n  index:number\n) => {\n\n  // Ensure feature text exists\n  const hasFeature = Boolean(feature.feature || RX_HAS_FEATURE.test(content))\n\n  // If no feature text is found, or the feature already has errors\n  // Then don't continue to parse the feature\n  if(!hasFeature || feature?.errors?.length){\n    !feature?.errors?.length\n      && parseError(feature, EAstObject.feature, index, `Could not find Feature text in file`)\n\n    !featuresGroup.includes(feature)\n      && featuresGroup.push(feature)\n\n    return feature\n  }\n\n  // Check for Feature: keyword text\n  if (!RX_FEATURE.test(line)) return feature\n\n  // Get the text from the line\n  const featureText = getRXMatch(line, RX_FEATURE, 1)\n\n  // If the text was not yet added, then add it\n  // Then ensure the feature was added to the full group\n  if (!feature.feature) {\n    feature.feature = featureText\n\n    // Ensure the index is added if needed\n    if (!feature.index) feature.index = index\n    if (!feature.uuid) feature.uuid = strToId(feature.feature, `feature-`)\n\n    !featuresGroup.includes(feature) && featuresGroup.push(feature)\n\n    return feature\n  }\n\n  // Otherwise create a new feature, with the feature text and content\n  const builtFeature = featureFactory(featureText, content, index)\n  featuresGroup.push(builtFeature)\n\n  return builtFeature\n}\n\n","import type {\n  TRuleAst,\n  TFeatureAst,\n  TScenarioAst,\n  TScenarioParentAst\n} from '../types'\n\nimport { idFromIdx } from './idFromIdx'\nimport { exists } from '@keg-hub/jsutils'\nimport { EAstObject, EFeatureTypes } from '../types'\nimport { getRXMatch, getStartWhiteSpace } from '../utils/helpers'\n\n/**\n * Regular expressions for matching feature file keywords\n * @type {object}\n */\nconst RX_SCENARIO = /^\\s*Scenario:(.*)$/\nconst RX_EXAMPLE = /^\\s*Example:(.*)$/\n\n/*\n * Helper factory function to build a scenario object\n * @function\n *\n */\nexport const scenarioFactory = (\n  scenario:string|false,\n  parent?:TScenarioParentAst,\n  index?:number\n) => {\n  const type = EAstObject.scenario\n  const loc = parent?.scenarios?.length || 0\n\n  return {\n    type,\n    index,\n    scenario,\n    steps: [],\n    ...(scenario && parent && { uuid: idFromIdx({ index: loc, type, parent })}),\n  } as TScenarioAst\n}\n\n\n/**\n * Check for new feature scenario, and add scenario to feature object\n * @function\n *\n */\nexport const ensureScenario = (\n  feature:TFeatureAst,\n  rule:TRuleAst,\n  scenario:TScenarioAst,\n  line:string,\n  index:number\n) => {\n\n  // Check for \"Scenario:\" or \"Example:\" keywords\n  const hasScenario = RX_SCENARIO.test(line)\n  const hasExample = RX_EXAMPLE.test(line)\n  if (!hasScenario && !hasExample) return scenario\n\n  // Check for \"Scenario:\", if not found then check for \"Example:\"\n  const scenarioText = hasScenario\n    ? getRXMatch(line, RX_SCENARIO, 1)\n    : getRXMatch(line, RX_EXAMPLE, 1)\n\n\n  // Check if the scenario text was already added, and add it if needed\n  // Otherwise create a new scenario with the scenario text\n  !exists(scenario.scenario)\n    ? (scenario.scenario = scenarioText)\n    : (scenario = scenarioFactory(scenarioText, undefined, index))\n\n  // Ensure the line index is added\n  !scenario.index && (scenario.index = index)\n\n  // Get the start whitespace, used when assembling the feature\n  scenario.whitespace = getStartWhiteSpace(line)\n\n  // If Example keyword is used, set the alias\n  if(!hasScenario) scenario.alias = EFeatureTypes.Example\n\n  // Check if rule has a uuid\n  // And if the scenario whitespace is more then the rule\n  // In that case add it to the rule\n  // Otherwise add it to the feature \n  const parent = rule.uuid && scenario.whitespace > rule.whitespace\n    ? rule\n    : feature\n\n  // Add the uuid from the scenario text if it doesn't exist\n  !scenario.uuid\n    && (scenario.uuid = idFromIdx({\n        parent,\n        type: scenario.type,\n        index: parent?.scenarios?.length || 0,\n      }))\n\n  !parent.scenarios.includes(scenario)\n    && parent.scenarios.push(scenario)\n\n  return scenario\n}","import type {\n  TRuleAst,\n  TFeatureAst,\n  TBackgroundAst,\n  TBackgroundParentAst,\n} from '../types'\n\nimport { EAstObject } from '../types'\nimport { idFromIdx } from './idFromIdx'\nimport { isStr, isBool } from '@keg-hub/jsutils'\nimport { getRXMatch, getStartWhiteSpace } from '../utils/helpers'\n\n/**\n * Regular expressions for matching feature file keywords\n * @type {object}\n */\nconst RX_BACKGROUND = /^\\s*Background:(.*)$/\n\n\n/*\n * Helper factory function to build a background object\n * @function\n * @private\n *\n */\nexport const backgroundFactory = (\n  background:string|false,\n  parent?:TBackgroundParentAst,\n  index?:number\n) => {\n  const type = EAstObject.background\n\n  return {\n    type,\n    index,\n    steps: [],\n    background,\n    ...(background && parent && { uuid: idFromIdx({ index: 0, type, parent })}),\n  } as TBackgroundAst\n}\n\n/**\n * Check for background in a feature, These steps should run before all steps of a scenario\n * Should be added to each scenario, where a background exists in the feature\n * @function\n * @private\n *\n */\nexport const ensureBackground = (\n  feature:TFeatureAst,\n  rule:TRuleAst,\n  background:TBackgroundAst,\n  line:string,\n  index:number\n) => {\n  if (!RX_BACKGROUND.test(line)) return background\n\n  // Get text after the \"Background:\" key word\n  const existingBgText = getRXMatch(line, RX_BACKGROUND, 1)\n\n  // Generate the background text from the parent uuid and background keyword\n  // background's don't have a text title, so we have to generate one when parsing\n  const parent = rule?.uuid ? rule : feature\n  const backgroundText = isStr(existingBgText) ? existingBgText.trim() : ''\n\n  // The initial background is created with out the background text\n  // So check here if it should be added, or create a new background\n  isBool(background.background)\n    ? (background.background = backgroundText)\n    : (background = backgroundFactory(backgroundText, parent, index))\n\n  !background.index && (background.index = index)\n  !background.uuid\n    && (background.uuid = idFromIdx({\n        parent,\n        index: 0,\n        type: background.type\n      }))\n\n  // Get the start whitespace, used when assembling the feature\n  background.whitespace = getStartWhiteSpace(line)\n\n  parent.background = background\n\n  return background\n}\n","import type { TFeatureAst, TBlockAst } from '../types'\n\nimport { EAstObject } from '../types'\nimport { idFromIdx } from './idFromIdx'\nimport { eitherArr } from '@keg-hub/jsutils'\nimport { getRXMatch, getStartWhiteSpace } from '../utils/helpers'\n\n/**\n * Regular expressions for matching feature file keywords\n * @type {object}\n */\nconst RX_AS = /^\\s*As (.*)$/\nconst RX_COMMENT = /^\\s*#(.*)$/\nconst RX_I_WANT = /^\\s*I want (.*)$/\nconst RX_SO_THAT = /^\\s*So that (.*)$/\nconst RX_IN_ORDER = /^\\s*In order (.*)$/\n\n\n/**\n * Regular expressions and types for matching feature meta data keywords\n * @type {Array}\n * @private\n */\nconst featureMetaItems = [\n  { regex: RX_AS, key: EAstObject.perspective },\n  { regex: RX_I_WANT, key: EAstObject.desire },\n  { regex: RX_SO_THAT, key: EAstObject.reason },\n  { regex: RX_IN_ORDER, key: EAstObject.reason },\n]\n\n\n/*\n * Helper function to add reason text to a feature when it exists\n * @function\n * @private\n *\n */\nconst addReason = (\n  feature:TFeatureAst,\n  reason:string,\n  line:string,\n  index:number\n) => {\n  if(!reason) return\n\n  const reasonArr = eitherArr<TBlockAst[]>(feature.reason, [feature.reason])\n  reasonArr.push({\n    index,\n    content: reason,\n    type: EAstObject.reason,\n    whitespace: getStartWhiteSpace(line),\n    uuid: idFromIdx({\n      index: 0,\n      parent: feature,\n      type: EAstObject.reason,\n    }),\n  })\n  feature.reason = reasonArr\n}\n\n/**\n * Checks for feature descriptive content\n * @function\n * @private\n * @param {Object} feature - Current feature being parsed into an object\n * @param {string} line - Current line being parsed\n *\n * @return {boolean} - True if a line was added to the current feature object\n */\nexport const featureMeta = (\n  feature:TFeatureAst,\n  line:string,\n  index:number\n) => {\n  let metaAdded = false\n  featureMetaItems.reduce((added, regItem) => {\n    if (added) return added\n\n    const hasItem = regItem.regex.test(line)\n    if (!metaAdded && hasItem) metaAdded = true\n\n    const type = regItem.key === EAstObject.desire\n      ? EAstObject.desire\n      : regItem.key === EAstObject.perspective\n        ? EAstObject.perspective\n        : EAstObject.block\n\n    return hasItem\n      ? regItem.key !== EAstObject.reason\n        ? (feature[regItem.key] = {\n            type,\n            index,\n            whitespace: getStartWhiteSpace(line),\n            content: getRXMatch(line, regItem.regex, 0),\n            uuid: idFromIdx({\n              type,\n              index: 0,\n              parent: feature,\n            }),\n          })\n        : addReason(feature, getRXMatch(line, regItem.regex, 0), line, index)\n      : hasItem\n  }, false)\n\n  return metaAdded\n}\n\n/*\n * Checks for feature file comments\n * @function\n *\n */\nexport const featureComment = (\n  feature:TFeatureAst,\n  line:string,\n  index:number\n) => {\n  if (!RX_COMMENT.test(line)) return false\n\n  // const comment = getRXMatch(line, RX_COMMENT, 1)\n  // Don't use getRXMatch because we want to include the \"#\" for the comment\n  // Instead trim the whitespace afterwards\n  const comment = line.match(RX_COMMENT)[0]\n\n  feature.comments.push({\n    index,\n    content: comment.trim(),\n    type: EAstObject.comment,\n    whitespace: getStartWhiteSpace(line),\n    uuid: idFromIdx({\n      parent: feature,\n      type: EAstObject.comment,\n      index: feature.comments?.length || 0\n    }),\n  })\n\n  return true\n}\n\n/*\n * Checks for empty lines in a feature file\n * @function\n *\n */\nexport const featureEmptyLine = (\n  feature:TFeatureAst,\n  line:string,\n  index:number\n) => {\n  if(line.trim().length) return false\n\n  feature.empty.push({\n    index,\n    content: line,\n    whitespace: ``,\n    type: EAstObject.empty,\n    uuid: idFromIdx({\n      parent: feature,\n      type: EAstObject.empty,\n      index: feature.empty?.length || 0\n    }),\n  })\n\n  return true\n}","import type {\n  TTagsAst,\n  TFeatureAst,\n  TWorldConfig,\n  TBlockParentAst,\n  TParseFeatureOpts,\n} from '../types'\n\nimport { parseStep } from './parseStep'\nimport { checkTags } from './checkTags'\nimport { emptyObj, exists } from '@keg-hub/jsutils'\nimport { setActiveParent } from './setActiveParent'\nimport { replaceWorld } from '../utils/worldReplace'\nimport { ruleFactory, ensureRule } from './ensureRule'\nimport { featureFactory, ensureFeature } from './ensureFeature'\nimport { scenarioFactory, ensureScenario } from './ensureScenario'\nimport { backgroundFactory, ensureBackground } from './ensureBackground'\nimport { featureEmptyLine, featureComment, featureMeta } from './ensureMeta'\n\n/**\n * Regular expressions for matching feature file keywords\n * @type {object}\n */\nconst RX_NEWLINE = /\\r?\\n/g\n\nconst defWorld = { $alias: {} }\n\nconst resolveArgs = (\n  pWorld:TWorldConfig,\n  world?:TWorldConfig,\n  options?:TParseFeatureOpts\n) => {\n  const isOpts = !options\n    && !world?.$alias\n    && exists(world?.worldReplace)\n  \n  return {\n    worldCfg: isOpts ? pWorld : world,\n    opts: isOpts ? world : (options || emptyObj as TParseFeatureOpts),\n  }\n}\n\n/**\n * Parses a feature files text content into an object\n * @function\n * @public\n * @export\n *\n */\nexport const parseFeature = function (\n  text:string,\n  world?:TWorldConfig,\n  options?:TParseFeatureOpts\n):TFeatureAst[] {\n\n  const { opts, worldCfg } = resolveArgs(\n    this ? this.world : defWorld,\n    world,\n    options\n  )\n\n  const features:TFeatureAst[] = []\n\n  const replaceText = opts?.worldReplace === false\n    ? (text || '').toString()\n    : replaceWorld((text || '').toString(), worldCfg)\n\n  const lines = replaceText.split(RX_NEWLINE)\n\n  let parseError = false\n  let feature = featureFactory(false, text)\n  let rule = ruleFactory(false, feature)\n  let scenario = scenarioFactory(false, feature)\n  let background = backgroundFactory(false, feature)\n  let activeParent:TBlockParentAst = feature\n  let tagCache:TTagsAst = undefined\n\n  /*\n   * Loop over each line of text, and compose the line with corresponding regex to find a match\n   */\n  return lines.reduce((featuresGroup, line, index) => {\n\n    if(parseError) return featuresGroup\n\n    /*\n     * Check for new feature, or parse the current features text\n     */\n    feature = ensureFeature(featuresGroup, feature, line, text, index)\n\n    /**\n     * If there's an error parsing the feature, set it so we don't continue parsing\n     */\n    if(feature?.errors?.length) parseError = true\n\n    /*\n     * Check for child content of the feature or activeParent and parse the line when matched\n     * Or if there is a parseError\n     */\n    if (\n      parseError ||\n      featureEmptyLine(feature, line, index) ||\n      featureComment(feature, line, index) ||\n      featureMeta(feature, line, index)\n    ){\n      return featuresGroup\n    }\n\n    /*\n     * Check for new feature rule, and add rule to feature object\n     */\n    rule = ensureRule(feature, rule, line, index)\n\n    /*\n     * Check for new feature scenario, and add scenario to feature object\n     */\n    scenario = ensureScenario(feature, rule, scenario, line, index)\n\n    /*\n     * Check for new feature scenario, and add scenario to feature object\n     */\n    background = ensureBackground(feature, rule, background, line, index)\n\n    // Check for stepTags before check for the next active parent\n    // This way We don't add a step to the wrong parent\n    if ((`steps` in activeParent)){\n      const step = parseStep(activeParent, lines, line, index)\n      if(step){\n        if(tagCache){\n          step.tags = tagCache\n          tagCache = undefined\n        }\n\n        return featuresGroup\n      }\n    }\n\n    /*\n     * Get the currently active parent based on the next line to be parsed\n     * This allows setting the active parent before the next iteration\n     */\n    activeParent = setActiveParent(\n      activeParent,\n      feature,\n      rule,\n      scenario,\n      background,\n      line\n    )\n\n    /**\n     * If there's tag cache from the last iteration\n     * After the next active parent has been set\n     */\n    if(tagCache){\n      activeParent.tags = tagCache\n      tagCache = undefined\n    }\n    // Check for tags after the next active parent has been set\n    else tagCache = checkTags(line, index)\n\n    return featuresGroup\n  }, features)\n}\n","/**\n * Parses definitions from text content by calling the steps.register function\n * @function\n * @public\n * @export\n *\n */\nexport const parseDefinition = function (text:string) {\n  const registered = this.steps.register([text])\n  return registered\n}\n","import type {\n  TRuleAst,\n  TFeatureAst,\n  TScenarioAst,\n  TParkinRunOpts,\n  TBackgroundAst,\n} from '../types'\n\nimport { parseTags } from './hasTag'\nimport {\n  isStr,\n  exists,\n  emptyArr,\n  eitherArr,\n} from '@keg-hub/jsutils'\n\n\ntype TFilterMatch = {\n  name?:string,\n  tags:string[],\n  options:{\n    name?:string,\n    tags?:string[]\n  }\n}\n\ntype TFilterChild = {\n  tags?:string[]\n  nameKey: `background`|`scenario`|`rule`\n  children: Array<TBackgroundAst|TRuleAst | TScenarioAst>\n  options:{\n    name?:string,\n    tags?:string[]\n  }\n}\n\nconst emptyOpts = { tags: {}, steps: {} } as TParkinRunOpts\n\n/**\n * Checks for a match between name and filter tags\n */\nconst filterMatch = ({\n  name,\n  tags,\n  options\n}:TFilterMatch) => {\n  const {\n    name: filterName,\n    tags: filterTags\n  } = options\n\n  const nameMatch = !filterName || !name || name.includes(filterName)\n  const tagMatch = !filterTags?.length\n    || (tags?.length && filterTags?.every((clientTag:string) => tags?.includes(clientTag)))\n\n  return nameMatch && tagMatch\n}\n\nconst getFilterOpts = (opts:TParkinRunOpts=emptyOpts) => {\n  const { name } = opts\n  const filterTags = opts.tags?.filter\n\n  const tags = isStr(filterTags)\n    ? parseTags(filterTags)\n    : eitherArr(filterTags, [])\n\n  return { name, tags }\n}\n\n\nconst filterChild = ({\n  options,\n  nameKey,\n  children,\n  tags=emptyArr as string[],\n}:TFilterChild) => {\n  // check for matching children, where children inherit their parent feature's tags\n  return children.filter(child => {\n    return filterMatch({\n      options,\n      name: child[nameKey],\n      tags: [ ...(child?.tags?.tokens || (emptyArr as string[])), ...tags ],\n    })\n  })\n}\n\n/**\n * Filters features, rules, background, and scenarios based on the passed in filterOptions\n * If tags exist, and they match, then the item is included\n * If no tags exists, or the tags don't match, then they are not included\n * If a features has a matching tag, then the entire feature is included\n * To filter on rules, background or scenarios, the feature must not include the matching tag\n *  - Instead the tag should be included on the rule, background or scenario\n *  - And the feature should not has ANY tags\n * @function\n * @private\n * @param {Array} features - Features to be run\n * @param {TParkinRunOpts} filterOptions - Filters for running Features\n *\n * @returns {Array} - Filtered features that should be run\n */\nexport const filterFeatures = (\n  features:TFeatureAst[],\n  filterOptions:TParkinRunOpts=emptyOpts\n) => {\n\n  const options = getFilterOpts(filterOptions)\n\n  // If no filters, then run all features\n  if(!options?.tags?.length && !options?.name) return features\n\n  return features.reduce((filtered, feature) => {\n\n    const isMatchingFeature = filterMatch({\n      options,\n      name: feature.feature,\n      tags: feature?.tags?.tokens,\n    })\n\n    if (isMatchingFeature) {\n      filtered.push(feature)\n      return filtered\n    }\n\n    const { rules, scenarios, background, ...rest} = feature\n    const copy = { ...rest, rules: [], scenarios: [] } as Partial<TFeatureAst>\n\n    // check for matching background, where background inherit their parent feature's tags\n    const matchingBackground = exists(background)\n      && filterChild({\n        options,\n        nameKey: `background`,\n        children: [background],\n        tags: feature?.tags?.tokens,\n      }) as TBackgroundAst[]\n\n    // check for matching rules, where rules inherit their parent feature's tags\n    const matchingRules = filterChild({\n      options,\n      nameKey: `rule`,\n      children: rules,\n      tags: feature?.tags?.tokens,\n    }) as TRuleAst[]\n\n    // check for matching scenarios, where scenarios inherit their parent feature's tags\n    const matchingScenarios = filterChild({\n      options,\n      nameKey: `scenario`,\n      children: scenarios,\n      tags: feature?.tags?.tokens,\n    }) as TScenarioAst[]\n\n\n    const hasBackgroundMatch = Boolean(matchingBackground.length)\n    const hasRuleMatch = Boolean(matchingRules.length)\n    const hasScenarioMatch = Boolean(matchingScenarios.length)\n\n    if(hasBackgroundMatch || hasRuleMatch || hasScenarioMatch){\n      hasBackgroundMatch && (copy.background = matchingBackground[0])\n      hasRuleMatch && (copy.rules = matchingRules)\n      hasScenarioMatch && (copy.scenarios = matchingScenarios)\n\n      filtered.push(copy)\n    }\n\n    return filtered\n  }, [])\n}\n","import type { TSuite, TSpec, TSpecResult, TJasmineEnv, ETestType } from '../types'\nimport { EAstObject, EResultAction } from '../types'\n\nimport { constants } from '../constants'\nimport { testMethodFill } from './errors'\nimport { noOp, get } from '@keg-hub/jsutils'\nimport { hasJasmine, resolveJasmine } from './globalScope'\nconst { SPEC_RESULT_LOG, LOG_JEST_SPEC_ENV } = constants\n\n\n/**\n * Converts a log into a string, and logs it to stdout wrapped by SPEC_RESULT_LOG constant\n * Which allows easy parsing the spec output json object\n * @function\n * @private\n *\n */\nconst logResultToTerminal = (result:TSpecResult) => {\n  const timestamp = new Date().getTime()\n  get(process, `env.${LOG_JEST_SPEC_ENV}`) &&\n    process.stdout.write(\n      [\n        SPEC_RESULT_LOG,\n        JSON.stringify({ ...result, timestamp }),\n        SPEC_RESULT_LOG,\n      ].join(``)\n    )\n}\n\n/**\n * Gets the suite type based on the description text\n * The first word should be the type, if not, then it's a feature\n * @function\n * @private\n *\n */\nconst getSuiteData = (suite:TSuite) => {\n  const description:string|undefined = get(suite, `description`)\n\n  const type = !description\n    ? `Feature`\n    : description.startsWith(`Scenario >`)\n      ? `Scenario`\n      : description.startsWith(`Background >`)\n        ? `Background`\n        : description.startsWith(`Rule >`)\n          ? `Rule`\n          : `Feature`\n\n  return {\n    type: type.toLowerCase() as EAstObject,\n    // Format the description to match the actual Gherkin syntax\n    ...(type !== `Feature` && {\n      description: description.replace(`${type} >`, `${type}:`),\n    }),\n  }\n}\n\n/**\n * Resolves a test method from the global scope\n * Returns a NOOP when getTestMethod.PARKIN_TEST_MODE is true\n * This allows testing the runner methods, without running the tests\n * @function\n * @private\n *\n * @returns {function} - Test method\n */\nexport const getTestMethod = (type:ETestType, testMode?:boolean) => {\n  // To write tests for the runner, we have to override the default test methods\n  // This allows testing the runner methods, without running the tests\n  return testMode ? noOp : global[type] || testMethodFill(type)\n}\n\n/**\n * Builds a custom jasmine reporter\n * Checks failed specs and sets all all specs in a suite to disable when found\n * @function\n * @private\n *\n */\nconst buildReporter = (jasmineEnv:TJasmineEnv) => {\n  const suites = []\n  const jasmineDescribe = jasmineEnv.describe\n\n  // Wrap the describe method, so we can capture each test suite\n  // This allows us to access them later check skip failed specs\n  jasmineEnv.describe = (...args) => {\n    const suite = jasmineDescribe.apply(null, args)\n    suites.push(suite)\n\n    return suite\n  }\n\n  return {\n    suiteStarted: (suite:TSuite) => {\n      logResultToTerminal({\n        ...suite,\n        ...getSuiteData(suite),\n        action: EResultAction.start,\n      } as TSpecResult)\n    },\n    specStarted: (result:TSpecResult) => {\n      logResultToTerminal({\n        ...result,\n        type: EAstObject.step,\n        action: EResultAction.start,\n      })\n    },\n    specDone: (result:TSpecResult) => {\n      // Check if the env is set to log the spec result\n      logResultToTerminal({\n        ...result,\n        type: EAstObject.step,\n        action: EResultAction.end,\n      })\n\n      // If the spec passed, just return\n      if (result.status !== `failed`) return\n\n      // If the spec failed, loop through all other specs, and disable them\n      // This ensures if a spec fails, all follow specs will be skipped\n      const suite:TSuite = suites.find(suite =>\n        suite.children.find((spec:TSpec) => spec.result === result)\n      )\n      suite && suite.children.map((spec:TSpec) => spec.disable())\n    },\n    suiteDone: (suite:TSuite) => {\n      logResultToTerminal({\n        ...suite,\n        ...getSuiteData(suite),\n        action: EResultAction.end,\n      } as TSpecResult)\n    },\n  }\n}\n\n/**\n * Checks if jasmine is available on the global scope\n * If it is, then builds and adds a custom reporter to it\n * @function\n * @export\n *\n */\nexport const skipTestsOnFail = (testMode?:boolean) => {\n  if (!hasJasmine) return\n\n  const jasmineEnv = resolveJasmine().getEnv()\n\n  jasmineEnv &&\n    jasmineEnv.describe &&\n    jasmineEnv?.addReporter?.(buildReporter(jasmineEnv))\n}\n","import type { Hooks } from './hooks'\nimport type { Steps } from './steps'\nimport type {\n  TRuleAst,\n  TStepAst,\n  TFeatureAst,\n  TWorldConfig,\n  TScenarioAst,\n  TStepParentAst,\n  TParkinRunOpts,\n  TBackgroundAst,\n  TParkinRunFeaturesInput\n} from './types'\n\nimport {hasTag} from './utils/hasTag'\nimport { parseFeature } from './parse'\nimport { ETestType, EHookType } from './types'\nimport { filterFeatures } from './utils/filterFeatures'\nimport { getTestMethod, skipTestsOnFail } from './utils/testMethods'\nimport {\n  throwMissingSteps,\n  throwMissingHooks,\n  throwMissingFeatureText\n} from './utils/errors'\nimport {\n  isArr,\n  isObj,\n  isStr,\n  pickKeys,\n  emptyObj,\n  capitalize,\n} from '@keg-hub/jsutils'\n\ntype TRunTestMode = {\n  PARKIN_TEST_MODE?: boolean\n} & ((...args:any) => any)\n\n\nconst emptyOpts = { tags: {}, steps: {} } as TParkinRunOpts\n\nconst getStepOpts = (\n  step:TStepAst,\n  options:TParkinRunOpts=emptyOpts,\n) => {\n  const shared = options?.steps?.shared\n  const single = options?.steps?.[step?.uuid]\n\n  return {\n    ...shared,\n    ...single,\n    retry: single?.retry\n      || shared?.retry\n      || options?.retry\n      || 0,\n    timeout: single?.timeout\n      || shared?.timeout\n      || options?.timeout\n      || 15000\n  }\n}\n\n/**\n * Builds the title for the current suite and spec being run\n * @function\n * @private\n * @param {string} text - Text content of the suite or spec\n * @param {string} type - Type of spec of suite being run\n *\n * @returns {string} - Built title\n */\nconst buildTitle = (text:string, type:string) => {\n  return `${capitalize(type)} > ${text}`\n}\n\n/**\n * Resolves and parses features based on the data type passed in\n * Ensures an array of parsed features is returned\n * @function\n * @public\n * @param {TFeatureAst} data - Feature content\n * @param {TWorldConfig} $world - Holds configuration for the running test environment\n *\n * @returns {Array} - passed in data converted into parsed Features\n */\nconst resolveFeatures = (\n  data:TParkinRunFeaturesInput,\n  $world:TWorldConfig\n):TFeatureAst[] => {\n  return isStr(data)\n    ? parseFeature(data, $world)\n    : isObj<TFeatureAst>(data)\n      ? [data]\n      : isArr<TFeatureAst[]>(data)\n        ? (data as TFeatureAst[]).reduce(\n          (features, feature) =>\n            features.concat(resolveFeatures(feature, $world)),\n          []\n        )\n        : throwMissingFeatureText()\n}\n\n/**\n * Calls the `it` global passing in a registered step function based on the step text\n * @function\n * @private\n * @param {Steps} stepsInstance - Instance of the Steps class\n * @param {TStepAst} step - Parsed Step mode object\n * @param {boolean} testMode - Allows testing the runner methods, without running the tests\n *\n * @returns {Void}\n */\nconst runStep = (\n  stepsInstance:Steps,\n  step:TStepAst,\n  options:TParkinRunOpts=emptyOpts,\n  testMode:boolean\n) => {\n  const test = getTestMethod(ETestType.test, testMode)\n  const opts = getStepOpts(step, options)\n  const disabled = opts?.disabled || hasTag(step?.tags?.tokens, options?.tags?.disabled)\n\n  const testMethod = async () => {\n    if(disabled) return\n\n    return await stepsInstance.resolve(\n      step.step,\n      step,\n      opts\n    )\n  }\n  testMethod.ParkinMetaData = {\n    disabled,\n    ...pickKeys(step, [ `uuid`, `step`, `index`, `tags`, `type`, `definition`])\n  }\n\n  // Jest only accepts timeout as the last argument\n  // So we have to check the environment to know the last argument\n  const last = process?.env?.JEST_WORKER_ID !== undefined\n    ? opts.timeout\n    : opts\n\n  return test(`${capitalize(step.type)} ${step.step}`, testMethod, last)\n}\n\n/**\n * Loops through the parents steps and calls the matching definition method\n * @function\n * @private\n * @param {TStepParentAst} parent - Parent object containing the steps to run\n * @param {string} title - Text passed as the first argument to the describe method\n * @param {Steps} stepsInstance - Instance of the Steps class\n * @param {boolean} testMode - Allows testing the runner methods, without running the tests\n *\n * @returns {Array} - Responses from the parents steps\n */\nconst loopSteps = (\n  parent:TStepParentAst,\n  title:string,\n  stepsInstance:Steps,\n  options:TParkinRunOpts=emptyOpts,\n  testMode:boolean\n) => {\n  const describe = getTestMethod(ETestType.describe, testMode)\n  const disabled = hasTag(parent?.tags?.tokens, options?.tags?.disabled)\n\n  const describeMethod = () => {\n    if(disabled) return\n    // Map over the steps and call them\n    // Store the returned promise in the responses array\n    parent.steps.map(step => runStep(stepsInstance, step, options, testMode))\n  }\n  describeMethod.ParkinMetaData = {\n    disabled,\n    ...pickKeys(parent, [`index`, `uuid`, `tags`, `type`, `background`, `scenario`])\n  }\n\n  return describe(title, describeMethod)\n}\n\n/**\n * Loops through the passed in scenarios steps and calls runStep for each\n * @function\n * @private\n * @param {Steps} stepsInstance - Instance of the Steps class\n * @param {TScenarioAst} scenario - Parsed feature scenario object containing the steps to run\n * @param {TBackgroundAst} background - Parsed feature scenario object containing the steps to run\n * @param {boolean} testMode - Allows testing the runner methods, without running the tests\n *\n * @returns {Void}\n */\nconst runScenario = (\n  stepsInstance:Steps,\n  scenario:TScenarioAst,\n  background:TBackgroundAst,\n  options:TParkinRunOpts=emptyOpts,\n  testMode:boolean\n) => {\n\n  // If there's a background, run the background steps first\n  background &&\n    runBackground(stepsInstance, scenario.scenario, background, options, testMode)\n\n  // Next run the scenario steps once the background completes\n  return loopSteps(\n    scenario,\n    buildTitle(scenario.scenario, `Scenario`),\n    stepsInstance,\n    options,\n    testMode\n  )\n}\n\n/**\n * Loops through the steps of the passed in background and calls runStep for each\n * @function\n * @private\n * @param {Steps} stepsInstance - Instance of the Steps class\n * @param {string} title - Description or title of the background\n * @param {TBackgroundAst} background - Parsed feature scenario object containing the steps to run\n * @param {boolean} testMode - Allows testing the runner methods, without running the tests\n *\n * @returns {Void}\n */\nconst runBackground = (\n  stepsInstance:Steps,\n  title:string,\n  background:TBackgroundAst,\n  options:TParkinRunOpts=emptyOpts,\n  testMode:boolean\n) => {\n  // If there's a background, run the background steps first\n  return loopSteps(\n    background,\n    buildTitle(title, `Background`),\n    stepsInstance,\n    options,\n    testMode\n  )\n}\n\n/**\n * Loops through the passed in rules steps and calls runStep for each\n * @function\n * @private\n * @param {Steps} stepsInstance - Instance of the Steps class\n * @param {TRuleAst} rule - Parsed feature rule object containing the steps to run\n * @param {TBackgroundAst} background - Parsed background object containing the steps to run before the rule\n * @param {boolean} testMode - Allows testing the runner methods, without running the tests\n *\n * @returns {Void}\n */\nconst runRule = (\n  stepsInstance:Steps,\n  rule:TRuleAst,\n  background:TBackgroundAst,\n  options:TParkinRunOpts=emptyOpts,\n  testMode:boolean\n) => {\n  // Map over the rule scenarios and call their steps\n  const disabled = hasTag(rule?.tags?.tokens, options?.tags?.disabled)\n\n  const describeMethod = () => {\n    if(disabled) return\n\n    background\n      && runBackground(\n          stepsInstance,\n          rule.rule,\n          background,\n          options,\n          testMode\n        )\n\n    rule.scenarios.map(scenario => runScenario(\n      stepsInstance,\n      scenario,\n      rule.background,\n      options,\n      testMode\n    ))\n\n  }\n\n  describeMethod.ParkinMetaData = {\n    disabled,\n    ...pickKeys(\n      rule,\n      [`index`, `uuid`, `tags`, `type`, `rule`]\n    )\n  }\n\n  return describe(`Rule > ${rule.rule}`, describeMethod)\n\n}\n\n/**\n * Parses and runs the steps of a feature text string\n * Uses the registered steps of the passed in Steps class instance to evaluate the feature steps\n * @class\n * @public\n * @param {Object} stepsInstance - Instance of the Steps class\n * @param {Hooks} hooksInstance - instance of the Hooks class, storing the client's registered test callbacks\n *\n * @returns {Object} Instance of the Runner class\n */\nexport class Runner {\n\n  steps:Steps\n  hooks:Hooks\n  _world:TWorldConfig\n\n  constructor(steps:Steps, hooks:Hooks, world:TWorldConfig) {\n    !steps && throwMissingSteps()\n    !hooks && throwMissingHooks(hooks)\n\n    this.steps = steps\n    this.hooks = hooks\n    this._world = world\n  }\n\n  /**\n   * Gets the features to be run for a test\n   * @param {TParkinRunFeaturesInput} data - Feature data as a string or parsed Feature model\n   * @param {TParkinRunOpts} options - Define how the steps are run\n   */\n  getFeatures = (\n    data:TParkinRunFeaturesInput,\n    options:TParkinRunOpts=emptyOpts\n  ) => {\n    const features = resolveFeatures(data, this._world)\n    return filterFeatures(features, options)\n  }\n\n  /**\n   * Parses and runs the steps of a feature text string\n   * Matches each step to a registered steps of the Steps class instance\n   * @memberof Runner\n   * @function\n   * @public\n   * @param {TParkinRunFeaturesInput} data - Feature data as a string or parsed Feature model\n   * @param {TParkinRunOpts} options - Define how the steps are run\n   *\n   * @returns {boolean} - whether any tests ran\n   */\n  run = async (\n    data:TParkinRunFeaturesInput,\n    opts?:TParkinRunOpts\n  ) => {\n    const options = {\n      ...emptyOpts,\n      ...opts,\n      tags: {...emptyOpts?.tags, ...opts?.tags},\n      steps: {...emptyOpts?.steps, ...opts?.steps}\n    }\n    \n    // Set if were running tests for Parkin, or external tests\n    // Only used for testing purposes\n    const testMode = (this.run as TRunTestMode).PARKIN_TEST_MODE\n\n    // Setup step skip on failed\n    skipTestsOnFail(testMode)\n\n    const describe = getTestMethod(ETestType.describe, testMode)\n    const beforeAll = getTestMethod(ETestType.beforeAll, testMode)\n    const afterAll = getTestMethod(ETestType.afterAll, testMode)\n    const beforeEach = getTestMethod(ETestType.beforeEach, testMode)\n    const afterEach = getTestMethod(ETestType.afterEach, testMode)\n\n    // Get all the features to be run\n    // Then filter them based on any options tags\n    const features = this.getFeatures(data, options)\n    if (!features.length) return false\n\n    // Ensures all tests resolve before ending by\n    // Using promises to resolve each feature / scenario / step\n    features.map(feature => {\n      const disabled = hasTag(feature?.tags?.tokens, options?.tags?.disabled)\n\n      if(!disabled){\n        beforeAll(this.hooks.getRegistered(EHookType.beforeAll))\n        afterAll(this.hooks.getRegistered(EHookType.afterAll))\n        beforeEach(this.hooks.getRegistered(EHookType.beforeEach))\n        afterEach(this.hooks.getRegistered(EHookType.afterEach))\n      }\n\n      const describeMethod = () => {\n        if(disabled) return\n\n        feature.rules.reduce((acc:any[], rule:TRuleAst) => {\n          acc.push(runRule(\n            this.steps,\n            rule,\n            feature.background,\n            options,\n            testMode\n          ))\n\n          return acc\n        }, [] as any[])\n\n        feature.scenarios.reduce((acc:any[], scenario:TScenarioAst) => {\n          acc.push(runScenario(\n            this.steps,\n            scenario,\n            feature.background,\n            options,\n            testMode\n          ))\n\n          return acc\n        }, [] as any[])\n\n      }\n\n      describeMethod.ParkinMetaData = {\n        disabled,\n        ...pickKeys(\n          feature,\n          [`index`, `uuid`, `tags`, `feature`, `type`, `errors`]\n        )\n      }\n    \n      // Map over the features scenarios and call their steps\n      // Store the returned promise in the responses array\n      return describe(buildTitle(feature.feature, `Feature`), describeMethod)\n    })\n\n    return true\n  }\n}\n","import type {\n  TAstType,\n  TTagsAst,\n  TBlockAst,\n} from '../types'\n\nimport { exists } from '@keg-hub/jsutils'\nimport { EFeatureTypes } from '../types'\n\n/**\n * TODO: Allow passing options here that will format the assembled feature\n * Converts the assembled array into a formatted feature string\n * Calls helper to format comment lines containing a #\n * Adds a line ending char at the end of each line => '\\n'\n * @function\n * @private\n */\nexport const formatAssembled = (\n  assembled:string[],\n) => {\n  // Use array.from to allow access to empty array position\n  // This ensures we can replace it with an empty string\n  return Array.from(assembled, (line) => exists(line) ? `${line.trimEnd()}\\n` : '\\n')\n    .join('')\n    .trimEnd()\n    .concat(` `, `\\n`)\n}\n\n/**\n * Adds content to the assembled array based on the passed in index\n * If no index exists, then the content is added to the end\n * If the index already exists, then the content is spliced into the array at the index\n * @function\n * @private\n *\n */\nexport const addContent = (\n  assembled:string[],\n  content:string,\n  index?:number | false\n) => {\n  !exists(index) || index === false\n    ? assembled.push(content)\n    : exists(assembled[index])\n      ? assembled.splice(index, 0, content)\n      : (assembled[index] = content)\n}\n\n\nexport const getWhiteSpace = (ast:TAstType|TBlockAst|TTagsAst, parent:TAstType, def=``) => {\n  return exists<string>(ast.whitespace)\n    ? ast.whitespace\n    : exists<string>(parent?.whitespace)\n      ? `${parent?.whitespace}${def}`\n      : def\n}\n\nexport const getTextContent = (\n  ast:TAstType,\n  parent:TAstType,\n  type:EFeatureTypes,\n  def=``\n) => {\n    const content = ast[ast.type] as string || `` \n    const whitespace = getWhiteSpace(ast, parent, def)\n    const prefix = `${whitespace}${type}:`\n\n    return content.length ? `${prefix} ${content}` : prefix\n}\n\n","import type {\n  TRuleAst,\n  TTagsAst,\n  TStepAst,\n  TBlockAst,\n  TFeatureAst,\n  TScenarioAst,\n  TIndexItemAst,\n  TBackgroundAst,\n} from '../types'\n\nimport { capitalize, exists } from '@keg-hub/jsutils'\nimport { EFeatureTypes, EAstObject } from '../types'\nimport { getTextContent, getWhiteSpace, addContent } from './helpers'\n\nexport const assembleFeature = (\n  assembled:string[],\n  { ast, parent }:TIndexItemAst\n) => {\n  const feature = ast as TFeatureAst\n  addContent(\n    assembled,\n    getTextContent(feature, parent, EFeatureTypes.Feature, ``),\n    feature.index\n  )\n}\n\nexport const assembleStep = (\n  assembled:string[],\n  { ast, parent }:TIndexItemAst\n) => {\n  const step = ast as TStepAst\n  const whitespace = getWhiteSpace(\n    step,\n    parent,\n    exists<string>(parent?.whitespace)\n      ? `${parent?.whitespace}  `\n      : `    `\n  )\n  const type = (step.type as string) !== EAstObject.step ? capitalize(step.type) : `Step`\n  addContent(\n    assembled,\n    `${whitespace}${type} ${step.step || ``}`,\n    step.index\n  )\n}\n\nexport const assembleTags = (\n  assembled:string[],\n  { ast, parent }:TIndexItemAst\n) => {\n  const tags = ast as TTagsAst\n  const whitespace = getWhiteSpace(\n    tags,\n    parent,\n    `feature` in parent ? `` : `  `\n  )\n\n  const content = tags.tokens.reduce((acc, token) => {\n    const trimmed = token?.trim?.()\n    return trimmed.length ? `${acc} @${token.replace(/^@/, ``)}` : acc\n  }, ``).trim()\n\n  addContent(\n    assembled,\n    `${whitespace || ``}${content}`,\n    parent.tags.index\n  )\n}\n\nexport const assembleRule = (\n  assembled:string[],\n  { ast, parent }:TIndexItemAst\n) => {\n  const rule = ast as TRuleAst\n  const whitespace = rule.whitespace || `  `\n  addContent(assembled, `${whitespace}${EFeatureTypes.Rule}: ${rule.rule || ``}`, rule.index)\n}\n\nexport const assembleBackground = (\n  assembled:string[],\n  { ast, parent }:TIndexItemAst\n) => {\n  const background = ast as TBackgroundAst\n  addContent(\n    assembled,\n    getTextContent(background, parent, EFeatureTypes.Background, `  `),\n    background.index\n  )\n}\n\nexport const assembleScenario = (\n  assembled:string[],\n  { ast, parent }:TIndexItemAst\n) => {\n  const scenario = ast as TScenarioAst\n  const type = scenario.alias as EFeatureTypes || EFeatureTypes.Scenario\n  addContent(\n    assembled,\n    getTextContent(scenario, parent, type, `  `),\n    scenario.index\n  )\n}\n\nexport const assembleBlock = (\n  assembled:string[],\n  { ast, parent }:TIndexItemAst\n) => {\n  const block = ast as TBlockAst\n  const whitespace = getWhiteSpace(block, parent, `  `)\n  addContent(assembled, `${whitespace}${block.content}`, block.index)\n}","import type { TIndexAst } from '../types'\n\nimport { EStepType, EAstObject } from '../types'\nimport { formatAssembled } from './helpers'\nimport {\n  assembleTags,\n  assembleStep,\n  assembleRule,\n  assembleBlock,\n  assembleFeature,\n  assembleScenario,\n  assembleBackground,\n} from './assembleParts'\n\nexport const fromIndex = (\n  indexes:TIndexAst,\n) => {\n\n  const assembled = indexes.reduce((assembled, item) => {\n    switch(item.ast.type as string){\n      case EStepType.given:\n      case EStepType.when:\n      case EStepType.then:\n      case EStepType.and:\n      case EStepType.but:\n      case EStepType[`*`]:\n      case EAstObject.step: {\n        assembleStep(assembled, item)\n        break\n      }\n      case EAstObject.tags: {\n        assembleTags(assembled, item)\n        break\n      }\n      case EAstObject.rule: {\n        assembleRule(assembled, item)\n        break\n      }\n      case EAstObject.block:\n      case EAstObject.empty:\n      case EAstObject.desire:\n      case EAstObject.reason:\n      case EAstObject.comment:\n      case EAstObject.perspective: {\n        assembleBlock(assembled, item)\n        break\n      }\n      case EAstObject.feature: {\n        assembleFeature(assembled, item)\n        break\n      }\n      case EAstObject.scenario: {\n        assembleScenario(assembled, item)\n        break\n      }\n      case EAstObject.background: {\n        assembleBackground(assembled, item)\n        break\n      }\n    }\n\n    return assembled\n  }, [] as string[])\n\n  return formatAssembled(assembled)\n}","import type {\n  TFeatureAst,\n  TScenarioAst,\n  TAssembleOpts,\n  TStepParentAst,\n  TScenarioParentAst,\n  TBackgroundParentAst\n} from '../types'\nimport { featureEmptyLine } from '../parse/ensureMeta'\nimport { ensureArr, emptyObj, omitKeys, isArr } from '@keg-hub/jsutils'\n\nexport const ensureBackgroundFirst = <T extends TBackgroundParentAst>(parent:T, opts:TAssembleOpts) => {\n  if(!opts.backgroundAfterParent) return parent\n\n  const { scenarios, background } = parent\n  if(!background || !scenarios?.length) return parent\n\n  const backgroundIdx = background.index\n  let lowIdx = backgroundIdx\n\n  scenarios.forEach(scenario => lowIdx > scenario.index && (lowIdx = scenario.index))\n  const bgIdx = lowIdx !== backgroundIdx ? lowIdx - 1 : backgroundIdx\n  parent.background = {...background, index: bgIdx}\n\n  return parent\n}\n\nexport const addEmptyLine = (feature:TFeatureAst, idx:number, opts:TAssembleOpts) => {\n  if(!feature.empty?.length) feature.empty = []\n\n  featureEmptyLine(feature, ``, idx + 1)\n\n  return feature\n}\n\nexport const formatStory = (\n  feature:TFeatureAst,\n  opts:TAssembleOpts=emptyObj\n) => {\n  const {desire, perspective, reason} = feature\n\n  let lastIdx = feature.index\n  if(reason)\n    isArr(reason)\n      ? ensureArr(reason).forEach(res => lastIdx = res.index > lastIdx ? res.index : lastIdx)\n      : (lastIdx = reason.index)\n  else if(desire) lastIdx = desire.index\n  else if(perspective) lastIdx = perspective.index\n\n  addEmptyLine(feature, lastIdx, opts)\n  \n  return feature\n}\n\nexport const formatOptions = (\n  feature:TFeatureAst,\n  opts:TAssembleOpts=emptyObj\n) => {\n  const keys = []\n  const {\n    removeEmpty,\n    removeComments,\n    emptyAfterStory,\n    emptyAfterFeature\n  } = opts\n  \n  removeEmpty && keys.push(`empty`)\n  removeComments && keys.push(`comments`)\n\n  const updated = omitKeys<TFeatureAst>(feature, keys)\n  if(emptyAfterStory || emptyAfterFeature)\n    !emptyAfterStory\n      ? addEmptyLine(updated, updated.index, opts)\n      : formatStory(updated, opts)\n\n  return updated\n}\n\nexport const formatSteps = <T extends TStepParentAst>(\n  feature:TFeatureAst,\n  parent:T,\n  opts:TAssembleOpts\n) => {\n\n  if(!opts.emptyAfterSteps) return parent\n\n  const lastIdx = parent.steps.reduce((index, step) => (\n    step.index > index ? step.index : index\n  ), parent.index)\n\n  addEmptyLine(feature, lastIdx, opts)\n\n  return parent\n}\n\nexport const formatBackground = <T extends TBackgroundParentAst>(\n  feature:TFeatureAst,\n  parent:T,\n  opts:TAssembleOpts\n) => {\n  if(!parent?.background) return parent\n  \n  const { emptyAfterBackground } = opts\n  let updated = ensureBackgroundFirst(parent, opts)\n  emptyAfterBackground && addEmptyLine(feature, parent.background.index, opts)\n\n  const background = formatSteps(feature, parent.background, opts)\n  updated.background = background\n\n  return updated as T\n}\n\nexport const formatScenarios = <T extends TScenarioParentAst>(\n  feature:TFeatureAst,\n  parent:T,\n  opts:TAssembleOpts,\n) => {\n  if(!parent?.scenarios) return parent\n\n  const { emptyAfterScenario } = opts\n\n  const scenarios = parent.scenarios.reduce((acc, scenario) => {\n    emptyAfterScenario && addEmptyLine(feature, scenario.index, opts)\n    const updated = formatSteps(feature, scenario, opts)\n\n    acc.push(updated)\n\n    return acc\n  }, [] as TScenarioAst[])\n\n  parent.scenarios = scenarios\n\n  return parent\n}\n\nexport const formatRules = (feature:TFeatureAst, opts:TAssembleOpts) => {\n  if(!feature?.rules) return feature\n\n  const { emptyAfterRule } = opts\n\n  const rules = feature.rules.reduce((acc, rule) => {\n    emptyAfterRule && addEmptyLine(feature, rule.index, opts)\n\n    let updated = formatBackground(feature, rule, opts)\n\n    updated?.scenarios?.length\n      && (updated = formatScenarios(feature, updated, opts))\n    \n    acc.push(updated)\n\n    return acc\n  }, [])\n\n  return {...feature, rules}\n}\n\nexport const formatFeature = (\n  feature:TFeatureAst,\n  opts:TAssembleOpts=emptyObj\n) => {\n  let updated = formatOptions(feature, opts)  \n  updated = formatBackground(updated, updated, opts)\n  updated = formatRules(updated, opts)\n  updated = formatScenarios(updated, updated, opts)\n\n  return updated\n}\n\n","import type {\n  TAstType,\n  TBlockAst,\n  TFindIndex,\n  TFeatureAst,\n  TStepParentAst,\n  TScenarioParentAst,\n  TBackgroundParentAst,\n} from '../types'\n\nimport { EBlockLoc } from '../types'\nimport { EStepType, EAstObject } from '../types'\nimport { emptyArr, exists, isArr, isObj, isNum } from '@keg-hub/jsutils'\n\n\n/**\n * Map step and singular types to plural types of the EAstObject enum\n */\nconst AstTypeMap = {\n  ...EAstObject,\n  [EStepType.step]: EAstObject.steps,\n  [EStepType.given]: EAstObject.steps,\n  [EStepType.when]: EAstObject.steps,\n  [EStepType.then]: EAstObject.steps,\n  [EStepType.and]: EAstObject.steps,\n  [EStepType.but]: EAstObject.steps,\n  [EStepType[`*`]]: EAstObject.steps,\n  [EAstObject.rule]: EAstObject.rules,\n  [EAstObject.comment]: EAstObject.comments,\n  [EAstObject.scenario]: EAstObject.scenarios,\n}\n\n/**\n * Checks all empty and comment block types for a matching index\n * If a match if found then add 1 to the index and check again\n * This ensures we don't overwrite an existing comment or empty line\n *\n */\nconst checkBlocks = (blocks:TBlockAst[], idx:number):number => {\n  const filtered = blocks.filter(block => block.index <= idx)\n  const match = filtered.find(block => block.index === idx)\n\n  return match ? checkBlocks(filtered, idx + 1) : idx\n}\n\n/**\n * Checks the global blocks to ensure we don't overwrite one of them\n */\nconst validateIndex = (\n  feature:TFeatureAst,\n  index:number\n) => {\n   return checkBlocks(\n    [\n    ...(feature.empty || emptyArr),\n    ...(feature.comments || emptyArr)\n  ], index)\n}\n\nconst validObj = (child:TAstType) => {\n  return isObj<TBlockAst>(child) && isNum(child?.index)\n}\n\nconst validArr = (childArr:TAstType[]) => {\n  return isArr<TAstType[]>(childArr) && childArr?.length\n}\n\nconst indexFromBlocks = ({\n  loc,\n  type,\n  parent,\n  feature,\n}:TFindIndex) => {\n\n  if(type === EAstObject.tags){\n    const idx = parent.index - 1\n    // Ensure we don't go -1 when feature is at 0 index\n    return idx >= 0 ? idx : 0\n  }\n\n  if(loc){\n    const found = loc === EBlockLoc.before ? parent.index - 1 : parent.index + 1\n    const tagCheck = parent?.tags?.index === found ? found - 1 : found\n\n    return tagCheck > 0 ? tagCheck : 0\n  }\n\n  const blocks = type === EAstObject.empty ? feature.empty : feature.comments\n\n  if(blocks?.length)\n    return blocks[blocks.length - 1].index + 1\n\n  // If no empty exist, add it to the end\n  const contentSplit = feature.content.split(`\\n`)\n  return contentSplit.length\n}\n\nconst indexFromStory = (feature:TFeatureAst) => {\n  const {\n    index,\n    reason,\n    desire,\n    perspective,\n  } = feature\n  \n  if(validArr(reason as TBlockAst[])){\n    const arr = reason as TBlockAst[]\n    const re = arr[arr.length - 1]\n\n    if(validObj(re)) return re.index + 1\n  }\n  else if(validObj(reason as TBlockAst)) return (reason as TBlockAst).index + 1\n\n  if(validObj(desire)) return desire.index + 1\n\n  if(validObj(perspective)) return perspective.index + 1\n\n  return index + 1\n}\n\nconst indexFromBackground = (\n  parent:TBackgroundParentAst,\n  feature:TFeatureAst\n) => {\n\n  if(validObj(parent?.background)){\n    const idx = indexFromSteps(parent.background)\n    if(exists(idx)) return idx\n  }\n\n  return parent === feature ? indexFromStory(feature) : parent.index + 1\n}\n\nconst indexFromRule = (\n  feature:TFeatureAst\n) => {\n  if(!validArr(feature?.rules)) return indexFromBackground(feature, feature)\n\n  const rule = feature?.rules?.[feature.rules.length - 1]\n\n  return validArr(rule?.scenarios)\n    ? indexFromScenarios(rule, feature)\n    : validObj(rule?.background)\n      ? indexFromBackground(rule, feature)\n      : rule.index + 1\n}\n\nconst indexFromScenarios = (\n  parent:TScenarioParentAst,\n  feature:TFeatureAst\n) => {\n  // Check existing scenarios\n  // If the parent is the feature, index from the rules\n  // Otherwise parent is a rule, so index from the it's background\n  if(validArr(parent?.scenarios)){\n    // If last scenario has steps, then use the last steps index + 1\n    // Otherwise use the last scenario's index\n    const scenario = parent.scenarios[parent.scenarios.length - 1]\n\n    if(validObj(scenario)) return indexFromSteps(scenario)\n  }\n\n  return parent === feature\n    ? indexFromRule(feature)\n    : indexFromBackground(parent, feature)\n}\n\nconst indexFromSteps = (\n  parent:TStepParentAst\n) => {\n\n  const step = validArr(parent?.steps)\n    && parent.steps[parent.steps.length - 1]\n\n  return validObj(step) ? step.index + 1 : parent?.index + 1\n}\n\n/**\n * Get the parent index, and add the step length to it\n * So parent == 4 + step length == 2 + 1, next index is 7\n * Index is global, but stepParent.steps is local\n * So add 1 because we don't count the 0 index at local\n * Validate the index with the feature blocks\n * Ensure we don't overwrite a comment of empty line\n */\nexport const findIndex = (props:TFindIndex) => {\n\n  const {\n    type,\n    parent,\n    feature,\n  } = props\n\n  const astType = AstTypeMap[type] || type\n\n  switch(astType){\n\n    // ---- Comments Index ---- //\n    case EAstObject.comments: {\n      const idx = indexFromBlocks(props)\n      return validateIndex(feature, idx)\n    }\n\n    // ---- Empty Index ---- //\n    case EAstObject.empty: {\n      const idx = indexFromBlocks(props)\n      return validateIndex(feature, idx)\n    }\n\n    // ---- Tags Index ---- //\n    case EAstObject.tags: {\n      const idx = indexFromBlocks(props)\n      return validateIndex(feature, idx)\n    }\n\n    // ---- Background Index ---- //\n    case EAstObject.background: {\n      const backParent = parent as TBackgroundParentAst\n      const idx = indexFromBackground(backParent, feature)\n      \n      return validateIndex(feature, idx)\n    }\n\n    // ---- Rules Index ---- //\n    case EAstObject.rules: {\n      const feat = parent as TFeatureAst\n      const idx = indexFromRule(feat)\n\n      return validateIndex(feat, idx)\n    }\n\n    // ---- Scenarios Index ---- //\n    case EAstObject.scenarios: {\n      const sParent = parent as TScenarioParentAst\n      const idx = indexFromScenarios(sParent, feature)\n\n      return validateIndex(feature, idx)\n    }\n    \n    // ---- Steps Index ---- //\n    case EAstObject.steps: {\n      const stepParent = parent as TStepParentAst\n      const idx = indexFromSteps(stepParent)\n\n      return validateIndex(feature, idx)\n    }\n  }\n\n}","import type {\n  TIndexAst,\n  TFeatureAst,\n  TIndexItemAst,\n} from '../types'\n\nimport { findIndex } from './findIndex'\nimport { exists } from '@keg-hub/jsutils'\n\n/**\n * Helper method that calculates the location of an item within the index array\n * Maintains an offset array the keeps track of item locations when duplicate indexes exist\n * If a duplicate it found, the new item is add after the existing item using splice\n * It then stores an offset to know how far from the original index an item was moved\n *\n * **IMPORTANT** - This modifies the indexes array and it's items indexes in-place\n * Items with duplicate indexes will have their indexes updated to their new location\n * The item will NOT be copied!\n */\nexport const addToIndexes = (\n  feature:TFeatureAst,\n  indexes:TIndexAst,\n  item:TIndexItemAst,\n  offset:number[]\n) => {\n  const index = exists(item.ast.index)\n    ? item.ast.index\n    : findIndex({\n        feature,\n        parent: item.parent,\n        type: item.ast.type,\n      })\n\n  // Get the offset up to the current index\n  const preAmount = offset.reduce((acc, val, idx) => {\n    return idx <= index && exists(val) ? acc + val : acc\n  }, 0)\n\n  // No item and no offset up to the index, then add the item\n  if(!indexes[index] && !preAmount){\n    indexes[index] = item\n    return indexes\n  }\n  // Otherwise add 1 to the offset and preAmount\n  // To account for the current duplicate \n  offset[index] = exists(offset[index]) ? offset[index] + 1 : 1\n\n  // Add it to the index, to get the new index location\n  // The preAmount happens on duplicate index\n  // But does not include the current duplicate\n  // So we add 1 for to account for it\n  const newIdx = index + preAmount + 1\n\n  // Update the item to now have a new index\n  item.ast.index = index\n\n  // Get the length of the current items\n  const updatedLen = indexes.length + 1\n\n  // If the newIndex is within it\n  // Then call splice to add it at the index\n  // Otherwise calculate the diff in length and add empty spaces for non-existing items\n  newIdx <= updatedLen\n    ? indexes.splice(newIdx, 0, item)\n    : indexes.splice(newIdx, 0, ...Array(newIdx - updatedLen), item)\n\n  return indexes\n}\n","import type {\n  TRuleAst,\n  TStepAst,\n  TBlockAst,\n  TIndexAst,\n  TBlockType,\n  TFeatureAst,\n  TScenarioAst,\n  TBackgroundAst,\n  TStepParentAst,\n  TTagsParentAst,\n  TBlockParentAst,\n  TScenarioParentAst,\n  TBackgroundParentAst\n} from '../types'\n\nimport { EAstObject } from '../types'\nimport { isArr } from '@keg-hub/jsutils'\nimport { addToIndexes } from './addToIndexes'\n\nconst indexSteps = (\n  feature:TFeatureAst,\n  indexes:TIndexAst,\n  steps:TStepAst[],\n  parent:TStepParentAst,\n  offset:number[]\n) => {\n  steps.forEach(step => {\n    addToIndexes(feature, indexes, {ast: step, parent}, offset)\n\n    step.tags && indexTags(feature, indexes, step, offset)\n  })\n} \n\nconst indexScenario = (\n  feature:TFeatureAst,\n  indexes:TIndexAst,\n  scenarios:TScenarioAst[],\n  parent:TScenarioParentAst,\n  offset:number[]\n) => {\n  scenarios.forEach(scenario => {\n    addToIndexes(feature, indexes, {ast: scenario, parent}, offset)\n\n    scenario.tags && indexTags(feature, indexes, scenario, offset)\n    scenario.steps && indexSteps(feature, indexes, scenario.steps, scenario, offset)\n  })\n}\n\nconst indexRules = (\n  feature:TFeatureAst,\n  indexes:TIndexAst,\n  rules:TRuleAst[],\n  parent:TFeatureAst,\n  offset:number[]\n) => {\n  rules.forEach(rule => {\n    addToIndexes(feature, indexes, {ast: rule, parent}, offset)\n\n    rule.tags && indexTags(feature, indexes, rule, offset)\n    rule.scenarios && indexScenario(feature, indexes, rule.scenarios, rule, offset)\n    rule.background && indexBackground(feature, indexes, rule.background, rule, offset)\n  })\n}\n\nconst indexReason = (\n  feature:TFeatureAst,\n  indexes:TIndexAst,\n  reason:TBlockAst|TBlockAst[],\n  parent:TFeatureAst,\n  offset:number[]\n) => {\n  isArr<TBlockAst[]>(reason)\n    ? reason.forEach(reason => addToIndexes(feature, indexes, {ast: reason, parent}, offset))\n    : addToIndexes(feature, indexes, {ast: reason, parent}, offset)\n}\n\nconst indexBackground = (\n  feature:TFeatureAst,\n  indexes:TIndexAst,\n  background:TBackgroundAst,\n  parent:TBackgroundParentAst,\n  offset:number[]\n) => {\n\n  addToIndexes(feature, indexes, {ast: background, parent}, offset)\n\n  background.tags && indexTags(feature, indexes, background, offset)\n  background?.steps && indexSteps(feature, indexes, background.steps, background, offset)\n\n}\n\nconst indexBlocks = (\n  feature:TFeatureAst,\n  indexes:TIndexAst,\n  blocks:TBlockAst[],\n  type:TBlockType,\n  parent:TBlockParentAst,\n  offset:number[]\n) => {\n  blocks.forEach(block => {\n    if(block.type !== type) block.type = type\n\n    addToIndexes(feature, indexes, {ast: block, parent}, offset)\n  })\n}\n\nconst indexTags = (\n  feature:TFeatureAst,\n  indexes:TIndexAst,\n  parent:TTagsParentAst,\n  offset:number[]\n) => {\n  const tags = parent?.tags\n  tags?.tokens?.length\n    && addToIndexes(feature, indexes, {ast: tags, parent}, offset)\n}\n\nexport const featureToIndexes = (\n  feature:TFeatureAst,\n) => {\n  const indexes:TIndexAst = []\n  let offset:number[] = []\n\n  feature?.tags\n    && indexTags(feature, indexes, feature, offset)\n\n  indexes[feature.index || indexes.length] = {ast: feature, parent: feature}\n\n  feature?.empty\n    && indexBlocks(\n      feature,\n      indexes,\n      feature?.empty,\n      EAstObject.empty,\n      feature,\n      offset\n    )\n\n  feature?.comments\n    && indexBlocks(\n        feature,\n        indexes,\n        feature?.comments,\n        EAstObject.comment,\n        feature,\n        offset\n      )\n\n  feature.desire\n    && indexBlocks(\n        feature,\n        indexes,\n        [feature.desire],\n         EAstObject.desire,\n         feature,\n         offset\n      )\n  feature.perspective\n    && indexBlocks(\n        feature,\n        indexes,\n        [feature.perspective],\n         EAstObject.perspective,\n         feature,\n         offset\n      )\n\n  feature.reason\n    && indexReason(\n        feature,\n        indexes,\n        feature.reason,\n        feature,\n        offset\n      )\n\n  feature.background\n    && indexBackground(\n        feature,\n        indexes,\n        feature.background,\n        feature,\n        offset\n      )\n\n  feature.rules\n    && indexRules(\n        feature,\n        indexes,\n        feature.rules,\n        feature,\n        offset\n      )\n\n  feature.scenarios\n    && indexScenario(\n        feature,\n        indexes,\n        feature.scenarios,\n        feature,\n        offset\n      )\n\n  offset = undefined\n\n  // Remove any empty items, then update their index\n  return indexes\n    .filter(item => item)\n    .map((item, idx) => {\n      item.ast.index = idx\n      return item\n    })\n}\n","import type { TFeatureAst, TAssembleOpts } from '../types'\n\nimport { fromIndex } from './fromIndex'\nimport { formatFeature } from './formatters'\nimport { featureToIndexes } from './featureToIndexes'\nimport { throwFeatureNotAnObj } from '../utils/errors'\nimport { isObj, eitherArr, emptyObj } from '@keg-hub/jsutils'\n\n/**\n * Converts parsed feature models back into a formatted strings\n * @function\n * @public\n * @export\n *\n */\nexport const assembleFeature = (\n  toAssemble:TFeatureAst|TFeatureAst[],\n  opts:TAssembleOpts=emptyObj\n):string[] => {\n  return eitherArr<TFeatureAst[]>(toAssemble, [toAssemble]).map((feature) => {\n    !isObj(feature) && throwFeatureNotAnObj(feature)\n    const updated = formatFeature(feature, opts)\n    const indexes = featureToIndexes(updated)\n\n    return fromIndex(indexes)\n  })\n}\n","import { assembleFeature as feature } from './feature'\nimport { fromIndex } from './fromIndex'\nimport { findIndex } from './findIndex'\nimport { featureToIndexes as toIndexes } from './featureToIndexes'\n\nexport const assemble = {\n  feature,\n  toIndexes,\n  findIndex,\n  fromIndex,\n}\n","\nimport { TFeatureAst, EAstObject, TParentAst, TStepAst } from \"../types\"\nimport { get } from \"@keg-hub/jsutils\"\nimport { ParentTypes, StepTypes } from '../constants'\n\ntype TFindIdInFeature = {id:string, uuid?:never}\ntype TFindUUIDInFeature = { id?:never, uuid:string }\ntype TFindWithID = TFindUUIDInFeature | TFindIdInFeature\n\nexport type TFindInFeature = TFindWithID & {\n  feature:TFeatureAst\n}\n\n/**\n * Finds an item in a features from the items uuid ( id )\n */\nexport const findInFeature = <T extends TParentAst|TStepAst=any>(props:TFindInFeature):T => {\n  const { id, uuid, feature } = props\n  const ref = id || uuid\n  if(!ref) return\n\n  const loc = ref?.toLowerCase?.().split(`.`).reduce((acc, part) => {\n    if(part.startsWith(EAstObject.feature)) return acc\n\n    const child = ParentTypes.includes(part as EAstObject)\n      ? part === EAstObject.scenario\n        ? EAstObject.scenarios\n        : part === EAstObject.rule\n          ? EAstObject.rules\n          : EAstObject.background\n      : StepTypes.includes(part as EAstObject)\n        ? EAstObject.steps\n        : part\n\n    child && acc.push(child)\n\n    return acc\n  }, [] as string[])\n\n  return get(feature, loc)\n}\n","import type {\n  TParse,\n  TAssemble,\n  EStepType,\n  TParkinRun,\n  TParamTypes,\n  TFeatureAst,\n  TWorldConfig,\n  TAddStepDefs,\n  TRegisterOrAddStep,\n  TRegisterStepMethod,\n} from './types'\n\nimport { Steps } from './steps'\nimport { Hooks } from './hooks'\nimport { Runner } from './runner'\nimport { assemble } from './assemble'\nimport { constants } from './constants'\nimport { idFromIdx } from './parse/idFromIdx'\nimport { findInFeature } from './utils/findInFeature'\nimport { Matcher, registerParamType } from './matcher'\nimport { parseFeature, parseDefinition } from './parse'\nimport { isObj, capitalize, noOpObj, eitherArr } from '@keg-hub/jsutils'\n\nconst { STEP_TYPES } = constants\n\n\n/**\n * @typedef\n * Parkin#Given - Register Given step definitions\n * Parkin#When - Register When step definitions\n * Parkin#Then - Register Then step definitions\n * Parkin#And - Register And step definitions\n * Parkin#But - Register But step definitions\n * Parkin#assemble - Object containing assemble helper methods\n * Parkin#assemble#feature - Assemble feature models into feature text\n * Parkin#run - Run step definitions against feature\n * Parkin#parse - Object containing parse helper methods\n * Parkin#parse#feature - Parse feature file text into a feature object\n * Parkin#parse#definition - Parse definition file text into a step definition objects\n * Parkin#registerSteps - Register step definitions to be accessible when running features\n * Parkin#matcher - Instance of the matcher class to give direct access to matcher methods\n * Parkin#paramTypes - Object containing param type helper methods\n * Parkin#paramTypes#register - Register custom paramTypes for step definitions\n */\n\n/**\n * Main class for handling feature files in the browser\n * Use the Steps, Runner and parser to allow executing feature file tests\n * @class\n * @public\n * @param {Object} world - Holds configuration for the running test environment\n * @param {Object} [steps] - Object with step type keys containing step definitions\n *\n * @returns {Object} Instance of the Parkin class\n */\nexport class Parkin {\n  #isInit = false\n  #world:TWorldConfig\n\n  steps:Steps\n  hooks:Hooks\n  parse:TParse\n  runner:Runner\n  run:TParkinRun\n  matcher:Matcher\n  assemble:TAssemble\n  paramTypes:TParamTypes\n  And:TRegisterStepMethod\n  But:TRegisterStepMethod\n  When:TRegisterStepMethod\n  Then:TRegisterStepMethod\n  Given:TRegisterStepMethod\n\n  constructor(\n    world?:TWorldConfig,\n    steps?:TRegisterOrAddStep\n  ) {\n    isObj(world) && this.init(world, steps)\n  }\n\n  get world(){\n    return this.#world\n  }\n\n  set world(update:TWorldConfig){\n    this.#world = update\n    this.steps._world = update\n    this.runner._world = update\n  }\n\n  init = (\n    world:TWorldConfig = noOpObj as TWorldConfig,\n    steps?:TRegisterOrAddStep,\n    warn=true\n  ) => {\n    if (this.#isInit){\n      warn && console.warn(`This instance of parkin has already been initialized!`)\n\n      return\n    }\n\n    // Ensure the world.$alias object exists\n    if (!isObj(world.$alias)) world.$alias = {}\n\n    // Set isInit, so we can't re-initialized\n    this.#isInit = true\n\n    this.steps = new Steps(world)\n    this.hooks = new Hooks(world, this)\n    this.runner = new Runner(this.steps, this.hooks, world)\n    this.world = world\n\n    /**\n     * Runs the step definition methods matching the steps of a feature\n     * @memberof Parkin\n     * @alias instance&period;run\n     * @param {string|Array<Object>|Object} data - Feature data as a string or parsed Feature model\n     * @param {Object} options - options object\n     * @param {string?} options.name - optional name to filter features by\n     * @param {Array<string>} options.tags - optional tags to filter features by\n     * @function\n     * @public\n     *\n     * @returns {function} - Run tests method for executing a features steps\n     */\n    this.run = this.runner.run\n\n    /**\n     * Access parse object containing feature and definition parse methods\n     * @memberof Parkin\n     * @alias instance&period;parse\n     * @function\n     * @public\n     *\n     * @property {function} feature - Method to parse a feature string into an object\n     * @property {function} definition - Method to parse a definition string an object\n     */\n    this.parse = {\n      feature: parseFeature.bind(this),\n      definition: parseDefinition.bind(this),\n    }\n\n    /**\n     * Access assemble object containing feature assemble methods\n     * @memberof Parkin\n     * @alias instance&period;assemble\n     * @function\n     * @public\n     *\n     * @property {function} feature - Method to assemble a feature model into a string\n     */\n    this.assemble = assemble\n\n    /**\n     * Access paramTypes object containing the paramTypes register method\n     * <br>Allows registering custom paramTypes within registered step definitions\n     * @memberof Parkin\n     * @alias instance&period;paramTypes\n     * @function\n     * @public\n     * @example\n     * const PK = new Parkin()\n     * PK.paramTypes.register({ ...paramType model })\n     *\n     * @returns {Object} - paramTypes object container `register` param types method\n     */\n    this.paramTypes = { register: registerParamType }\n\n    /**\n     * Access to step definition matcher functions\n     * <br>Allows calling the matchers directly to check if a definition matches a step\n     * @memberof Parkin\n     * @alias instance&period;paramTypes\n     * @function\n     * @public\n     * @example\n     * const PK = new Parkin()\n     * PK.matcher.find(definitions, step, world)\n     * @example\n     * const PK = new Parkin()\n     * PK.matcher.expression(definition, step, world)\n     * @example\n     * const PK = new Parkin()\n     * PK.matcher.regex(definition, step, world)\n     */\n    this.matcher = new Matcher(this)\n\n    // Register in steps passed in on initialization\n    isObj(steps) && this.registerSteps(steps)\n\n    /**\n     * Step Definition Register methods\n     * @memberof Parkin\n     * @alias instance&period;When\n     * @function\n     * @public\n     * @example\n     * const PK = new Parkin()\n     * PK.Given(`Given step definition string || regex`, ()=> {}, {})\n     * PK.When(`When step definition string || regex`, ()=> {}, {})\n     * PK.Then(`Then step definition string || regex`, ()=> {}, {})\n     * PK.And(`And step definition string || regex`, ()=> {}, {})\n     * PK.But(`But step definition string || regex`, ()=> {}, {})\n     *\n     */\n    this.steps.types.map(type => {\n      this[capitalize(type)] = (matcher, method, meta) =>\n        this.steps.register(`_${type}`, type, matcher, method, meta)\n    })\n  }\n\n  /**\n   * Helper for registering step definitions after the Parkin class instance has ben created\n   * @memberof Parkin\n   * @alias instance&period;registerSteps\n   * @function\n   * @public\n   * @example\n   *   // Example steps object passed in as the first argument\n   *   const steps = {\n   *     given: {\n   *       // Key / Value pair of matcher text and corresponding function\n   *       `I goto page {url}`: () => {},\n   *       // Value can also be an array with a function and meta data (i.e. [function, meta] )\n   *       `I goto page {url}`: [() => {}, { //...definition meta data  }],\n   *     },\n   *     when: { ... },\n   *     then: { ... }\n   *   }\n   *\n   */\n  registerSteps = (steps:TRegisterOrAddStep) => {\n\n    const stepKeys = Object.keys(steps)\n    const doRegister = Boolean(STEP_TYPES.find((type:EStepType) => stepKeys.includes(type)))\n\n    if(doRegister)\n      return Object.entries(steps)\n        .forEach(([type, typedSteps]) => {\n          // Loop each step type ( Given, When, Then, But, And )\n          STEP_TYPES.includes(type)\n            && Object.entries(typedSteps)\n                .forEach(([matcher, content]) => {\n                  // Register the step based by type with the Step class instance\n                  this.steps[capitalize(type)](matcher, ...eitherArr(content, [content]))\n                })\n        })\n\n    // If steps are already parsed, then get add them\n    else this.steps.add(steps as TAddStepDefs)\n\n  }\n  \n  /**\n   * Expose helper method to re-index a parsed feature AST when it's content is modified\n   * This allows the feature to be properly re-assembled at another time\n   */\n  reIndex = (feature:TFeatureAst) => {\n    // Remove the empty space because the content has changed\n    feature.empty = []\n    const assembled = this.assemble.feature([feature as TFeatureAst])[0]\n\n    return this.parse.feature(assembled, this.world)[0]\n  }\n\n  /**\n   * Finds an item in a features from the items uuid ( id )\n   */\n  find = findInFeature\n\n  /**\n   * Generates an id from the passed in options\n   */\n  generateId = idFromIdx\n\n}\n\n// Also export a instance of the class\n// This allows us to re-use the same instance as a singleton\nexport const PKInstance = new Parkin()\n"],"mappings":"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","names":["EHookType","EStepType","EAstObject","OPTIONS","SHOULD_LOG","SHOULD_THROW","LOG_PREFIX","defaultValidator","validate","argObj","validators","options","logs","throws","prefix","validationCaseEntries","Object","entries","validationResults","map","argName","argValue","validateArgument","$default","reduceCases","total","next","validationReducer","success","cases","reduce","setOptions","undefined","resetOptions","key","value","validator","shouldStringifyValidator","name","validatorString","toString","reason","finalResult","nextValidation","handleFailure","validation","shouldLog","shouldThrow","Error","join","console","error","isArr","value","Array","isArray","isObj","obj","Array","isArray","isFunc","func","isStr","str","equalsNaN","val","isNum","typeOf","val","Object","prototype","toString","call","slice","isEmpty","isObj","keys","length","isArr","isStr","trim","isNum","isSame","val1","val2","isValidDate","date","isNaN","Date","getTime","isBool","val","toStr","val","undefined","isStr","JSON","stringify","isStrBool","val","convertToStrBool","isBool","toStr","toBool","isColl","val","isEmptyColl","obj","isArr","length","isColl","Object","getOwnPropertyNames","isArray","Array","keyList","keys","hasProp","prototype","hasOwnProperty","deepEqual","a","b","arrA","arrB","i","key","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","toString","call","exists","value","undefined","isNegative","x","isNum","isPositive","isFloat","val","isInt","hasOwn","obj","prop","Object","prototype","hasOwnProperty","call","isEntry","maybeEntry","isArr","length","isNum","isStr","isArrMap","isObj","values","toBool","every","jsonEqual","one","two","JSON","stringify","e","isLowerCase","str","toLowerCase","isUpperCase","toUpperCase","isEmail","isStr","regex","Boolean","test","ipv4","ipv6","isIp","isIp4","isPhone","str","isStr","regex","Boolean","test","replace","length","isUrl","isUuid","quoteSymbols","isQuoted","quotes","some","quote","startsWith","endsWith","isValidUrl","str","regexp","test","isOrderable","x","isStr","isNum","isBool","identity","match","matchArg","args","length","entry","isArr","console","error","typeOf","caseValueOrPredicate","valueOnMatch","isFunc","default","hasDomAccess","window","document","createElement","isRegex","val","Boolean","RegExp","not","func","apply","bool","strBool","isStrBool","coll","isColl","deepEqual","emptyColl","isEmptyColl","dom","isDom","exists","empty","isEmpty","same","isSame","validDate","isValidDate","orderable","equalsNaN","float","isFloat","int","isInt","num","negative","isNegative","positive","isPositive","hasOwn","isEntry","arrMap","isArrMap","obj","isObj","jsonEqual","regex","email","isEmail","ip","isIp","lowerCase","isLowerCase","phone","isPhone","quoted","isQuoted","str","upperCase","isUpperCase","url","isUrl","uuid","isUuid","validUrl","isValidUrl","deepFreeze","obj","Object","freeze","getOwnPropertyNames","map","prop","hasOwnProperty","isFunc","isFrozen","noOpObj","emptyObj","noPropObj","content","noPropArr","emptyArr","noPropArr","isNonNegative","val","isNum","eitherArr","a","b","isArr","ensureArr","val","isArr","get","obj","path","fallback","isPathArr","isArr","isStr","exists","undefined","parts","split","result","reduce","prop","type","startsWith","replace","checkCall","method","params","isFunc","undefined","noOp","reduceObj","obj","cb","start","isObj","isFunc","Object","entries","reduce","data","key","value","omitKeys","obj","keys","isObj","reduceObj","key","_","updated","indexOf","pickKeys","reduce","defObjProps","Array","from","concat","Object","getOwnPropertyNames","prototype","reduce","map","functionName","getRegexSource","maybeRx","isRegex","source","isStr","parseArgs","args","isArr","last","length","options","undefined","expressions","splice","joinRegex","reduce","joined","next","nextSource","RegExp","capitalize","str","lowercaseTail","isStr","tail","slice","toLowerCase","toUpperCase","hashString","str","maxLength","isStr","length","split","reverse","join","hash","i","char","charCodeAt","Math","abs","isNonNegative","slice","reverseStr","str","isStr","undefined","reversed","char","getNearestDelimiterIndex","text","index","delimiters","indices","map","indexOf","sort","find","idx","getWordStartingAt","endingSpaceIdx","substring","length","getWordEndingAt","reversedIndex","match","regex","sanitize","toStr","match","match","matcher","match","regex","ALIAS_REF","ALIAS_WORLD_KEY","match","REGEX_VARIANT","match","sanitize","match","def","RX_RULE","RX_FEATURE","RX_SCENARIO","RX_EXAMPLE","RX_BACKGROUND","parseError","suite","emptyOpts","describe","assembled","match","reason","assembleFeature","assembleFeature","uuid","STEP_TYPES","matcher"]}